- name: Directory check exists
  description: Checks if a directory exists
  documentation: |-
    This bundle will define a condition `directory_check_exists_${directory_name}_{ok, reached, kept}` if the
    directory exists, or `directory_check_exists_${directory_name}_{not_ok, reached, not_kept, failed}` if
    the directory doesn't exists
  supported_targets: []
  class_prefix: directory_check_exists
  class_parameter: directory_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/directory_check_exists.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: directory_check_exists
  method_args:
  - directory_name
  parameters:
    directory_name:
      description: Full path of the directory to check
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File check exists
  description: Checks if a file exists
  documentation: |-
    This bundle will define a condition `file_check_exists_${file_name}_{ok, reached, kept}` if the
    file exists, or `file_check_exists_${file_name}_{not_ok, reached, not_kept, failed}` if
    the file doesn't exists
  supported_targets: []
  class_prefix: file_check_exists
  class_parameter: file_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_check_exists.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: file_check_exists
  method_args:
  - file_name
  parameters:
    file_name:
      description: File name (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: User primary group
  description: Define the primary group of the user. User must already exist.
  documentation: This method does not create the user.
  supported_targets: []
  class_prefix: user_primary_group
  class_parameter: login
  source: /home/amousset/projects/ncf/tree/30_generic_methods/user_primary_group.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: user_primary_group
  method_args:
  - login
  - primary_group
  parameters:
    primary_group:
      description: User's primary group
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    login:
      description: User's login
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Package install version
  description: Install or update a package in a specific version
  documentation: ''
  supported_targets: []
  class_prefix: package_install
  class_parameter: package_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/package_install_version.cf
  deprecated: Use [package_present](#_package_present) instead.
  rename_to: null
  action: null
  method_name: package_install_version
  method_args:
  - package_name
  - package_version
  parameters:
    package_version:
      description: Version of the package to install (can be "latest" to install it in its latest version)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    package_name:
      description: Name of the package to install
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Kernel module configuration
  description: Ensure that the modprobe configuration of a given kernel module is correct
  documentation: |-
    Ensure that the modprobe configuration of a given kernel module is correct.
     Rudder will search for the module configuration in a per-module dedicated section in /etc/modprobe.d/managed\_by\_rudder.conf.

     * If the module configuration is not found or incorrect, Rudder will (re-)create its configuration.
     * If the module is configured but with a different option file than used by Rudder, it will add the
     expected one in /etc/modprobe.d/managed\_by\_rudder.conf but will leave intact the already present one.

     The configuration syntax must respect the one used by /etc/modprobe.d defined in the modprobe.d manual page.
     ```
       # To pass a parameter to a module:
       options module_name parameter_name=parameter_value
       # To blacklist a module
       blacklist modulename
       # etc...
     ```

    #### Notes:
     If you want to force the module to be loaded at boot, use instead the method `kernel_module_enabled_at_boot` which
     uses other Rudder dedicated files.

    #### Example:

     To pass options to a broadcom module
     * `module_name` = b43
     * `configuration` = options b43 nohwcrypt=1 qos=0

     Will produce the resulting block in /etc/modprobe.d/managed\_by\_rudder.conf:
     ```
     ### b43 start section
     options b43 nohwcrypt=1 qos=0
     ### b43 end section
     ```
  supported_targets: []
  class_prefix: kernel_module_configuration
  class_parameter: module_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/kernel_module_configuration.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: kernel_module_configuration
  method_args:
  - module_name
  - configuration
  parameters:
    module_name:
      description: Complete name of the kernel module, as seen by lsmod or listed in /proc/modules
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    configuration:
      description: Complete configuration block to put in /etc/modprobe.d/
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: ^(alias|blacklist|install|options|remove|softdeps) +.*$
        max_length: 16384
      renamed_to: null
      p_type: String
- name: User home
  description: Define the home of the user. User must already exists.
  documentation: |-
    This method does not create the user, nor the home directory.
        entry example: /home/myuser
        The home given will be set, but not created.
  supported_targets: []
  class_prefix: user_home
  class_parameter: login
  source: /home/amousset/projects/ncf/tree/30_generic_methods/user_home.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: user_home
  method_args:
  - login
  - home
  parameters:
    home:
      description: User's home
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    login:
      description: User's login
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File from HTTP server
  description: Download a file if it does not exist, using curl with a fallback on wget
  documentation: |-
    This method finds a HTTP command-line tool and downloads the given source
    into the destination if it does not exist yet.

    This method **will NOT update the file after the first download** until its removal.

    On Linux based nodes it will tries `curl` first and fallback with `wget` if needed.
    On Windows based nodes, only `curl` will be used.
  supported_targets: []
  class_prefix: file_from_http_server
  class_parameter: destination
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_from_http_server.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: file_from_http_server
  method_args:
  - source
  - destination
  parameters:
    source:
      description: URL to download from
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    destination:
      description: File destination (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Variable string
  description: Define a variable from a string parameter
  documentation: "To use the generated variable, you must use the form `${variable_prefix.variable_name}` with each name replaced with the parameters of this method.\n\nBe careful that using a global variable can lead to unpredictable content in case of multiple definition, which is implicitly the case when a technique has more than one instance (directive). \nPlease note that only global variables are available within templates."
  supported_targets: []
  class_prefix: variable_string
  class_parameter: variable_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/variable_string.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: variable_string
  method_args:
  - variable_prefix
  - variable_name
  - value
  parameters:
    variable_prefix:
      description: The prefix of the variable name
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    variable_name:
      description: The variable to define, the full name will be variable_prefix.variable_name
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    value:
      description: The variable content
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File from a jinja2 template
  description: Build a file from a jinja2 template
  documentation: |-
    See [file_from_template_type](#_file_from_template_type) for general documentation about
    templates usage.

    This generic method will build a file from a jinja2 template
    using data (conditions and variables) found in the execution context.


    #### Setup

    It requires to have the jinja2 python module installed on the node, it can usually be done in ncf with
    `package_present("python-jinja2", "", "", "")`.

    WARNING: If you are using a jinja2 version older than 2.7
             trailing newlines will not be preserved in the destination file.

    #### Syntax

    Jinja2 is a powerful templating language, running in Python.
    The Jinja2 syntax reference documentation is [http://jinja.pocoo.org/docs/dev/templates/](http://jinja.pocoo.org/docs/dev/templates/)
    which will likely be useful, as Jinja2 is very rich and allows a lot more
    that what is explained here.

    This section presents some simple cases that cover what can be done with mustache templating,
    and the way the agent data is provided to the templating engine.

    The main specificity of jinja2 templating is the use of two root containers:

    * `classes` to access currently defined conditions
    * `vars` to access all currently defined variables

    Note: You can add comments in the template, that will not be rendered in the output file with
    `{# ... #}`.

    You can extend the Jinja2 templating engine by adding custom FILTERS and TESTS in the script
    `/var/rudder/configuration-repository/ncf/10_ncf_internals/modules/extensions/jinja2_custom.py`

    For instance, to add a filter to uppercase a string and a test if a number is odd, you can create
    the file `/var/rudder/configuration-repository/ncf/10_ncf_internals/modules/extensions/jinja2_custom.py`
    on your Rudder server with the following content:

    ```
    def uppercase(input):
        return input.upper()

    def odd(value):
        return True if (value % 2) else False

    FILTERS = {'uppercase': uppercase}
    TESTS = {'odd': odd}
    ```

    These filters and tests will be usable in your jinja2 templates automatically.

    ##### Conditions

    To display content based on conditions definition:

    ```jinja2
    {% if classes.my_condition is defined  %}
       display this if defined
    {% endif %}
    {% if not classes.my_condition is defined %}
       display this if not defined
    {% endif %}
    ```

    Note: You cannot use condition expressions here.

    You can also use other tests, for example other built-in ones or
    those defined in `jinja2_custom.py`:

    ```jinja2
    {% if vars.variable_prefix.my_number is odd  %}
       display if my_number is odd
    {% endif %}
    ```

    ##### Scalar variables

    Here is how to display a scalar variable value (integer, string, ...),
    if you have defined `variable_string("variable_prefix", "my_variable", "my_value")`:

    ```jinja2
    {{ vars.variable_prefix.my_variable }}
    ```

    You can also modify what is displayed by using filters. The built-in filters
    can be extended in `jinja2_custom.py`:

    ```jinja2
    {{ vars.variable_prefix.my_variable | uppercase }}
    ```

    Will display the variable in uppercase.

    ##### Iteration

    To iterate over a list, for example defined with:

    ```
    variable_iterator("variable_prefix", "iterator_name", "a,b,c", ",")
    ```

    Use the following file:

    ```jinja2
    {% for item in vars.variable_prefix.iterator_name %}
    {{ item }} is the current iterator_name value
    {% endfor %}
    ```

    Which will be expanded as:

    ```
    a is the current iterator_name value
    b is the current iterator_name value
    c is the current iterator_name value
    ```

    To iterate over a container defined by the following json file, loaded with
    `variable_dict_from_file("variable_prefix", "dict_name", "path")`:

    ```json
    {
       "hosts": [
           "host1",
           "host2"
       ],
       "files": [
           {"name": "file1", "path": "/path1", "users": [ "user1", "user11" ] },
           {"name": "file2", "path": "/path2", "users": [ "user2" ] }
       ],
       "properties": {
           "prop1": "value1",
           "prop2": "value2"
       }
    }
    ```

    Use the following template:

    ```jinja2
    {% for item in vars.variable_prefix.dict_name.hosts %}
    {{ item }} is the current hosts value
    {% endfor %}

    # will display the name and path of the current file
    {% for file in vars.variable_prefix.dict_name.files %}
    {{ file.name }}: {{ file.path }}
    {% endfor %}

    # will display the users list of each file
    {% for file in vars.variable_prefix.dict_name.files %}
    {{ file.name }}: {{ file.users|join(' ') }}
    {% endfor %}


    # will display the current properties key/value pair
    {% for key, value in vars.variable_prefix.dict_name.properties.items() %}
    {{ key }} -> {{ value }}
    {% endfor %}

    ```

    Which will be expanded as:

    ```
    host1 is the current hosts value
    host2 is the current hosts value

    # will display the name and path of the current file
    file1: /path1
    file2: /path2

    # will display the users list of each file
    file1: user1 user11
    file2: user2

    # will display the current properties key/value pair
    prop1 -> value1
    prop2 -> value2
    ```

    ##### System variables

    Some `sys` dict variables (like `sys.ipv4`) are also accessible as string, for example:

    * `${sys.ipv4}` gives `54.32.12.4`
    * `$[sys.ipv4[ethO]}` gives `54.32.12.4`
    * `$[sys.ipv4[eth1]}` gives `10.45.3.2`

    These variables are not accessible as dict in the templating data, but are represented as
    string:

    * `ipv4` is a string variable in the `sys` dict with value `54.32.12.4`
    * `ipv4[ethO]` is a string variable in the `sys` dict with value `54.32.12.4`
    * `ipv4` is not accessible as a dict in the template

    To access these value, use the following syntax in your jinja2 templates:

    ```
    vars.sys['ipv4[eth0]']
    ```
  supported_targets: []
  class_prefix: file_from_template
  class_parameter: destination
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_from_template_jinja2.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: file_from_template_jinja2
  method_args:
  - source_template
  - destination
  parameters:
    destination:
      description: Destination file (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    source_template:
      description: Source file containing a template to be expanded (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File check if block device
  description: Checks if a file exists and is a block device
  documentation: |-
    This bundle will define a condition `file_check_block_device_${file_name}_{ok, reached, kept}` if the
    file is a block_device, or `file_check_block_device_${file_name}_{not_ok, reached, not_kept, failed}` if
    the file is not a block device or does not exist
  supported_targets: []
  class_prefix: file_check_block_device
  class_parameter: file_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_check_block_device.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: file_check_block_device
  method_args:
  - file_name
  parameters:
    file_name:
      description: File name (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File ensure key -> value present
  description: Ensure that the file contains a pair of "key separator value"
  documentation: |-
    Edit (or create) the file, and ensure it contains an entry key -> value with arbitrary separator between the key and its value.
    If the key is already present, the method will change the value associated with this key.
  supported_targets: []
  class_prefix: file_ensure_key_value
  class_parameter: file
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_ensure_key_value.cf
  deprecated: Use [file_key_value_present](#_file_key_value_present) instead.
  rename_to: file_key_value_present
  action: null
  method_name: file_ensure_key_value
  method_args:
  - file
  - key
  - value
  - separator
  parameters:
    key:
      description: Key to define
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    separator:
      description: Separator between key and value, for example "=" or " " (without the quotes)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: true
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    file:
      description: File name to edit (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    value:
      description: Value to define
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Package install version compare
  description: Install a package or verify if it is installed in a specific version, or higher or lower version than a version specified
  documentation: |-
    *Example*:
    ```
    methods:
        "any" usebundle => package_install_version_cmp("postgresql", ">=", "9.1", "verify");
    ```
  supported_targets: []
  class_prefix: package_install
  class_parameter: package_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/package_install_version_cmp.cf
  deprecated: Use [package_present](#_package_present) instead.
  rename_to: null
  action: null
  method_name: package_install_version_cmp
  method_args:
  - package_name
  - version_comparator
  - package_version
  - action
  parameters:
    action:
      description: Action to perform, can be add, verify (defaults to verify)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    package_name:
      description: Name of the package to install or verify
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    package_version:
      description: The version of the package to verify (can be "latest" for latest version)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    version_comparator:
      description: Comparator between installed version and defined version, can be ==,<=,>=,<,>,!=
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select:
        - ==
        - <=
        - '>='
        - <
        - '>'
        - '!='
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Service stopped
  description: Ensure that a service is stopped using the appropriate method
  documentation: ''
  supported_targets: []
  class_prefix: service_stopped
  class_parameter: service_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/service_stopped.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: service_stopped
  method_args:
  - service_name
  parameters:
    service_name:
      description: Service
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Command execution
  description: Execute a command
  documentation: |-
    Execute the **Command** in shell.
    On DSC agent, the **Command** in executed through the Powershell `&` operator.

    The method status will report:

    * a **Repaired** if the return code is "0",
    * an **Error** if the return code is not "0"
  supported_targets: []
  class_prefix: command_execution
  class_parameter: command
  source: /home/amousset/projects/ncf/tree/30_generic_methods/command_execution.cf
  deprecated: null
  rename_to: null
  action: ''
  method_name: command_execution
  method_args:
  - command
  parameters:
    command:
      description: Command to run
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Service action
  description: Trigger an action on a service using the appropriate tool
  documentation: |-
    The `service_*` methods manage the services running on the system.

    #### Parameters

    ##### Service name

    The name of the service is the name understood by the service manager, except for the
    `is-active-process` action, where it is the regex to match against the running processes list.

    ##### Action

    The action is the name of an action to run on the given service.
    The following actions can be used:

    * `start`
    * `stop`
    * `restart`
    * `reload` (or `refresh`)
    * `is-active` (or `status`)
    * `is-active-process` (in this case, the "service" parameter is the regex to match againt process list)
    * `enable`
    * `disable`
    * `is-enabled`

    Other actions may also be used, depending on the selected service manager.

    #### Implementation

    These methods will detect the method to use according to the platform. You can run the methods with an `info`
    verbosity level to see which service manager will be used for a given action.

    WARNING: Due to compatibility issues when mixing calls to systemctl and service/init.d,
    when an init script exists, we will not use systemctl compatibility layer but directly service/init.d.

    The supported service managers are:

    * systemd (any unknown action will be passed directly)
    * upstart
    * smf (for Solaris)
    * service command (for non-boot actions, any unknown action will be passed directly)
    * /etc/init.d scripts (for non-boot actions, any unknown action will be passed directly)
    * SRC (for AIX) (for non-boot actions)
    * chkconfig (for boot actions)
    * update-rc.d (for boot actions)
    * chitab (for boot actions)
    * links in /etc/rcX.d (for boot actions)
    * Windows services

    #### Examples

    ```
    # To restart the apache2 service
    service_action("apache2", "restart");
    service_restart("apache2");
    ```
  supported_targets: []
  class_prefix: service_action
  class_parameter: service_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/service_action.cf
  deprecated: null
  rename_to: null
  action: is-* commands are not actions, but all other commands are
  method_name: service_action
  method_args:
  - service_name
  - action
  parameters:
    action:
      description: Action to trigger on the service (start, stop, restart, reload, ...)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    service_name:
      description: Name of the service
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Monitoring parameter
  description: Add a monitoring parameter to a node (requires a monitoring plugin)
  documentation: |-
    This method adds monitoring parameters to rudder nodes. The monitoring parameters are used to
    pass configuration to the monitoring plugins running with Rudder. Expected keys and parameters
    are specific to each plugin and can be found in their respective documentation.
  supported_targets: []
  class_prefix: monitoring_parameter
  class_parameter: key
  source: /home/amousset/projects/ncf/tree/30_generic_methods/monitoring_parameter.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: monitoring_parameter
  method_args:
  - key
  - value
  parameters:
    value:
      description: Value of the parameter
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    key:
      description: Name of the parameter
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File ensure line in INI section
  description: Ensure that a line is present in a section in a specific location. The objective of this method is to handle INI-style files.
  documentation: ''
  supported_targets: []
  class_prefix: file_ensure_line_present_in_ini_section
  class_parameter: file
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_ensure_line_present_in_ini_section.cf
  deprecated: Use [file_line_present_in_ini_section](#_file_line_present_in_ini_section) instead.
  rename_to: file_line_present_in_ini_section
  action: null
  method_name: file_ensure_line_present_in_ini_section
  method_args:
  - file
  - section
  - line
  parameters:
    section:
      description: Name of the INI-style section under which lines should be added (not including the [] brackets)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    file:
      description: File name to edit (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    line:
      description: Line to ensure is present inside the section
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Group absent
  description: Make sure a group is absent
  documentation: ''
  supported_targets: []
  class_prefix: group_absent
  class_parameter: group
  source: /home/amousset/projects/ncf/tree/30_generic_methods/group_absent.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: group_absent
  method_args:
  - group
  parameters:
    group:
      description: Group name
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Service reload
  description: Reload a service using the appropriate method
  documentation: See [service_action](#_service_action) for documentation.
  supported_targets: []
  class_prefix: service_reload
  class_parameter: service_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/service_reload.cf
  deprecated: null
  rename_to: null
  action: ''
  method_name: service_reload
  method_args:
  - service_name
  parameters:
    service_name:
      description: Name of the service
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Kernel module loaded
  description: Ensure that a given kernel module is loaded on the system
  documentation: |-
    Ensure that a given kernel module is loaded on the system.
      If the module is not loaded, it will try to load it via modprobe.
  supported_targets: []
  class_prefix: kernel_module_loaded
  class_parameter: module_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/kernel_module_loaded.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: kernel_module_loaded
  method_args:
  - module_name
  parameters:
    module_name:
      description: Complete name of the kernel module, as seen by lsmod or listed in /proc/modules
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Package verify version
  description: Verify if a package is installed in a specific version
  documentation: ''
  supported_targets: []
  class_prefix: package_install
  class_parameter: package_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/package_verify_version.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: package_verify_version
  method_args:
  - package_name
  - package_version
  parameters:
    package_version:
      description: Version of the package to verify (can be "latest" for latest version)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    package_name:
      description: Name of the package to verify
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File from local source with check
  description: Ensure that a file or directory is copied from a local source if a check command succeeds
  documentation: |-
    This method is a conditional file copy.

    It allows comparing the source and destination, and if they are different, call a command
    with the source file path as argument, and only update the destination if the commands succeeds
    (i.e. returns a code included in rc_ok).

    #### Examples

    ```
    # To copy a configuration file only if it passes a config test:
    file_from_local_source_with_check("/tmp/program.conf", "/etc/program.conf", "program --config-test", "0");
    ```

    This will:

    * Compare `/tmp/program.conf` and `/etc/program.conf`, and return `kept` if files are the same
    * If not, it will execute `program --config-test "/tmp/program.conf"` and check the return code
    * If it is one of the `rc_ok` codes, it will copy `/tmp/program.conf` into `/etc/program.conf` and return a repaired
    * If not, it will return an error
  supported_targets: []
  class_prefix: file_from_local_source_with_check
  class_parameter: destination
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_from_local_source_with_check.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: file_from_local_source_with_check
  method_args:
  - source
  - destination
  - check_command
  - rc_ok
  parameters:
    check_command:
      description: Command to run, it will get the source path as argument
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    source:
      description: Source file (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    destination:
      description: Destination file (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    rc_ok:
      description: Return codes to be considered as valid, separated by a comma (default is 0)
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File check if regular
  description: Checks if a file exists and is a regular file
  documentation: |-
    This bundle will define a condition `file_check_regular_${file_name}_{ok, reached, kept}` if the
    file is a regular_file, or `file_check_regular_${file_name}_{not_ok, reached, not_kept, failed}` if
    the file is not a regular file or does not exist
  supported_targets: []
  class_prefix: file_check_regular
  class_parameter: file_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_check_regular.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: file_check_regular
  method_args:
  - file_name
  parameters:
    file_name:
      description: File name (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Variable string from math expression
  description: Define a variable from a mathematical expression
  documentation: "To use the generated variable, you must use the form `${variable_prefix.variable_name}` with each name replaced with the parameters of this method.\n\nBe careful that using a global variable can lead to unpredictable content in case of multiple definition, which is implicitly the case when a technique has more than one instance (directive). \nPlease note that only global variables are available within templates.\n\n#### Usage\n\nThis function will evaluate a mathematical expression that may contain variables and format the result according to the provided format string.\n\nThe formatting string uses the standard POSIX printf format.\n\n#### Supported mathematical expressions\n\nAll the mathematical computations are done using floats.\n\nThe supported infix mathematical syntax, in order of precedence, is:\n\n- `(` and `)` parentheses for grouping expressions\n- `^` operator for exponentiation\n- `*` and `/` operators for multiplication and division\n- `%` operators for modulo operation\n- `+` and `-` operators for addition and subtraction\n- `==` \"close enough\" operator to tell if two expressions evaluate to the same number, with a tiny margin to tolerate floating point errors.  It returns 1 or 0.\n- `>=` \"greater or close enough\" operator with a tiny margin to tolerate floating point errors.  It returns 1 or 0.\n- `>` \"greater than\" operator.  It returns 1 or 0.\n- `<=` \"less than or close enough\" operator with a tiny margin to tolerate floating point errors.  It returns 1 or 0.\n- `<` \"less than\" operator.  It returns 1 or 0.\n\nThe numbers can be in any format acceptable to the C `scanf` function with the `%lf` format specifier, followed by the `k`, `m`, `g`, `t`, or `p` SI units.  So e.g. `-100` and `2.34m` are valid numbers.\n\nIn addition, the following constants are recognized:\n\n- `e`: 2.7182818284590452354\n- `log2e`: 1.4426950408889634074\n- `log10e`: 0.43429448190325182765\n- `ln2`: 0.69314718055994530942\n- `ln10`: 2.30258509299404568402\n- `pi`: 3.14159265358979323846\n- `pi_2`: 1.57079632679489661923 (pi over 2)\n- `pi_4`: 0.78539816339744830962 (pi over 4)\n- `1_pi`: 0.31830988618379067154 (1 over pi)\n- `2_pi`: 0.63661977236758134308 (2 over pi)\n- `2_sqrtpi`: 1.12837916709551257390 (2 over square root of pi)\n- `sqrt2`: 1.41421356237309504880 (square root of 2)\n- `sqrt1_2`: 0.70710678118654752440 (square root of 1/2)\n\nThe following functions can be used, with parentheses:\n\n- `ceil` and `floor`: the next highest or the previous highest integer\n- `log10`, `log2`, `log`\n- `sqrt`\n- `sin`, `cos`, `tan`, `asin`, `acos`, `atan`\n- `abs`: absolute value\n- `step`: 0 if the argument is negative, 1 otherwise\n\n#### Formatting options\n\nThe format field supports the following specifiers:\n\n* `%d` for decimal integer\n* `%x` for hexadecimal integer\n* `%o` for octal integer\n* `%f` for decimal floating point\n\nYou can use usual flags, width and precision syntax.\n\n#### Examples\n\nIf you use:\n\n```\nvariable_string(\"prefix\", \"var\", \"10\");\nvariable_string_from_math_expression(\"prefix\", \"sum\", \"2.0+3.0\", \"%d\");\nvariable_string_from_math_expression(\"prefix\", \"product\", \"3*${prefix.var}\", \"%d\");\n```\n\nThe `prefix.sum` string variable will contain `5` and `prefix.product` will contain `30`."
  supported_targets: []
  class_prefix: variable_string_from_math_expression
  class_parameter: variable_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/variable_string_from_math_expression.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: variable_string_from_math_expression
  method_args:
  - variable_prefix
  - variable_name
  - expression
  - format
  parameters:
    variable_name:
      description: The variable to define, the full name will be variable_prefix.variable_name
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    expression:
      description: The mathematical expression to evaluate
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    format:
      description: The format string to use
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    variable_prefix:
      description: The prefix of the variable name
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: HTTP request sending content with headers
  description: Make an HTTP request with a specific header
  documentation: |-
    Perform a HTTP request on the URL, method and headers provided
    and send the content provided. Will return an error if the request failed.
  supported_targets: []
  class_prefix: http_request_content_headers
  class_parameter: url
  source: /home/amousset/projects/ncf/tree/30_generic_methods/http_request_content_headers.cf
  deprecated: null
  rename_to: null
  action: We don't know when HTTP methods cause side effect, this can be an action or not depending on your server behavior
  method_name: http_request_content_headers
  method_args:
  - method
  - url
  - content
  - headers
  parameters:
    url:
      description: URL to send content to
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    content:
      description: Content to send
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    headers:
      description: Headers to include in the HTTP request
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    method:
      description: Method to call the URL (POST, PUT)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: User create
  description: Create a user
  documentation: This method does not create the user's home directory.
  supported_targets: []
  class_prefix: user_create
  class_parameter: login
  source: /home/amousset/projects/ncf/tree/30_generic_methods/user_create.cf
  deprecated: |-
    Please split into calls to other user_* methods:
    [user_present](#_user_present) [user_fullname](#_user_fullname) [user_home](#_user_home)
    [user_primary_group](#_user_primary_group) [user_shell](#_user_shell) and [user_locked](#_user_locked)
  rename_to: null
  action: null
  method_name: user_create
  method_args:
  - login
  - description
  - home
  - group
  - shell
  - locked
  parameters:
    login:
      description: User login
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    group:
      description: User's primary group
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    locked:
      description: Is the user locked ? true or false
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    description:
      description: User description
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    home:
      description: User's home directory
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    shell:
      description: User's shell
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Permissions user POSIX acl entry present
  description: |-
    Verify that an ace is present on a file or directory for a given user.
    This method will make sure the given ace is present in the POSIX ACL of the target.
  documentation: "The `permissions_*acl_*` manage the POSIX ACL on files and directories.\n\nPlease note that the mask will be automatically recalculated when editing ACLs.\n\n#### Parameters\n\n##### Path\n\nPath can be globbing with the following format:\n\n* `*` matches any filename or directory at one level, e.g. `*.cf` will match all files in one directory that end in .cf but it won't search across directories. `*/*.cf` on the other hand will look two levels deep.\n* `?` matches a single letter\n* `[a-z]` matches any letter from a to z\n* `{x,y,anything}` will match x or y or anything.\n\n##### Recursive\n\nCan be:\n\n* `true` to apply the given aces to folder and sub-folders and files.\n* or `false` to apply to the strict match of `Path`\n\nIf left blank, recursivity will automatically be set to `false`\n\n##### User\n\n`Username` to enforce the ace, being the Linux account name.\nThis method can only handle one username.\n\n##### ACE\n\nThe operator can be:\n* `+` to add the given ACE to the current ones.\n* `-` to remove the given ACE to the current ones.\n* `=` to force the given ACE to the current ones.\n* `empty` if no operator is specified, it will be interpreted as `=`.\n\nACE must respect the classic:\n\n* `^[+-=]?(?=.*[rwx])r?w?x?$`\n\n#### Example\n\nGiven a file with the following getfacl output:\n\n~~~~\nroot@server# getfacl /tmp/myTestFile \ngetfacl: Removing leading '/' from absolute path names\n# file: tmp/myTestFile\n# owner: root\n# group: root\nuser::rwx\nuser:bob:rwx\ngroup::r--\nmask::rwx\nother::---\n\n~~~~\n\nApplying this method with the following parameters:\n\n* `path`: /tmp/myTestFile\n* `recursive`: false\n* `user`: bob\n* `ace`: -rw\n\nWill transform the previous ACLs in:\n\n~~~~\nroot@server# getfacl /tmp/myTestFile \ngetfacl: Removing leading '/' from absolute path names\n# file: tmp/myTestFile\n# owner: root\n# group: root\nuser::rwx\nuser:bob:--x\ngroup::r--\nmask::r-x\nother::---\n\n~~~~"
  supported_targets: []
  class_prefix: permissions_user_acl_present
  class_parameter: path
  source: /home/amousset/projects/ncf/tree/30_generic_methods/permissions_user_acl_present.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: permissions_user_acl_present
  method_args:
  - path
  - recursive
  - user
  - ace
  parameters:
    user:
      description: Username of the Linux account.
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    recursive:
      description: Recursive Should ACLs cleanup be recursive, "true" or "false" (defaults to "false").
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select:
        - ''
        - 'true'
        - 'false'
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    path:
      description: Path of the file or directory.
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    ace:
      description: ACE to enforce for the given user.
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: ^[+-=]?(?=.*[rwx])r?w?x?$
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Group present
  description: Create a group
  documentation: ''
  supported_targets: []
  class_prefix: group_present
  class_parameter: group
  source: /home/amousset/projects/ncf/tree/30_generic_methods/group_present.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: group_present
  method_args:
  - group
  parameters:
    group:
      description: Group name
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File check if socket
  description: Checks if a file exists and is a socket
  documentation: |-
    This bundle will define a condition `file_check_socket_${file_name}_{ok, reached, kept}` if the
    file is a socket, or `file_check_socket_${file_name}_{not_ok, reached, not_kept, failed}` if
    the file is not a socket or does not exist
  supported_targets: []
  class_prefix: file_check_socket
  class_parameter: file_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_check_socket.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: file_check_socket
  method_args:
  - file_name
  parameters:
    file_name:
      description: File name (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Permissions (recursive)
  description: Verify if a file or directory has the right permissions recursively
  documentation: |-
    The method ensures that all files and directories under `path` have
    the correct owner, group owner and permissions.

    This method is in fact a call to the *permissions_type_recursion* method with "all" type and "inf" recursion.
  supported_targets: []
  class_prefix: permissions
  class_parameter: path
  source: /home/amousset/projects/ncf/tree/30_generic_methods/permissions_recursive.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: permissions_recursive
  method_args:
  - path
  - mode
  - owner
  - group
  parameters:
    path:
      description: Path to the file / directory
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    group:
      description: Group to enforce
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    mode:
      description: Mode to enforce
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    owner:
      description: Owner to enforce
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Package state
  description: Enforce the state of a package
  documentation: "These methods manage packages using a package manager on the system.\n\n`package_present` and `package_absent` use a new package implementation, different from `package_install_*`,\n`package_remove_*` and `package_verify_*`. It should be more reliable, and handle upgrades better.\nIt is compatible though, and you can call generic methods from both implementations on the same host.\nThe only drawback is that the agent will have to maintain double caches for package lists, which\nmay cause a little unneeded overhead.\nThese methods will update the corresponding package if updates are available\nNew updates may not be detected even if there are some available,\nthis is due to the update cache that is refresh every 4 hours by default,\nyou can modify this behaviour called `updates_cache_expire` in global parameter\n\n#### Package parameters\n\nThere is only one mandatory parameter, which is the package name to install.\nWhen it should be installed from a local package, you need to specify the full path to the package as name.\n\nThe version parameter allows specifying a version you want installed.\nIt should be the complete versions string as used by the used package manager.\nThis parameter allows two special values:\n\n* *any* which is the default value, and is satisfied by any version of the given package\n* *latest* which will ensure, at each run, that the package is at the latest available version.\n\nThe last parameter is the provider, which is documented in the next section.\n\nYou can use [package_state_options](#_package_state_options) to pass options to the underlying package manager\n(currently only with *apt* package manager).\n\n#### Package providers\n\nThis method supports several package managers. You can specify the package manager\nyou want to use or let the method choose the default for the local system.\n\nThe package providers include a caching system for package information.\nThe package lists (installed, available and available updates) are only updated\nwhen the cache expires, or when an operation is made by the agent on packages.\n\n*Note*: The implementation of package operations is done in scripts called modules,\nwhich you can find in `${sys.workdir}/modules/packages/`.\n\n##### apt\n\nThis package provider uses *apt*/*dpkg* to manage packages on the system.\n*dpkg* will be used for all local actions, and *apt* is only needed to manage update and\ninstallation from a repository.\n\n##### rpm\n\nThis package provider uses *yum*/*rpm* to manage packages on the system. *rpm* will \nbe used for all local actions, and *yum* is only needed to manage update and\ninstallation from a repository.\n\nIt is able to downgrade packages when specifying an older version.\n\n##### zypper\n\nThis package provider uses *zypper*/*rpm* to manage packages on the system.\n*rpm* will be used for all local actions, and *zypper* is only needed to manage update and\ninstallation from a repository.\n\nNote: If the package version you want to install contains an epoch, you have to specify it\nin the version in the `epoch:version` form, like reported by `zypper info`.\n\n##### zypper_pattern\n\nThis package provider uses zypper with the `-t pattern` option to manage zypper patterns or\nmeta-packages on the system.\n\nSince a zypper pattern can be named differently than the rpm package name providing it, please\nalways use the exact pattern name (as listed in the output of `zypper patterns`)\nwhen using this provider.\n\nNote: When installing a pattern from a local rpm file, Rudder assumes that the pattern is built\nfollowing the \n[official zypper documentation](https://doc.opensuse.org/projects/libzypp/HEAD/zypp-pattern-packages.html).\n\nOlder implementations of zypper patterns may not be supported by this module.\n\nThis provider doesn't support installation from a file.\n\n##### slackpkg\n\nThis package provider uses Slackware's `installpkg` and `upgradepkg` tools to manage \npackages on the system\n\n##### pkg\n\nThis package provider uses FreeBSD's *pkg* to manage packages on the system.\nThis provider doesn't support installation from a file.\n\n#### ips\n\nThis package provider uses Solaris's pkg command to manage packages from IPS repositories on the system.\nThis provider doesn't support installation from a file.\n\n#### nimclient\n\nThis package provider uses AIX's nim client to manage packages from nim\nThis provider doesn't support installation from a file.\n\n#### Examples\n\n```\n# To install postgresql in version 9.1 for x86_64 architecture\npackage_present(\"postgresql\", \"9.1\", \"x86_64\", \"\");\n# To ensure postgresql is always in the latest available version\npackage_present(\"postgresql\", \"latest\", \"\", \"\");\n# To ensure installing postgresql in any version\npackage_present(\"postgresql\", \"\", \"\", \"\");\n# To ensure installing postgresql in any version, forcing the yum provider\npackage_present(\"postgresql\", \"\", \"\", \"yum\");\n# To ensure installing postgresql from a local package\npackage_present(\"/tmp/postgresql-9.1-1.x86_64.rpm\", \"\", \"\", \"\");\n# To remove postgresql\npackage_absent(\"postgresql\", \"\", \"\", \"\");\n```\n\nSee also : [package_present](#_package_present), [package_absent](#_package_absent), [package_state_options](#_package_state_options)"
  supported_targets: []
  class_prefix: package_state
  class_parameter: name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/package_state.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: package_state
  method_args:
  - name
  - version
  - architecture
  - provider
  - state
  parameters:
    name:
      description: Name of the package, or path to a local package if state is present
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    provider:
      description: Package provider to use, can be "yum", "apt", "zypper", "zypper_pattern", "slackpkg", "pkg", "ips", "nimclient" or "default" for system default package manager (defaults to "default")
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select:
        - ''
        - default
        - yum
        - apt
        - zypper
        - zypper_pattern
        - slackpkg
        - pkg
        - ips
        - nimclient
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    architecture:
      description: Architecture of the package, can be an architecture name  or "default" (defaults to "default")
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    version:
      description: Version of the package, can be "latest" for latest version or "any" for any version (defaults to "any")
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    state:
      description: State of the package, can be "present" or "absent" (defaults to "present")
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select:
        - ''
        - present
        - absent
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Package verify
  description: Verify if a package is installed in its latest version available
  documentation: ''
  supported_targets: []
  class_prefix: package_install
  class_parameter: package_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/package_verify.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: package_verify
  method_args:
  - package_name
  parameters:
    package_name:
      description: Name of the package to verify
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: User shell
  description: Define the shell of the user. User must already exist.
  documentation: |-
    This method does not create the user.
      entry example: /bin/false
  supported_targets: []
  class_prefix: user_shell
  class_parameter: login
  source: /home/amousset/projects/ncf/tree/30_generic_methods/user_shell.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: user_shell
  method_args:
  - login
  - shell
  parameters:
    shell:
      description: User's shell
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    login:
      description: User's login
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File block present
  description: Ensure that a text block is present in a specific location
  documentation: |-
    Ensure that a text block is present in the target file.
    If the block is not found, it will be added at the end of the file.

    # Examples:

    Given a file with the following content:
    ```
    apple
    pear
    banana
    ```
    Applying the method with the block:
    ```
    pear
    orange
    ```

    Will result in the following content:
    ```
    apple
    pear
    banana
    pear
    orange
    ```
  supported_targets: []
  class_prefix: file_block_present
  class_parameter: file
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_block_present.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: file_block_present
  method_args:
  - file
  - block
  parameters:
    file:
      description: File name to edit (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    block:
      description: Block(s) to add in the file
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Kernel module enabled at boot
  description: Ensure that a given kernel module will be loaded at system boot
  documentation: |-
    Ensure that a given kernel module is enabled at boot on the system.
     This method only works on systemd systems.
     Rudder will look for a line matching the module name in a given section in the file:

     * `/etc/modules-load.d/enabled_by_rudder.conf` on systemd systems

     If the module is already enabled by a different option file than used by Rudder, it will add
     an entry in the file managed by Rudder listed above, and leave intact the already present one.
     The modifications are persistent and made line per line, meaning that
     this Generic Method will never remove lines in the configuration file but only add it if needed.

     Please note that this method will not load the module nor configure it, it will only enable its loading at system boot.
     If you want to force the module to be loaded, use instead the method `kernel_module_loaded`.
     If you want to configure the module, use instead the method `kernel_module_configuration`.
  supported_targets: []
  class_prefix: kernel_module_enabled_at_boot
  class_parameter: module_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/kernel_module_enabled_at_boot.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: kernel_module_enabled_at_boot
  method_args:
  - module_name
  parameters:
    module_name:
      description: Complete name of the kernel module, as seen by lsmod or listed in /proc/modules
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File ensure lines present
  description: Ensure that one or more lines are present in a file
  documentation: ''
  supported_targets: []
  class_prefix: file_ensure_lines_present
  class_parameter: file
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_ensure_lines_present.cf
  deprecated: Use [file_lines_present](#_file_lines_present) instead.
  rename_to: file_lines_present
  action: null
  method_name: file_ensure_lines_present
  method_args:
  - file
  - lines
  parameters:
    file:
      description: File name to edit (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    lines:
      description: Line(s) to add in the file
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Package present
  description: Enforce the presence of a package
  documentation: See [package_state](#_package_state) for documentation.
  supported_targets: []
  class_prefix: package_present
  class_parameter: name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/package_present.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: package_present
  method_args:
  - name
  - version
  - architecture
  - provider
  parameters:
    architecture:
      description: Architecture of the package, can be an architecture name  or "default" (defaults to "default")
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    version:
      description: Version of the package, can be "latest" for latest version or "any" for any version (defaults to "any")
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    provider:
      description: Package provider to use, can be "yum", "apt", "zypper", "zypper_pattern", "slackpkg", "pkg", "ips", "nimclient" or "default" for system default package manager (defaults to "default")
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select:
        - ''
        - default
        - yum
        - apt
        - zypper
        - zypper_pattern
        - slackpkg
        - pkg
        - ips
        - nimclient
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    name:
      description: Name of the package, or path to a local package
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Monitoring template
  description: Add a monitoring template to a node (requires a monitoring plugin)
  documentation: |-
    This method assigns monitoring templates to a Rudder node. The Rudder plugin respective to
    each monitoring platform will apply those templates to the node.
  supported_targets: []
  class_prefix: monitoring_template
  class_parameter: template
  source: /home/amousset/projects/ncf/tree/30_generic_methods/monitoring_template.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: monitoring_template
  method_args:
  - template
  parameters:
    template:
      description: Name of the monitoring template
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Command execution once
  description: Execute a command only once on a node
  documentation: |-
    This method is useful for specific commands that should only be executed once per node.

    If you can spot a condition for the command execution by testing the state of its target,
    it is better to use the `condition_from_command` method to test the state coupled with
    the `command_execution_result` method to run the command if necessary.

    ##### The method will:

    **Define** the `command_execution_once_${command}_kept` condition and do nothing if
    a `command_execution_once` has already been executed on this machine with the same
    **Unique id**.

    **Execute** the command if it is the first occurrence and:
    * If the parameter **Until** is `*any*`, it will consider the command as executed on the machine and define
      either:
      * `command_execution_once_${command}_repaired` if the return code is in **ok_codes**,
      * `command_execution_once_${command}_error` otherwise.
    * If the parameter **Until** is *ok* and:
      * If the return code is in the **Ok codes** list, define the
        `command_execution_once_${command}_repaired` condition
      * If the return code is not in **Ok codes** it define the
         `command_execution_once_${command}_error` condition and **retry at next agent run**.

    If an exit code is not in the list it will lead to an error status.
    If you want "0" to be a success you have to list it in the **Ok codes** list

    ##### Example:

    If you use:

    ```
        command_execution_once("command -a -t", "0", "ok", "my_program_setup")
    ```

    It will retry to run `command -a -t` until it returns "0". Then it will
    not execute it again.
  supported_targets: []
  class_prefix: command_execution_once
  class_parameter: command
  source: /home/amousset/projects/ncf/tree/30_generic_methods/command_execution_once.cf
  deprecated: null
  rename_to: null
  action: ''
  method_name: command_execution_once
  method_args:
  - command
  - ok_codes
  - until
  - unique_id
  parameters:
    command:
      description: Command to run
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    ok_codes:
      description: 'List of codes that produce a repaired status separated with commas (ex: 1,2,5). Defaults to 0.'
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    until:
      description: 'Try to execute the command until a particular state: ''ok'', ''any'' (defaults to ''any'')'
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select:
        - ''
        - any
        - ok
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    unique_id:
      description: To identify the action without losing track if the command changes. Defaults to the command if you don't need it.
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File lines absent
  description: Ensure that a line is absent in a specific location
  documentation: ''
  supported_targets: []
  class_prefix: file_lines_absent
  class_parameter: file
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_lines_absent.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: file_lines_absent
  method_args:
  - file
  - lines
  parameters:
    file:
      description: File name to edit (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    lines:
      description: Line(s) to remove in the file
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File Augeas set
  description: Use augeas commands and options to set a node label's value.
  documentation: |-
    Augeas is a tool that provides an abstraction layer for all the complexities that turn around editing files with regular expressions.
    It's a tree based hierarchy tool, that handles system configuration files where you can securely modify your files and to do so you have to provide
    the path to the node label's value.

    Augeas uses lenses which are like sort of modules that are in charge of identifying and converting files into tree and back.

    This method uses `augtool` to force the value of an augeas node's label.

    Actually there are two ways to use this method:

    * Either by providing the augeas **path** to the node's label and let **lens** and **file** empty.
    ** this way augeas will load the common files and lens automatically
    * Or by using a given **file** path and a specific **lens**.
    ** better performances since only one lens is loaded
    ** support custom lens, custom paths (for instance to apply the Hosts lens to another file than `/etc/hosts`)
    * Either by simply providing an augeas **path** to the node's label

    *Warning*: When you don't specify the file and lens to use, no backup of the file will be made before
    editing it.

    #### Two uses cases examples:

    In the first case, let's suppose that you want to set the value of the ip address of the first line in the `/etc/hosts` file to `192.168.1.5`,
    to do so you need to provide the augeas **path** and **value** parameters.

    ```
    file_augeas_set("/etc/hosts/1/ipaddr", "192.168.1.5", "", "");
    ```

    The second case is more efficient, and forces the `Hosts` lens to parse the `/etc/hosts` file and set the value for the given **path** node:

    ```
    file_augeas_set("/etc/hosts/1/ipaddr", "192.168.1.5", "Hosts", "/etc/hosts");
    ```
  supported_targets: []
  class_prefix: file_augeas_set
  class_parameter: path
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_augeas_set.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: file_augeas_set
  method_args:
  - path
  - value
  - lens
  - file
  parameters:
    path:
      description: The path to the file and node label
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    lens:
      description: Load a specific lens (optional)
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    value:
      description: The value to set
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    file:
      description: Load a specific file (optional)
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File from a mustache string
  description: Build a file from a mustache string
  documentation: |-
    Build a file from a mustache string.
    Complete mustache documentation is available in the *file\_from\_template\_mustache* method documentation.


    This bundle will define a condition file_from_string_mustache_${destination}_{kept,repaired,not_ok,ok,reached}
  supported_targets: []
  class_prefix: file_from_string_mustache
  class_parameter: destination
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_from_string_mustache.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: file_from_string_mustache
  method_args:
  - template
  - destination
  parameters:
    destination:
      description: Destination file (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    template:
      description: String containing a template to be expanded
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Condition from command
  description: Execute a command and create result conditions depending on its exit code
  documentation: |-
    This method executes a command, and defines a `${condition_prefix}_true` or a
     `${condition_prefix}_false` condition depending on the result of the command:

    * If the exit code **is in the "True codes"** list, this will produce a
       kept outcome and a
       `${condition_prefix}_true` condition,
    * If the exit code **is in the "False codes"** list, this will produce a
       kept outcome and a
       `${condition_prefix}_false` condition,
    * If the exit code **is not in "True codes" nor in "False codes"**, or if
       the command can not be found, it will produce an
       error outcome and
       and no condition from `${condition_prefix}`


    The created condition is global to the agent.

    ##### Example:

    If you run a command `/bin/check_network_status` that output code 0, 1 or 2 in
    case of correct configuration, and 18 or 52 in case of invalid configuration,
    and you want to define a condition based on its execution result,
    you can use:

    ```
    condition_from_command("network_correctly_defined", "/bin/check_network_status", "0,1,2", "18,52")
    ```

    * If the command exits with 0, 1 or 2, then it will define the conditions
        * `network_correctly_defined_true`,
        * `condition_from_command_network_correctly_defined_kept`,
        * `condition_from_command_network_correctly_defined_reached`,

    * If the command exits 18, 52, then it will define the conditions
        * `network_correctly_defined_false`,
        * `condition_from_command_network_correctly_defined_kept`,
        * `condition_from_command_network_correctly_defined_reached`

    * If the command exits any other code or is not found, then it will define the conditions
        * `condition_from_command_network_correctly_defined_error`,
        * `condition_from_command_network_correctly_defined_reached`

    ##### Notes:

    * In audit mode, this method will still execute the command passed in parameter.
      Which means that you should only pass non system-impacting commands to this method.

    * Rudder will automatically "canonify" the given **Condition prefix** at execution time,
      which means that all non `[a-zA-Z0-9_]` characters will be replaced by an underscore.
  supported_targets: []
  class_prefix: condition_from_command
  class_parameter: condition_prefix
  source: /home/amousset/projects/ncf/tree/30_generic_methods/condition_from_command.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: condition_from_command
  method_args:
  - condition_prefix
  - command
  - true_codes
  - false_codes
  parameters:
    false_codes:
      description: 'List of codes that produce a false status separated with commas (ex: 3,4,6)'
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    true_codes:
      description: 'List of codes that produce a true status separated with commas (ex: 1,2,5)'
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    command:
      description: The command to run
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    condition_prefix:
      description: The condition name
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Service ensure running with service path
  description: Ensure that a service is running using the appropriate method, specifying the path of the service in the ps output, or using Windows task manager
  documentation: ''
  supported_targets: []
  class_prefix: service_ensure_running
  class_parameter: service_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/service_ensure_running_path.cf
  deprecated: Use [service_started_path](#_service_started_path) instead.
  rename_to: service_started_path
  action: null
  method_name: service_ensure_running_path
  method_args:
  - service_name
  - service_path
  parameters:
    service_name:
      description: Service name (as recognized by systemd, init.d, Windows, etc...)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    service_path:
      description: Service with its path, as in the output from 'ps'
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Permissions user POSIX acl entry absent
  description: |-
    Verify that an ace is absent on a file or directory for a given user.
    This method will make sure that no ace is present in the POSIX ACL of the target.
  documentation: "The `permissions_*acl_*` manage the POSIX ACL on files and directories.\n\nPlease note that the mask will be automatically recalculated when editing ACLs.\n\n#### Parameters\n\n##### Path\n\nPath can be a regex with the following format:\n\n* `*` matches any filename or directory at one level, e.g. `*.cf` will match all files in one directory that end in .cf but it won't search across directories. `*/*.cf` on the other hand will look two levels deep.\n* `?` matches a single letter\n* `[a-z]` matches any letter from a to z\n* `{x,y,anything}` will match x or y or anything.\n\n##### Recursive\n\nCan be:\n\n* `true` to apply the given aces to folder and sub-folders and files.\n* or `false` to apply to the strict match of `Path`\n\nIf left blank, recursivity will automatically be set to `false`\n\n##### User\n\n`Username` to enforce the ace absence, being the Linux account name.\nThis method can only handle one username.\n\n#### Example\n\nGiven a file with the following getfacl output:\n\n~~~~\nroot@server# getfacl /tmp/myTestFile \ngetfacl: Removing leading '/' from absolute path names\n# file: tmp/myTestFile\n# owner: root\n# group: root\nuser::rwx\nuser:bob:rwx\ngroup::r--\nmask::rwx\nother::---\n\n~~~~\n\nApplying this method with the following parameters:\n\n* `path`: /tmp/myTestFile\n* `recursive`: false\n* `user`: bob\n\nWill transform the previous ACLs in:\n\n~~~~\nroot@server# getfacl /tmp/myTestFile \ngetfacl: Removing leading '/' from absolute path names\n# file: tmp/myTestFile\n# owner: root\n# group: root\nuser::rwx\ngroup::r--\nmask::r--\nother::---\n\n~~~~"
  supported_targets: []
  class_prefix: permissions_user_acl_absent
  class_parameter: path
  source: /home/amousset/projects/ncf/tree/30_generic_methods/permissions_user_acl_absent.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: permissions_user_acl_absent
  method_args:
  - path
  - recursive
  - user
  parameters:
    recursive:
      description: Recursive Should ACLs cleanup be recursive, "true" or "false" (defaults to "false")
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select:
        - ''
        - 'true'
        - 'false'
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    path:
      description: Path of the file or directory
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    user:
      description: Username of the Linux account.
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File download
  description: Download a file if it does not exist, using curl with a fallback on wget
  documentation: |-
    This method finds a HTTP command-line tool and downloads the given source
    into the destination.

    It tries `curl` first, and `wget` as fallback.
  supported_targets: []
  class_prefix: file_download
  class_parameter: destination
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_download.cf
  deprecated: Use [file_from_http_server](#_file_from_http_server) instead.
  rename_to: file_from_http_server
  action: null
  method_name: file_download
  method_args:
  - source
  - destination
  parameters:
    destination:
      description: File destination (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    source:
      description: URL to download from
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File copy from remote source
  description: Ensure that a file or directory is copied from a policy server
  documentation: |-
    *Note*: This method uses the native agent copy protocol, and can only download files from
    the policy server. To download a file from an external source, you can use
    HTTP with the [file_download](#_file_download) method.

    This method requires that the policy server is configured to accept
    copy of the source file from the agents it will be applied to.

    You can download a file from the shared files with:

    ```
    /var/rudder/configuration-repository/shared-files/PATH_TO_YOUR_FILE
    ```
  supported_targets: []
  class_prefix: file_copy_from_remote_source
  class_parameter: destination
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_copy_from_remote_source.cf
  deprecated: Use [file_from_remote_source](#_file_from_remote_source) instead.
  rename_to: file_from_remote_source
  action: null
  method_name: file_copy_from_remote_source
  method_args:
  - source
  - destination
  parameters:
    source:
      description: Source file (absolute path on the policy server)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    destination:
      description: Destination file (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File check is FIFO/Pipe
  description: Checks if a file exists and is a FIFO/Pipe
  documentation: |-
    This bundle will define a condition `file_check_FIFO_pipe_${file_name}_{ok, reached, kept}` if the
    file is a FIFO, or `file_check_FIFO_pipe_${file_name}_{not_ok, reached, not_kept, failed}` if
    the file is not a fifo or does not exist
  supported_targets: []
  class_prefix: file_check_FIFO_pipe
  class_parameter: file_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_check_FIFO_pipe.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: file_check_FIFO_pipe
  method_args:
  - file_name
  parameters:
    file_name:
      description: File name (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File from a mustache template
  description: Build a file from a mustache template
  documentation: |-
    See [file_from_template_type](#_file_from_template_type) for general documentation about
    templates usage.

    #### Syntax

    Mustache is a logic-less templating language, available in a lot of languages, and
    used for file templating in Rudder.
    The mustache syntax reference is [https://mustache.github.io/mustache.5.html](https://mustache.github.io/mustache.5.html).
    The Windows implementation follows the standard, the Unix one is a bit richer as describe below.

    We will here describe the way to get agent data into a template. Ass explained in the general templating
    documentation, we can access various data in a mustache template.

    The main specificity compared to standard mustache syntax of prefixes in all expanded values:

    * `classes` to access conditions
    * `vars` to access all variables

    ##### Classes

    Here is how to display content depending on conditions definition:

    ```mustache
    {{#classes.my_condition}}
       content when my_condition is defined
    {{/classes.my_condition}}

    {{^classes.my_condition}}
       content when my_condition is *not* defined
    {{/classes.my_condition}}
    ```

    Note: You cannot use condition expressions here.

    ##### Scalar variable

    Here is how to display a scalar variable value (integer, string, ...),
    if you have defined `variable_string("variable_prefix", "my_variable", "my_value")`:

    ```
    {{{vars.variable_prefix.my_variable}}}
    ```

    We use the triple `{{{ }}}` to avoid escaping html entities.

    ##### Iteration

    Iteration is done using a syntax similar to scalar variables, but applied
    on container variables.

    * Use `{{#vars.container}} content {{/vars.container}}` to iterate
    * Use `{{{.}}}` for the current element value in iteration
    * Use `{{{key}}}` for the `key` value in current element
    * Use `{{{.key}}}` for the `key` value in current element (Linux only)
    * Use `{{{@}}}` for the current element key in iteration (Linux only)

    To iterate over a list, for example defined with:

    ```
    variable_iterator("variable_prefix", "iterator_name", "a,b,c", ",")
    ```

    Use the following file:

    ```mustache
    {{#vars.variable_prefix.iterator_name}}
    {{{.}}} is the current iterator_name value
    {{/vars.variable_prefix.iterator_name}}
    ```

    Which will be expanded as:

    ```
    a is the current iterator_name value
    b is the current iterator_name value
    c is the current iterator_name value
    ```

    To iterate over a container defined by the following json file, loaded with
    `variable_dict_from_file("variable_prefix", "dict_name", "path")`:

    ```json
    {
       "hosts": [
           "host1",
           "host2"
       ],
       "files": [
           {"name": "file1", "path": "/path1", "users": [ "user1", "user11" ] },
           {"name": "file2", "path": "/path2", "users": [ "user2" ] }
       ],
       "properties": {
           "prop1": "value1",
           "prop2": "value2"
       }
    }
    ```

    Use the following template:

    ```mustache
    {{#vars.variable_prefix.dict_name.hosts}}
    {{{.}}} is the current hosts value
    {{/vars.variable_prefix.dict_name.hosts}}

    # will display the name and path of the current file
    {{#vars.variable_prefix.dict_name.files}}
    {{{name}}}: {{{path}}}
    {{/vars.variable_prefix.dict_name.files}}
    # Lines below will only be properly rendered in unix Nodes
    # will display the users list of each file
    {{#vars.variable_prefix.dict_name.files}}
    {{{name}}}:{{#users}} {{{.}}}{{/users}}
    {{/vars.variable_prefix.dict_name.files}}


    # will display the current properties key/value pair
    {{#vars.variable_prefix.dict_name.properties}}
    {{{@}}} -> {{{.}}}
    {{/vars.variable_prefix.dict_name.properties}}

    ```

    Which will be expanded as:

    ```
    host1 is the current hosts value
    host2 is the current hosts value

    # will display the name and path of the current file
    file1: /path1
    file2: /path2

    # Lines below will only be properly rendered in unix Nodes
    # will display the users list of each file
    file1: user1 user11
    file2: user2

    # will display the current properties key/value pair
    prop1 -> value1
    prop2 -> value2
    ```

    Note: You can use `{{#-top-}} ... {{/-top-}}`
    to iterate over the top level container.

    ##### System variables

    Some `sys` dict variables (like `sys.ipv4`) are also accessible as string, for example:

    * `${sys.ipv4}` gives `54.32.12.4`
    * `$[sys.ipv4[ethO]}` gives `54.32.12.4`
    * `$[sys.ipv4[eth1]}` gives `10.45.3.2`

    These variables are not accessible as dict in the templating data, but are represented as
    string:

    * `ipv4` is a string variable in the `sys` dict with value `54.32.12.4`
    * `ipv4[ethO]` is a string variable in the `sys` dict with value `54.32.12.4`
    * `ipv4` is not accessible as a dict in the template

    To access these value, use the following syntax in your mustache templates:

    ```
    {{{vars.sys.ipv4[eth0]}}}
    ```
  supported_targets: []
  class_prefix: file_from_template
  class_parameter: destination
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_from_template_mustache.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: file_from_template_mustache
  method_args:
  - source_template
  - destination
  parameters:
    destination:
      description: Destination file (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    source_template:
      description: Source file containing a template to be expanded (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File create
  description: Create a file if it doesn't exist
  documentation: ''
  supported_targets: []
  class_prefix: file_create
  class_parameter: target
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_create.cf
  deprecated: Use [file_present](#_file_present) instead.
  rename_to: file_present
  action: null
  method_name: file_create
  method_args:
  - target
  parameters:
    target:
      description: File to create (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Variable dict from file type
  description: Define a variable that contains key,value pairs (a dictionary) from a JSON, CSV or YAML file
  documentation: "To use the generated variable, you must use the form `${variable_prefix.variable_name[key]}` with each name replaced with the parameters of this method.\n\nBe careful that using a global variable can lead to unpredictable content in case of multiple definition, which is implicitly the case when a technique has more than one instance (directive). \n\nThis method will load data from various file formats (yaml, json, csv). \n\n#### CSV parsing\n\nThe input file must use CRLF as line delimiter\nto be readable (as stated in RFC 4180).\n\n#### Examples\n\n```\n# To read a json file with format auto detection \nvariable_dict_from_file_type(\"prefix\", \"var\", \"/tmp/file.json\", \"\");\n# To force yaml reading on a non file without yaml extension\nvariable_dict_from_file_type(\"prefix\", \"var\", \"/tmp/file\", \"YAML\");\n```\n\nIf `/tmp/file.json` contains:\n\n```json\n{\n  \"key1\": \"value1\"\n}\n```\n\nYou will be able to access the `value1` value with `${prefix.var[key1]}`."
  supported_targets: []
  class_prefix: variable_dict_from_file_type
  class_parameter: variable_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/variable_dict_from_file_type.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: variable_dict_from_file_type
  method_args:
  - variable_prefix
  - variable_name
  - file_name
  - file_type
  parameters:
    file_name:
      description: The file name to load data from
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    variable_prefix:
      description: The prefix of the variable name
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    file_type:
      description: The file type, can be "JSON", "CSV", "YAML" or "auto" for auto detection based on file extension, with a fallback to JSON (default is "auto")
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select:
        - ''
        - auto
        - JSON
        - YAML
        - CSV
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    variable_name:
      description: The variable to define, the full name will be variable_prefix.variable_name
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File check if character device
  description: Checks if a file exists and is a character device
  documentation: |-
    This bundle will define a condition `file_check_character_device_${file_name}_{ok, reached, kept}` if the
    file is a character device, or `file_check_character_device_${file_name}_{not_ok, reached, not_kept, failed}` if
    the file is not a character device or does not exist
  supported_targets: []
  class_prefix: file_check_character_device
  class_parameter: file_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_check_character_device.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: file_check_character_device
  method_args:
  - file_name
  parameters:
    file_name:
      description: File name (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File block in section
  description: Ensure that a section contains exactly a text block
  documentation: |-
    Ensure that a section contains exactly a text block.
    A section is delimited by a header and a footer.
    * If the section exists, its content will be replaced if needed
    * Otherwise it will be created at the end of the file
  supported_targets: []
  class_prefix: file_block_present_in_section
  class_parameter: file
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_block_present_in_section.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: file_block_present_in_section
  method_args:
  - file
  - section_start
  - section_end
  - block
  parameters:
    block:
      description: Block representing the content of the section
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    section_end:
      description: End of the section
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    file:
      description: File name to edit (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    section_start:
      description: Start of the section
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Symlink present (optional overwriting)
  description: Create a symlink at a destination path and pointing to a source target. This is also possible to enforce its creation
  documentation: ''
  supported_targets: []
  class_prefix: file_symlink_present
  class_parameter: destination
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_symlink_present_option.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: file_symlink_present_option
  method_args:
  - source
  - destination
  - enforce
  parameters:
    destination:
      description: Destination file (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    source:
      description: Source file (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    enforce:
      description: Force symlink if file already exist (true or false)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File from local source recursion
  description: Ensure that a file or directory is copied from a local source
  documentation: |-
    Ensure that a file or directory is copied from a local source.
    If the source is a directory, you can force a maximum level of copy recursion.

    * *0* being no recursion, which will only create an empty folder
    * *inf* being a complete recursive copy of the folder
    * *1,2,3,...* will force the maximal level of recursion to copy
  supported_targets: []
  class_prefix: file_from_local_source
  class_parameter: destination
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_from_local_source_recursion.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: file_from_local_source_recursion
  method_args:
  - source
  - destination
  - recursion
  parameters:
    source:
      description: Source file (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    destination:
      description: Destination file (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    recursion:
      description: Recursion depth to enforce for this path (0, 1, 2, ..., inf)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: HTTP request check status with headers
  description: Checks status of an HTTP URL
  documentation: Perform a HTTP request on the URL, method and headers provided and check that the response has the expected status code (ie 200, 404, 503, etc)
  supported_targets: []
  class_prefix: http_request_check_status_headers
  class_parameter: url
  source: /home/amousset/projects/ncf/tree/30_generic_methods/http_request_check_status_headers.cf
  deprecated: null
  rename_to: null
  action: We don't know when HTTP methods cause side effect, this can be an action or not depending on your server behaviour
  method_name: http_request_check_status_headers
  method_args:
  - method
  - url
  - expected_status
  - headers
  parameters:
    url:
      description: URL to query
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    expected_status:
      description: Expected status code of the HTTP response
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    method:
      description: Method to call the URL (GET, POST, PUT, DELETE)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    headers:
      description: Headers to include in the HTTP request (as a string, without ')
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: User fullname
  description: Define the fullname of the user, user must already exists.
  documentation: This method does not create the user.
  supported_targets: []
  class_prefix: user_fullname
  class_parameter: login
  source: /home/amousset/projects/ncf/tree/30_generic_methods/user_fullname.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: user_fullname
  method_args:
  - login
  - fullname
  parameters:
    login:
      description: User's login
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    fullname:
      description: User's fullname
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File copy from Rudder shared folder
  description: Ensure that a file or directory is copied from the Rudder shared folder.
  documentation: |-
    Ensure that a file or directory is copied from the Rudder shared folder.
    The Rudder shared folder is located on the Rudder server under `/var/rudder/configuration-repository/shared-files`.
    Every file/folder in the shared folder will be available for every managed node.
    This method will download and update the destination file from a source taken from this shared folder.
    A file in the shared folder will be updated on the node side at agent run.


    # keep md5 and sha1 to support old generic methods, also add a default so you don't have to enter a value on linux, md5/sha1 should go to default
  supported_targets: []
  class_prefix: file_from_shared_folder
  class_parameter: destination
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_from_shared_folder.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: file_from_shared_folder
  method_args:
  - source
  - destination
  - hash_type
  parameters:
    source:
      description: Source file (path, relative to /var/rudder/configuration-repository/shared-files)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    destination:
      description: Destination file (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    hash_type:
      description: Hash algorithm used to check if file is updated (sha256, sha512). Only used on Windows, ignored on Unix. default is sha256
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select:
        - ''
        - sha256
        - sha512
        - md5
        - sha1
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File copy from local source recurse
  description: Ensure that a file or directory is copied from a local source
  documentation: ''
  supported_targets: []
  class_prefix: file_copy_from_local_source
  class_parameter: destination
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_copy_from_local_source_recursion.cf
  deprecated: Use [file_from_local_source_recursion](#_file_from_local_source_recursion) instead.
  rename_to: file_from_local_source_recursion
  action: null
  method_name: file_copy_from_local_source_recursion
  method_args:
  - source
  - destination
  - recursion
  parameters:
    source:
      description: Source file (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    destination:
      description: Destination file (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    recursion:
      description: Recursion depth to enforce for this path (0, 1, 2, ..., inf)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File check is hardlink
  description: Checks if two files are the same (hard links)
  documentation: |-
    This bundle will define a condition `file_check_hardlink_${file_name_1}_{ok, reached, kept}` if the
    two files `${file_name_1}` and `${file_name_2}` are hard links of each other, or `file_check_hardlink_${file_name_1}_{not_ok, reached, not_kept, failed}` if
    if the files are not hard links.
  supported_targets: []
  class_prefix: file_check_hardlink
  class_parameter: file_name_1
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_check_hardlink.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: file_check_hardlink
  method_args:
  - file_name_1
  - file_name_2
  parameters:
    file_name_2:
      description: 'File name #2 (absolute path on the target node)'
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    file_name_1:
      description: 'File name #1 (absolute path on the target node)'
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: User present
  description: Ensure a user exists on the system.
  documentation: |-
    This method does not create the user's home directory.
     Primary group will be created and set with default one, following the useradd default behavior.
     As in most UNIX system default behavior user creation will fail if a group with
     the user name already exists.
  supported_targets: []
  class_prefix: user_present
  class_parameter: login
  source: /home/amousset/projects/ncf/tree/30_generic_methods/user_present.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: user_present
  method_args:
  - login
  parameters:
    login:
      description: User login
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File enforce content
  description: Enforce the content of a file
  documentation: ''
  supported_targets: []
  class_prefix: file_ensure_lines_present
  class_parameter: file
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_enforce_content.cf
  deprecated: Use [file_content](#_file_content) instead.
  rename_to: file_content
  action: null
  method_name: file_enforce_content
  method_args:
  - file
  - lines
  - enforce
  parameters:
    lines:
      description: Line(s) to add in the file - if lines is a list, please use @{lines} to pass the iterator rather than iterating over each values
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    enforce:
      description: Enforce the file to contain only line(s) defined (true or false)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    file:
      description: File name to edit (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File copy from remote source recurse
  description: Ensure that a file or directory is copied from a policy server
  documentation: |-
    This method requires that the policy server is configured to accept
    copy of the source file or directory from the agents it will be applied to.

    You can download a file from the shared files with:

    ```
    /var/rudder/configuration-repository/shared-files/PATH_TO_YOUR_DIRECTORY_OR_FILE
    ```
  supported_targets: []
  class_prefix: file_copy_from_remote_source
  class_parameter: destination
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_copy_from_remote_source_recursion.cf
  deprecated: Use [file_from_remote_source_recursion](#_file_from_remote_source_recursion) instead.
  rename_to: file_from_remote_source_recursion
  action: null
  method_name: file_copy_from_remote_source_recursion
  method_args:
  - source
  - destination
  - recursion
  parameters:
    recursion:
      description: Recursion depth to enforce for this path (0, 1, 2, ..., inf)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    source:
      description: Source file (absolute path on the policy server)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    destination:
      description: Destination file (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File copy from local source
  description: Ensure that a file or directory is copied from a local source
  documentation: ''
  supported_targets: []
  class_prefix: file_copy_from_local_source
  class_parameter: destination
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_copy_from_local_source.cf
  deprecated: Use [file_from_local_source](#_file_from_local_source) instead.
  rename_to: file_from_local_source
  action: null
  method_name: file_copy_from_local_source
  method_args:
  - source
  - destination
  parameters:
    source:
      description: Source file (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    destination:
      description: Destination file (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Package install
  description: Install or update a package in its latest version available
  documentation: ''
  supported_targets: []
  class_prefix: package_install
  class_parameter: package_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/package_install.cf
  deprecated: Use [package_present](#_package_present) instead.
  rename_to: null
  action: null
  method_name: package_install
  method_args:
  - package_name
  parameters:
    package_name:
      description: Name of the package to install
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File template expand
  description: This is a bundle to expand a template in a specific location
  documentation: ''
  supported_targets: []
  class_prefix: file_template_expand
  class_parameter: target_file
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_template_expand.cf
  deprecated: |-
    This method uses CFEngine's templating which is deprecated and not portable across agents.
    Please use [file_from_template_mustache](#_file_from_template_mustache) or [file_from_template_jinja2](#_file_from_template_jinja2) instead.
  rename_to: null
  action: null
  method_name: file_template_expand
  method_args:
  - tml_file
  - target_file
  - mode
  - owner
  - group
  parameters:
    target_file:
      description: File name (with full path) where to expand the template
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    tml_file:
      description: File name (with full path within the framework) of the template file
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    mode:
      description: Mode of destination file
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    owner:
      description: Owner of destination file
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    group:
      description: Group of destination file
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File ensure key-value in INI section
  description: Ensure that a key-value pair is present in a section in a specific location. The objective of this method is to handle INI-style files.
  documentation: ''
  supported_targets: []
  class_prefix: file_ensure_key_value_present_in_ini_section
  class_parameter: file
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_ensure_key_value_present_in_ini_section.cf
  deprecated: Use [file_key_value_present_in_ini_section](#_file_key_value_present_in_ini_section) instead.
  rename_to: file_key_value_present_in_ini_section
  action: null
  method_name: file_ensure_key_value_present_in_ini_section
  method_args:
  - file
  - section
  - name
  - value
  parameters:
    section:
      description: Name of the INI-style section under which the line should be added or modified (not including the [] brackets)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    file:
      description: File name to edit (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    value:
      description: Value of the key to add or edit
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    name:
      description: Name of the key to add or edit
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Package remove
  description: Remove a package
  documentation: |-
    *Example*:
    ```
    methods:
        "any" usebundle => package_remove("htop");
    ```
  supported_targets: []
  class_prefix: package_remove
  class_parameter: package_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/package_remove.cf
  deprecated: Use [package_absent](#_package_absent) instead.
  rename_to: null
  action: null
  method_name: package_remove
  method_args:
  - package_name
  parameters:
    package_name:
      description: Name of the package to remove
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File from remote source recursion
  description: Ensure that a file or directory is copied from a policy server
  documentation: |-
    This method requires that the policy server is configured to accept
    copy of the source file or directory from the agents it will be applied to.

    You can download a file from the shared files with:
    ```
    /var/rudder/configuration-repository/shared-files/PATH_TO_YOUR_DIRECTORY_OR_FILE
    ```
  supported_targets: []
  class_prefix: file_from_remote_source
  class_parameter: destination
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_from_remote_source_recursion.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: file_from_remote_source_recursion
  method_args:
  - source
  - destination
  - recursion
  parameters:
    destination:
      description: Destination file (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    source:
      description: Source file (absolute path on the policy server)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    recursion:
      description: Recursion depth to enforce for this path (0, 1, 2, ..., inf)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File key-value present with option
  description: Ensure that the file contains a pair of "key separator value", with options on the spacing around the separator
  documentation: |-
    Edit (or create) the file, and ensure it contains an entry key -> value with arbitrary separator between the key and its value.
    If the key is already present, the method will change the value associated with this key.
  supported_targets: []
  class_prefix: file_key_value_present
  class_parameter: file
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_key_value_present_option.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: file_key_value_present_option
  method_args:
  - file
  - key
  - value
  - separator
  - option
  parameters:
    file:
      description: File name to edit (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    option:
      description: 'Option for the spacing around the separator: strict, which prevent spacing (space or tabs) around separators, or lax which accepts any number of spaces around separators'
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select:
        - strict
        - lax
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    value:
      description: Value to define
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    key:
      description: Key to define
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    separator:
      description: Separator between key and value, for example "=" or " " (without the quotes)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: true
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File ensure block present
  description: Ensure that a text block is present in a specific location
  documentation: ''
  supported_targets: []
  class_prefix: file_ensure_block_present
  class_parameter: file
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_ensure_block_present.cf
  deprecated: Use [file_block_present](#_file_block_present) instead.
  rename_to: file_block_present
  action: null
  method_name: file_ensure_block_present
  method_args:
  - file
  - block
  parameters:
    file:
      description: File name to edit (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    block:
      description: Block(s) to add in the file
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Variable string escaped
  description: Define a variable from another string variable and escape regular expression characters in it.
  documentation: |-
    To use the generated variable, you must use the form `${<variable_name>_escaped}` where <variable_name> is the composed complete name
    of the variable you want to escape.

    Please note that the variable you want to escape must be defined before this method evaluation.

    #### Example:

    With a variable defined by the generic method `variable_string`, named `my_prefix.my_variable` and valued to:

    ````
     something like [] that
    ````

    Passing `my_prefix.my_variable` as `variable_name` parameter to this method will result in a
    variable named `my_prefix.my_variable_escaped` and valued to:

    ````
    something\ like\ \[\]\ that
    ````
  supported_targets: []
  class_prefix: variable_string_escaped
  class_parameter: variable_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/variable_string_escaped.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: variable_string_escaped
  method_args:
  - variable_name
  parameters:
    variable_name:
      description: The variable to define, the full name will be variable_prefix.variable_name
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File from template
  description: Build a file from a legacy CFEngine template
  documentation: |-
    See [file_from_template_type](#_file_from_template_type) for general documentation about
    templates usage.
  supported_targets: []
  class_prefix: file_from_template
  class_parameter: destination
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_from_template.cf
  deprecated: |-
    This method uses CFEngine's templating which is deprecated and not portable across agents.
    Please use [file_from_template_mustache](#_file_from_template_mustache) or [file_from_template_jinja2](#_file_from_template_jinja2) instead.
  rename_to: null
  action: null
  method_name: file_from_template
  method_args:
  - source_template
  - destination
  parameters:
    source_template:
      description: Source file containing a template to be expanded (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    destination:
      description: Destination file (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File present
  description: Create a file if it doesn't exist
  documentation: ''
  supported_targets: []
  class_prefix: file_present
  class_parameter: target
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_present.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: file_present
  method_args:
  - target
  parameters:
    target:
      description: File to create (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Service ensure stopped
  description: Ensure that a service is stopped using the appropriate method
  documentation: ''
  supported_targets: []
  class_prefix: service_ensure_stopped
  class_parameter: service_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/service_ensure_stopped.cf
  deprecated: Use [service_stopped](#_service_stopped) instead.
  rename_to: service_stopped
  action: null
  method_name: service_ensure_stopped
  method_args:
  - service_name
  parameters:
    service_name:
      description: Service
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Permissions dirs
  description: Verify if a directory has the right permissions non recursively
  documentation: ''
  supported_targets: []
  class_prefix: permissions
  class_parameter: path
  source: /home/amousset/projects/ncf/tree/30_generic_methods/permissions_dirs.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: permissions_dirs
  method_args:
  - path
  - mode
  - owner
  - group
  parameters:
    path:
      description: Path of the directory
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    group:
      description: Group to enforce
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    owner:
      description: Owner to enforce
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    mode:
      description: Mode to enforce
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Variable dict merge
  description: Define a variable resulting of the merge of two other variables
  documentation: |-
    To use the generated variable, you must use the form `${variable_prefix.variable_name[key]}` with each name replaced with the parameters of this method.

    The resulting variable will be the merge of the two parameters, which means it is built by:

    * Taking the content of the first variable
    * Adding the content of the second variable, and replacing the keys that were already there

    It is only a one-level merge, and the value of the first-level key will be completely replaced by the merge.

    This method will fail if one of the variables is not defined. See [variable_dict_merge_tolerant](#_variable_dict_merge_tolerant)
    if you want to allow one of the variables not to be defined.

    ### Usage

    If you have a `prefix.variable1` variable defined by:

    ```json
    { "key1": "value1", "key2": "value2", "key3": { "keyx": "valuex" } }
    ```

    And a `prefix.variable2` variable defined by:

    ```json
    { "key1": "different", "key3": "value3", "key4": "value4" }
    ```

    And that you use:

    ```
    variablr_dict_merge("prefix", "variable3, "prefix.variable1", "prefix.variable2")
    ```

    You will get a `prefix.variable3` variable containing:

    ```json
    {
      "key1": "different",
      "key2": "value2",
      "key3": "value3",
      "key4": "value4"
    }
    ```
  supported_targets: []
  class_prefix: variable_dict_merge
  class_parameter: variable_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/variable_dict_merge.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: variable_dict_merge
  method_args:
  - variable_prefix
  - variable_name
  - first_variable
  - second_variable
  parameters:
    variable_name:
      description: The variable to define, the full name will be variable_prefix.variable_name
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    second_variable:
      description: The second variable, which content will override the first in the resulting variable if necessary (written in the form variable_prefix.variable_name)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    first_variable:
      description: The first variable, which content will be overridden in the resulting variable if necessary (written in the form variable_prefix.variable_name)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    variable_prefix:
      description: The prefix of the variable name
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File ensure key-value parameter not in list
  description: Ensure that a parameter doesn't exist in a list of parameters, on one single line, in the right hand side of a key->values line
  documentation: |-
    Edit the file, and ensure it does not contain the defined parameter in the list of values on the right hand side of a key->values line.
    If the parameter is there, it will be removed. Please note that the parameter can be a regular expression. It will also remove any whitespace character between the `parameter` and `parameter_separator`
    Optionally, you can define leading and closing character to enclose the parameters

    #### Example

    If you have an initial file (`/etc/default/grub`) containing

    ```
    GRUB_CMDLINE_XEN="dom0_mem=16G dom0_max_vcpus=32"
    ```

    To remove parameter `dom0_max_vcpus=32` in the right hand side of the line, you'll need the following policy

    ```
    file_ensure_key_value_parameter_not_in_list("/etc/default/grub", "GRUB_CMDLINE", "=", "dom0_max_vcpus=32", " ", "\"", "\"");
    ```
  supported_targets: []
  class_prefix: file_ensure_key_value_parameter_not_in_list
  class_parameter: file
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_ensure_key_value_parameter_not_in_list.cf
  deprecated: Use [file_key_value_parameter_absent_in_list](#_file_key_value_parameter_absent_in_list) instead.
  rename_to: file_key_value_parameter_absent_in_list
  action: null
  method_name: file_ensure_key_value_parameter_not_in_list
  method_args:
  - file
  - key
  - key_value_separator
  - parameter_regex
  - parameter_separator
  - leading_char_separator
  - closing_char_separator
  parameters:
    key:
      description: Full key name
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    key_value_separator:
      description: character used to separate key and value in a key-value line
      constraints:
        allow_empty_string: false
        allow_whitespace_string: true
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    leading_char_separator:
      description: leading character of the parameters
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    parameter_regex:
      description: Regular expression matching the sub-value to ensure is not present in the list of parameters that form the value part of that line
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    parameter_separator:
      description: Character used to separate parameters in the list
      constraints:
        allow_empty_string: false
        allow_whitespace_string: true
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    closing_char_separator:
      description: closing character of the parameters
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    file:
      description: File name to edit (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File line in INI section
  description: Ensure that a line is present in a section in a specific location. The objective of this method is to handle INI-style files.
  documentation: ''
  supported_targets: []
  class_prefix: file_line_present_in_ini_section
  class_parameter: file
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_line_present_in_ini_section.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: file_line_present_in_ini_section
  method_args:
  - file
  - section
  - line
  parameters:
    section:
      description: Name of the INI-style section under which lines should be added (not including the [] brackets)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    file:
      description: File name to edit (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    line:
      description: Line to ensure is present inside the section
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Define environment variable
  description: Enforce an environment variable value.
  documentation: |-
    Force the value of a shell environment variable.
    The variable will be written in `/etc/environment`. A newly created environment variable
    will not be usable by the agent until it is restarted.


    This bundle will define a class environment_variable_present_${name}_{kept,not_ok}
  supported_targets: []
  class_prefix: environment_variable_present
  class_parameter: name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/environment_variable.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: environment_variable_present
  method_args:
  - name
  - value
  parameters:
    name:
      description: Name of the environment variable
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    value:
      description: Value of the environment variable
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File content
  description: Enforce the content of a file
  documentation: |-
    Enforce the content of a file.
    The enforce parameter changes the edition method:

    * If *enforce* is set to *true* the file content will be forced
    * If *enforce* is set to *false* the file content will be forced line by line.
      Which means that each line managed can not be duplicated and the order will
      not be guaranteed.

    In most cases, the *enforce* parameter should be set to *true*.
    When *enforce* is set to *false*, and the managed lines are:

    ```
    Bob
    Alice
    Charly
    ```

    Will be compliant with the following file contents:

    ```
    Bob
    Alice
    Charly
    ```

    ```
    Charly
    Bob
    Alice
    Charly
    ```

    ```
    Bob
    Charly
    Alice
    ```
  supported_targets: []
  class_prefix: file_lines_present
  class_parameter: file
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_content.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: file_content
  method_args:
  - file
  - lines
  - enforce
  parameters:
    file:
      description: File name to edit (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    enforce:
      description: Enforce the file to contain only line(s) defined (true or false)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    lines:
      description: Line(s) to add in the file - if lines is a list, please use @{lines} to pass the iterator rather than iterating over each values
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Variable string with default
  description: Define a variable from another variable name, with a default value if undefined
  documentation: "To use the generated variable, you must use the form `${variable_prefix.variable_name}` with each name replaced with the parameters of this method.\n\nBe careful that using a global variable can lead to unpredictable content in case of multiple definition, which is implicitly the case when a technique has more than one instance (directive). \nPlease note that only global variables are available within templates."
  supported_targets: []
  class_prefix: variable_string_default
  class_parameter: variable_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/variable_string_default.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: variable_string_default
  method_args:
  - variable_prefix
  - variable_name
  - source_variable
  - default_value
  parameters:
    variable_name:
      description: The variable to define, the full name will be variable_prefix.variable_name
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    source_variable:
      description: The source variable name
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    default_value:
      description: The default value to use if source_variable is not defined
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    variable_prefix:
      description: The prefix of the variable name
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Variable string from Augeas
  description: Use Augeas binaries to call Augtool commands and options to get a node label's value.
  documentation: |-
    Augeas is a tool that provides an abstraction layer for all the complexities that turn around editing files with regular expressions.
    It's a tree based hierarchy tool, that handle system configuration files where you can securely modify your files. To do so you have to provide
    the path to the node label's value.

    This method aims to use `augtool` to extract a specific information from a configuration file into a rudder variable.
    If Augeas is not installed on the agent, or if it fails to execute, it will produces an error.

    * **variable prefix**: target variable prefix
    * **variable name**: target variable name
    * **path**: augeas node path, use to describe the location of the target information we want to extract
    * **lens**: augeas lens to use, optional
    * **file**: absolute file path to target, optional

    Actually there are two ways you can use this method:

    * Either by providing the augeas **path** to the node's label and let **lens** and **file** empty.
    ** this way augeas will load the common files and lens automatically
    * Or by using a given **file** path and a specific **lens**.
    ** better performances since only one lens is loaded
    ** support custom lens, support custom paths

    This mechanism is the same as in the `file_augeas_set` method.

    #### With autoload

    Let's consider that you want to obtain the value of the ip address of the first line in the `/etc/hosts`:

    (Note that the `label` and `value` parameters mentioned are naming examples of **variable prefix** and **variable name**, the augeas
    **path** `/etc/hosts/1/ipaddr`
    represents the `ipaddr` node label's value (in the augeas mean) in the first line of the file `/etc/hosts`).

    ```
    variable_string_from_augeas("label","value","/etc/hosts/1/ipaddr", "", "");
    ```

    #### Without autoload

    Here we want the same information as in the first example, but we will force the lens to avoid loading unnecessary files.

    ```
    variable_string_from_augeas("label","value","/etc/hosts/1/ipaddr","Hosts","/etc/hosts");
    ```

    #### Difference with `file augeas command`

    This method is very similar to the `file augeas command` one, both execute an `augtool` command an dump its output in a rudder variable.
    But their goal is really different:

    * This one will parse the output of the augeas `print` that we want to make it directly usable, but will be less flexible in its input.
    * The `file augeas command` offers much more possibilities to execute an augeas command to modify a file, but the output will be unparsed and most likely
      unusable as a rudder variable, expect to dump an error or configuration somewhere.
  supported_targets: []
  class_prefix: variable_string_from_augeas
  class_parameter: variable_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/variable_string_from_augeas.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: variable_string_from_augeas
  method_args:
  - variable_prefix
  - variable_name
  - path
  - lens
  - file
  parameters:
    file:
      description: The absolute path to the file specified by the user in case he wants to load a specified file associated with its lens
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    variable_prefix:
      description: The prefix of the variable name
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    variable_name:
      description: The variable to define, the full name will be variable_prefix.variable_name
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    path:
      description: The augeas path to the file and node label
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    lens:
      description: The lens specified by the user in case he wants to load a specified lens associated with its file
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Package state with options
  description: Enforce the state of a package with options
  documentation: See [package_state](#_package_state) for documentation.
  supported_targets: []
  class_prefix: package_state_options
  class_parameter: name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/package_state_options.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: package_state_options
  method_args:
  - name
  - version
  - architecture
  - provider
  - state
  - options
  parameters:
    version:
      description: Version of the package, can be "latest" for latest version or "any" for any version (defaults to "any")
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    provider:
      description: Package provider to use, can be "yum", "apt", "zypper", "zypper_pattern", "slackpkg", "pkg", "ips", "nimclient" or "default" for system default package manager (defaults to "default")
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select:
        - ''
        - default
        - yum
        - apt
        - zypper
        - zypper_pattern
        - slackpkg
        - pkg
        - ips
        - nimclient
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    architecture:
      description: Architecture of the package, can be an architecture name  or "default" (defaults to "default")
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    state:
      description: State of the package, can be "present" or "absent" (defaults to "present")
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select:
        - ''
        - present
        - absent
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    options:
      description: Options no pass to the package manager (defaults to empty)
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    name:
      description: Name of the package, or path to a local package if state is present
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Service started
  description: Ensure that a service is running using the appropriate method
  documentation: ''
  supported_targets: []
  class_prefix: service_started
  class_parameter: service_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/service_started.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: service_started
  method_args:
  - service_name
  parameters:
    service_name:
      description: Service name (as recognized by systemd, init.d, etc...)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Permissions dirs recurse
  description: Verify if a directory has the right permissions recursively
  documentation: ''
  supported_targets: []
  class_prefix: permissions
  class_parameter: path
  source: /home/amousset/projects/ncf/tree/30_generic_methods/permissions_dirs_recurse.cf
  deprecated: Use [permissions_dirs_recursive](#_permissions_dirs_recursive) instead.
  rename_to: permissions_dirs_recursive
  action: null
  method_name: permissions_dirs_recurse
  method_args:
  - path
  - mode
  - owner
  - group
  parameters:
    owner:
      description: Owner to enforce
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    group:
      description: Group to enforce
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    path:
      description: Path to the directory
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    mode:
      description: Mode to enforce
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Variable dict from JSON file
  description: Define a variable that contains key,value pairs (a dictionary) from a JSON file
  documentation: "To use the generated variable, you must use the form `${variable_prefix.variable_name[key]}` with each name replaced with the parameters of this method.\n\nBe careful that using a global variable can lead to unpredictable content in case of multiple definition, which is implicitly the case when a technique has more than one instance (directive). \nPlease note that only global variables are available within templates.\n\nSee [variable_dict_from_file_type](#_variable_dict_from_file_type) for complete documentation."
  supported_targets: []
  class_prefix: variable_dict_from_file
  class_parameter: variable_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/variable_dict_from_file.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: variable_dict_from_file
  method_args:
  - variable_prefix
  - variable_name
  - file_name
  parameters:
    variable_prefix:
      description: The prefix of the variable name
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    variable_name:
      description: The variable to define, the full name will be variable_prefix.variable_name
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    file_name:
      description: The absolute local file name with JSON content
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Sysctl value
  description: Enforce a value in sysctl (optionally increase or decrease it)
  documentation: "Enforce a value in sysctl\n\n#### Behaviors\n\nChecks for the current value defined for the given key\nIf it is not set, this method attempts to set it in the file defined as argument\nIf it is set, and corresponds to the desired value, it will success\nIf it is set, and does not correspond, the value will be set in the file defined, sysctl \nconfiguration is reloaded with `sysctl --system` and the \nresulting value is checked. \nIf it is not taken into account by sysctl because\nits overridden in another file or its an invalid key, the method returns an error\n\n#### Prerequisite\n\nThis method requires an /etc/sysctl.d folder, and the `sysctl --system` option.\nIt does not support Debian 6 or earlier, CentOS/RHEL 6 or earlier, SLES 11 or earlier,\nUbuntu 12_04 or earlier, AIX and Solaris.\n\n##### Parameters\n\n`key`   : the key to enforce/check\n`value` : the expected value for the key\n`filename` : filename (without extension) containing the key=value when need to be set, within /etc/sysctl.d.\n             This method adds the correct extension at the end of the filename\nOptional parameter:\n `min`: The value is the minimal value we request. the value is only changed if the current value is lower than `value`\n `max`: The value is the maximal value we request: the value is only changed if the current value is higher than `value`\n `default` (default value): The value is strictly enforced.\n\nComparison is numerical if possible, else alphanumerical\nSo 10 > 2, but Test10 < Test2\n\n#### Examples\n\nTo ensure that swappiness is disabled, and storing the configuration parameter in 99_rudder.conf\n\n```\n sysctl_value(\"vm.swappiness\", \"99_rudder\", \"0\", \"\")\n```\n\nTo ensure that the UDP buffer is at least 26214400\n\n```\n sysctl_value(\"net.core.rmem_max\", \"99_rudder\", \"26214400\", \"min\")\n```"
  supported_targets: []
  class_prefix: sysctl_value
  class_parameter: key
  source: /home/amousset/projects/ncf/tree/30_generic_methods/sysctl_value.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: sysctl_value
  method_args:
  - key
  - value
  - filename
  - option
  parameters:
    key:
      description: The key to enforce
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    option:
      description: 'Optional modifier on value: Min, Max or Default (default value)'
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    value:
      description: The desired value
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    filename:
      description: File name where to put the value in /etc/sysctl.d (without the .conf extension)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: User password hash
  description: |-
    Ensure a user's password. Password must respect `$id$salt$hashed` format
     as used in the UNIX /etc/shadow file.
  documentation: "User must exists, password must be pre-hashed. Does not handle\n  empty password accounts. See UNIX /etc/shadow format.\n  entry example: `$1$jp5rCMS4$mhvf4utonDubW5M00z0Ow0`\n  \n  An empty password will lead to an error and be notified."
  supported_targets: []
  class_prefix: user_password_hash
  class_parameter: login
  source: /home/amousset/projects/ncf/tree/30_generic_methods/user_password_hash.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: user_password_hash
  method_args:
  - login
  - password
  parameters:
    password:
      description: User hashed password
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    login:
      description: User login
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Service disabled at boot
  description: Force a service not to be enabled at boot
  documentation: ''
  supported_targets: []
  class_prefix: service_disabled
  class_parameter: service_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/service_disabled.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: service_disabled
  method_args:
  - service_name
  parameters:
    service_name:
      description: Service name (as recognized by systemd, init.d, etc...)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File check if symlink
  description: Checks if a file exists and is a symlink
  documentation: |-
    This bundle will define a condition `file_check_symlink_${file_name}_{ok, reached, kept}` if the
    file is a symlink, or `file_check_symlink_${file_name}_{not_ok, reached, not_kept, failed}` if
    the file is not a symlink or does not exist
  supported_targets: []
  class_prefix: file_check_symlink
  class_parameter: file_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_check_symlink.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: file_check_symlink
  method_args:
  - file_name
  parameters:
    file_name:
      description: File name (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File from remote template
  description: Build a file from a template on the Rudder server
  documentation: |-
    Write a file based on a template on the Rudder server and data available on the node

    #### Usage

    To use this method, you need to have:

    * a template on the Rudder server shared folder
    * data to fill this template

    The template needs to be located in the shared-files folder and can be accessed with:

    ```
    /var/rudder/configuration-repository/shared-files/PATH_TO_YOUR_FILE
    ```

    The data that will be used while expanding the template is the data available in
    the agent at the time of expansion. That means:

    * Agent's system variables (`${sys.*}`, ...) and conditions (`linux`, ...)
    * data defined during execution (result conditions of generic methods, ...)
    * conditions based on `condition_` generic methods
    * data defined using `variable_*` generic methods, which allow for example
      to load data from local json or yaml files.

    #### Template types

    Supported templating languages:

    * *mustache* templates, which are documented in [file_from_template_mustache](#_file_from_template_mustache)
    * *jinja2* templates, which are documented in [file_from_template_jinja2](#_file_from_template_jinja2)

    #### Reporting

    This method will provide extra `log_warning` message if the template was not updated, but the destination
    file is modified.
  supported_targets: []
  class_prefix: file_from_remote_template
  class_parameter: destination
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_from_remote_template.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: file_from_remote_template
  method_args:
  - source_template
  - destination
  - template_type
  parameters:
    destination:
      description: Destination file (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    source_template:
      description: Source file containing a template to be expanded (absolute path on the server)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    template_type:
      description: Template type (jinja2 or mustache)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select:
        - jinja2
        - mustache
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Create symlink (force overwrite)
  description: Create a symlink at a destination path and pointing to a source target even if a file or directory already exists.
  documentation: ''
  supported_targets: []
  class_prefix: file_create_symlink
  class_parameter: destination
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_create_symlink_force.cf
  deprecated: Use [file_symlink_present_force](#_file_symlink_present_force) instead.
  rename_to: file_symlink_present_force
  action: null
  method_name: file_create_symlink_force
  method_args:
  - source
  - destination
  parameters:
    source:
      description: Source file (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    destination:
      description: Destination file (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File key-value parameter not in list
  description: Ensure that a parameter doesn't exist in a list of parameters, on one single line, in the right hand side of a key->values line
  documentation: |-
    Edit the file, and ensure it does not contain the defined parameter in the list of values on the right hand side of a key->values line.
    If the parameter is there, it will be removed. Please note that the parameter can be a regular expression. It will also remove any whitespace character between the parameter and parameter_separator
    Optionally, you can define leading and closing character to enclose the parameters

    #### Example

    If you have an initial file (`/etc/default/grub`) containing

    ```
    GRUB_CMDLINE_XEN="dom0_mem=16G dom0_max_vcpus=32"
    ```

    To remove parameter `dom0_max_vcpus=32` in the right hand side of the line, you'll need the following policy

    ```
    file_ensure_key_value_parameter_not_in_list("/etc/default/grub", "GRUB_CMDLINE", "=", "dom0_max_vcpus=32", " ", "\"", "\"");
    ```
  supported_targets: []
  class_prefix: file_key_value_parameter_absent_in_list
  class_parameter: file
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_key_value_parameter_absent_in_list.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: file_key_value_parameter_absent_in_list
  method_args:
  - file
  - key
  - key_value_separator
  - parameter_regex
  - parameter_separator
  - leading_char_separator
  - closing_char_separator
  parameters:
    key:
      description: Full key name
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    closing_char_separator:
      description: closing character of the parameters
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    key_value_separator:
      description: character used to separate key and value in a key-value line
      constraints:
        allow_empty_string: false
        allow_whitespace_string: true
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    file:
      description: File name to edit (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    parameter_regex:
      description: Regular expression matching the sub-value to ensure is not present in the list of parameters that form the value part of that line
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    leading_char_separator:
      description: leading character of the parameters
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    parameter_separator:
      description: Character used to separate parameters in the list
      constraints:
        allow_empty_string: false
        allow_whitespace_string: true
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Service stop
  description: Stop a service using the appropriate method
  documentation: See [service_action](#_service_action) for documentation.
  supported_targets: []
  class_prefix: service_stop
  class_parameter: service_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/service_stop.cf
  deprecated: |-
    This is an action that should not be used in the general case.
    If you really want to call the stop method, use [service_action](#_service_action).
    Otherwise, simply call [service_stopped](#_service_stopped)
  rename_to: null
  action: null
  method_name: service_stop
  method_args:
  - service_name
  parameters:
    service_name:
      description: Name of the service
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Package check installed
  description: Verify if a package is installed in any version
  documentation: |-
    This bundle will define a condition `package_check_installed_${file_name}_{ok, reached, kept}` if the
    package is installed, or `package_check_installed_${file_name}_{not_ok, reached, not_kept, failed}` if
    the package is not installed
  supported_targets: []
  class_prefix: package_check_installed
  class_parameter: package_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/package_check_installed.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: package_check_installed
  method_args:
  - package_name
  parameters:
    package_name:
      description: Name of the package to check
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Package absent
  description: Enforce the absence of a package
  documentation: See [package_state](#_package_state) for documentation.
  supported_targets: []
  class_prefix: package_absent
  class_parameter: name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/package_absent.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: package_absent
  method_args:
  - name
  - version
  - architecture
  - provider
  parameters:
    version:
      description: Version of the package or "any" for any version (defaults to "any")
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    name:
      description: Name of the package
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    provider:
      description: Package provider to use, can be "yum", "apt", "zypper", "zypper_pattern", "slackpkg", "pkg", "ips", "nimclient" or "default" for system default package manager (defaults to "default")
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select:
        - ''
        - default
        - yum
        - apt
        - zypper
        - zypper_pattern
        - slackpkg
        - pkg
        - ips
        - nimclient
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    architecture:
      description: Architecture of the package, can be an architecture name  or "default" (defaults to "default")
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Schedule Simple Nodups
  description: Trigger a repaired outcome when a job should be run (avoid running twice)
  documentation: |-
    This bundle will define a condition `schedule_simple_${job_id}_{kept,repaired,not_ok,ok,reached}`

     * _ok or _kept for when there is nothing to do
     * _repaired if the job should run
     * _not_ok and _reached have their usual meaning

     If the agent is run twice (for example from a manual run), the jo is run only once.
     However if the agent run is skipped during the period, the job is never run.
  supported_targets: []
  class_prefix: schedule_simple
  class_parameter: job_id
  source: /home/amousset/projects/ncf/tree/30_generic_methods/schedule_simple_nodups.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: ''
  method_args: []
  parameters:
    max_execution_delay_minutes:
      description: On how many minutes you want to spread the job
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    start_on_minutes:
      description: At which minute should be the first run
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    start_on_hours:
      description: At which hour should be the first run
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    job_id:
      description: A string to identify this job
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    periodicity_minutes:
      description: Desired job run interval (in minutes)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    start_on_day_of_week:
      description: At which day of week should be the first run
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    max_execution_delay_hours:
      description: On how many hours you want to spread the job
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    periodicity_hours:
      description: Desired job run interval (in hours)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    agent_periodicity:
      description: Agent run interval (in minutes)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    periodicity_days:
      description: Desired job run interval (in days)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Variable string from command
  description: Define a variable from a command output
  documentation: |-
    Define a variable from a command output.
    The method will execute a shell command and define a variable `${variable_prefix.variable_name}` from it.

    * Only `stdout` is kept
    * The variable will only be defined if the exit code of the command is 0
    * If the variable definition is successful, the method will report a success, it will
    report an error otherwise.
    * The command will be executed even in *Audit mode*
  supported_targets: []
  class_prefix: variable_string_from_command
  class_parameter: variable_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/variable_string_from_command.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: variable_string_from_command
  method_args:
  - variable_prefix
  - variable_name
  - command
  parameters:
    command:
      description: The command to execute
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    variable_prefix:
      description: The prefix of the variable name
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    variable_name:
      description: The variable to define, the full name will be variable_prefix.variable_name
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Sharedfile from node
  description: This method retrieves a file shared from another Rudder node
  documentation: |-
    This method retrieves a file shared from a Rudder node using a unique file identifier.

    The file will be downloaded using native agent protocol and copied into a new file.
    The destination path must be the complete absolute path of the destination file.

    See [sharedfile_to_node](#_sharedfile_to_node) for a complete example.
  supported_targets: []
  class_prefix: sharedfile_from_node
  class_parameter: file_id
  source: /home/amousset/projects/ncf/tree/30_generic_methods/sharedfile_from_node.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: sharedfile_from_node
  method_args:
  - source_uuid
  - file_id
  - file_path
  parameters:
    file_path:
      description: Where to put the file content
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    source_uuid:
      description: Which node to take the file from
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    file_id:
      description: Unique name that was used to identify the file on the sender
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: ^[A-z0-9._-]+$
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File remove
  description: Remove a file if it exists
  documentation: ''
  supported_targets: []
  class_prefix: file_remove
  class_parameter: target
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_remove.cf
  deprecated: Use [file_absent](#_file_absent) instead.
  rename_to: file_absent
  action: null
  method_name: file_remove
  method_args:
  - target
  parameters:
    target:
      description: File to remove (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Variable string from file
  description: Define a variable from a file content
  documentation: "To use the generated variable, you must use the form `${variable_prefix.variable_name}` with each name replaced with the parameters of this method.\n\nBe careful that using a global variable can lead to unpredictable content in case of multiple definition, which is implicitly the case when a technique has more than one instance (directive). \nPlease note that only global variables are available within templates."
  supported_targets: []
  class_prefix: variable_string_from_file
  class_parameter: variable_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/variable_string_from_file.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: variable_string_from_file
  method_args:
  - variable_prefix
  - variable_name
  - file_name
  parameters:
    variable_name:
      description: The variable to define, the full name will be variable_prefix.variable_name
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    file_name:
      description: The path of the file
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    variable_prefix:
      description: The prefix of the variable name
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File replace lines
  description: Ensure that a line in a file is replaced by another one
  documentation: |-
    You can replace lines in a files, based on regular expression and captured pattern

    #### Syntax

    The content to match in the file is a PCRE regular expression, unanchored
    that you can replace with the content of replacement.

    Content can be captured in regular expression, and be reused with the notation `${match.1}` (for first matched
    content), `${match.2}` for second, etc, and the special captured group `${match.0}` for the whole text.

    #### Example

    Here is an example to remove enclosing specific tags

    ```
    file_replace_lines("/PATH_TO_MY_FILE/file", "<my>(.*)<pattern>", "my ${match.1} pattern")
    ```
  supported_targets: []
  class_prefix: file_replace_lines
  class_parameter: file
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_replace_lines.cf
  deprecated: null
  rename_to: null
  action: If the regex matches the replacement, then the line will be replaced every time
  method_name: file_replace_lines
  method_args:
  - file
  - line
  - replacement
  parameters:
    line:
      description: Line to match in the file
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    replacement:
      description: Line to add in the file as a replacement
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    file:
      description: File name to edit (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Audit from osquery
  description: Audit a system property through osquery
  documentation: |-
    This method uses osquery to fetch information about the system,
    and compares the value with the given one, using the provided comparator.

    #### Parameters

    * `query` is an osquery query returning exactly one result
    * `comparator` is the comparator to use: "=" for equality, "!=" for non-equality, "~" for regex comparison
    * `value` is the expected value, can be a string or a regex depending on the comparator

    #### Setup

    This method requires the presence of [osquery](https://osquery.io/) on the target nodes.
    It won't install it automatically. Check the correct way of doing so for your OS.

    #### Building queries

    To learn about the possible queries, read the [osquery schema](https://osquery.io/schema/) for your
    osquery version.

    You can test the queries before using them with the `osqueryi` command, see the example below.

    ```
    osqueryi "select cpu_logical_cores from system_info;"
    ```

    You need to provide a query that returns exactly one value. If it's not the case, the method
    will fail as it does not know what to check.

    #### Examples

    ```
    # To check the number of cpus on the machine
    audit_from_osquery("select cpu_logical_cores from system_info;", "2");
    ```

    Will report a compliant report if the machine has 3 cores, and a non compliant one if not.
  supported_targets: []
  class_prefix: audit_from_osquery
  class_parameter: query
  source: /home/amousset/projects/ncf/tree/30_generic_methods/audit_from_osquery.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: audit_from_osquery
  method_args:
  - query
  - comparator
  - value
  parameters:
    comparator:
      description: The comparator to use ('=', '!=' or '~', default is '=')
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select:
        - ''
        - =
        - '!='
        - '~'
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    query:
      description: The query to execute (ending with a semicolon)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    value:
      description: The expected value
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Permissions type recursion
  description: Ensure that a file or directory is present and has the right mode/owner/group
  documentation: |-
    The method ensure that all files|directories|files and directories have
    the correct owner, group owner and permissions.

    The parameter *type* can be either: "*all*", "*files*" or "*directories*".
    The parameter *recursion* can be either: "*0,1,2,3,.... inf*"
    The level of recursion is the maximum depth of subfolder that will be managed by the method:

    * 0 being the current folder/file
    * 1 being the current folder/file and its subfolders
    * ..
    * inf being the file or the whole folder tree
  supported_targets: []
  class_prefix: permissions
  class_parameter: path
  source: /home/amousset/projects/ncf/tree/30_generic_methods/permissions_type_recursion.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: permissions_type_recursion
  method_args:
  - path
  - mode
  - owner
  - group
  - type
  - recursion
  parameters:
    mode:
      description: Mode of the path to edit
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    owner:
      description: Owner of the path to edit
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    path:
      description: Path to edit
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    recursion:
      description: Recursion depth to enforce for this path (0, 1, 2, ..., inf)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    type:
      description: Type of the path to edit (all/files/directories)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    group:
      description: Group of the path to edit
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Service ensure running
  description: Ensure that a service is running using the appropriate method
  documentation: ''
  supported_targets: []
  class_prefix: service_ensure_running
  class_parameter: service_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/service_ensure_running.cf
  deprecated: Use [service_started](#_service_started) instead.
  rename_to: service_started
  action: null
  method_name: service_ensure_running
  method_args:
  - service_name
  parameters:
    service_name:
      description: Service name (as recognized by systemd, init.d, etc...)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File line in XML section
  description: Ensure that a line is present in a tag in a specific location. The objective of this method is to handle XML-style files. Note that if the tag is not present in the file, it won't be added, and the edition will fail.
  documentation: ''
  supported_targets: []
  class_prefix: file_line_present_in_xml_tag
  class_parameter: file
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_line_present_in_xml_tag.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: file_line_present_in_xml_tag
  method_args:
  - file
  - tag
  - line
  parameters:
    file:
      description: File name to edit (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    tag:
      description: Name of the XML tag under which lines should be added (not including the <> brackets)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    line:
      description: Line to ensure is present inside the section
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: User absent
  description: Remove a user
  documentation: This method ensures that a user does not exist on the system.
  supported_targets: []
  class_prefix: user_absent
  class_parameter: login
  source: /home/amousset/projects/ncf/tree/30_generic_methods/user_absent.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: user_absent
  method_args:
  - login
  parameters:
    login:
      description: User login
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Service restart
  description: Restart a service using the appropriate method
  documentation: See [service_action](#_service_action) for documentation.
  supported_targets: []
  class_prefix: service_restart
  class_parameter: service_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/service_restart.cf
  deprecated: null
  rename_to: null
  action: ''
  method_name: service_restart
  method_args:
  - service_name
  parameters:
    service_name:
      description: Name of the service
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File report content
  description: Report the content of a file
  documentation: |-
    Report the content of a file.

    This method does nothing on the system, but only reports a complete or partial content
    from a given file. This allows centralizing this information on the server, and avoid
    having to connect on each node to get this information.

    NOTE: This method only works in "Full Compliance" reporting mode.

    #### Parameters

    ##### Target

    This is the file you want to report content from. The method will return an error if it
    does not exist.

    ##### Regex

    If empty, the method will report the whole file content.
    If set, the method will grep the file for the given regular expression, and
    report the result.

    ##### Context

    When specifying a regex, will add the number of lines of context around matches
    (default is 0, i.e. no context).

    When reporting the whole file, this parameter is ignored.

    #### Examples

    ```
    # To get the whole /etc/hosts content
    file_report_content("/etc/hosts", "", "");
    # To get lines starting by "nameserver" in /etc/resolv.conf
    file_report_content("/etc/resolv.conf", "^nameserver", "");
    # To get lines containing "rudder" from /etc/hosts with 3 lines of context
    file_report_content("/etc/hosts", "rudder", "3");
    ```
  supported_targets: []
  class_prefix: file_report_content
  class_parameter: target
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_report_content.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: file_report_content
  method_args:
  - target
  - regex
  - context
  parameters:
    context:
      description: Number of context lines when matching regex (default is 0)
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: ^\d*$
        max_length: 16384
      renamed_to: null
      p_type: String
    target:
      description: File to report content from
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    regex:
      description: Regex to search in the file (empty for whole file)
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Condition from expression persistent
  description: Create a new condition that persists across runs
  documentation: |-
    This method evaluates an expression (=condition combination), and produces a `${condition_prefix}_true`
    or a `${condition_prefix}_false` condition depending on the result on the expression,
    which will lasts for the **Duration** time:

    * This method always result with a *success* outcome status
    * If the expression evaluation results in a "defined" state, this will define a `${condition_prefix}_true` condition,
    * If the expression evaluation results in an "undefined" state, this will produce a `${condition_prefix}_false` condition.


    Calling this method with a condition expression transforms a complex expression into a single class condition.

    The created condition is global to the agent and is persisted across runs.
    The persistence duration is controlled using the parameter **Duration** which defines for how long the target
    condition will be defined (in minutes). Note that there is no way to persist indefinitely.

    ##### Example:

    If you want to check if a condition evaluates to true, like checking that you
    are on Monday, 2am, on RedHat systems, and make it last one hour you can use the following policy

    ```
    condition_from_expression_persistent_("backup_time", "Monday.redhat.Hr02", "60")
    ```
    The method will define:
    * In any case:
        * `condition_from_expression_persistent_backup_time_kept`
        * `condition_from_expression_persistent_backup_time_reached`
    * And:
        * `backup_time_true` if the system is a RedHat like system, on Monday,
         at 2am, and will persist for **Duration** minutes,
        * `backup_time_false` if the system not a RedHat like system, or it's not Monday, or it's not 2am
        * no extra condition if the expression is invalid (cannot be parsed)

    ##### Notes:

    Rudder will automatically "canonify" the given **Condition prefix** at execution time,
    which means that all non `[a-zA-Z0-9_]` characters will be replaced by an underscore.
  supported_targets: []
  class_prefix: condition_from_expression_persistent
  class_parameter: condition_prefix
  source: /home/amousset/projects/ncf/tree/30_generic_methods/condition_from_expression_persistent.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: condition_from_expression_persistent
  method_args:
  - condition_prefix
  - condition_expression
  - duration
  parameters:
    condition_expression:
      description: The expression evaluated to create the condition (use 'any' to always evaluate to true)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    duration:
      description: The persistence suffix in minutes
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    condition_prefix:
      description: The condition prefix
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File from local source
  description: Ensure that a file or directory is copied from a local source
  documentation: |-
    Ensure that a file or directory is copied from a local source on and from the target node.
    The copy is not recursive if the target is a directory. To copy recursively a folder from a local
    source, use the *File from local source recursion* method.
  supported_targets: []
  class_prefix: file_from_local_source
  class_parameter: destination
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_from_local_source.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: file_from_local_source
  method_args:
  - source
  - destination
  parameters:
    source:
      description: Source file (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    destination:
      description: Destination file (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Symlink present
  description: Create a symlink at a destination path and pointing to a source target except if a file or directory already exists.
  documentation: ''
  supported_targets: []
  class_prefix: file_symlink_present
  class_parameter: destination
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_symlink_present.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: file_symlink_present
  method_args:
  - source
  - destination
  parameters:
    source:
      description: Source file (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    destination:
      description: Destination file (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Create symlink (optional overwriting)
  description: Create a symlink at a destination path and pointing to a source target. This is also possible to enforce its creation
  documentation: ''
  supported_targets: []
  class_prefix: file_create_symlink
  class_parameter: destination
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_create_symlink_enforce.cf
  deprecated: Use [file_symlink_present_option](#_file_symlink_present_option) instead.
  rename_to: file_symlink_present_option
  action: null
  method_name: file_create_symlink_enforce
  method_args:
  - source
  - destination
  - enforce
  parameters:
    destination:
      description: Destination file (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    enforce:
      description: Force symlink if file already exist (true or false)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    source:
      description: Source file (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Service ensure started at boot
  description: Force a service to be started at boot
  documentation: ''
  supported_targets: []
  class_prefix: service_ensure_started_at_boot
  class_parameter: service_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/service_ensure_started_at_boot.cf
  deprecated: Use [service_enabled](#_service_enabled) instead.
  rename_to: service_enabled
  action: null
  method_name: service_ensure_started_at_boot
  method_args:
  - service_name
  parameters:
    service_name:
      description: Service name (as recognized by systemd, init.d, Windows, SRC, SMF, etc...)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Condition once
  description: Create a new condition only once
  documentation: |-
    This method define a condition named from the parameter **Condition** when it is
    called for the first time. Following agent execution will not define the
    condition.

    This allows executing actions only once on a given machine.
    The created condition is global to the agent.

    ##### Example:

    If you use:

    ```
    condition_once("my_condition")
    ```

    The first agent run will have the condition `my_condition` defined, contrary to subsequent runs
    for which no condition will be defined.

    See also : [command\_execution\_once](#_command_execution_once)
  supported_targets: []
  class_prefix: condition_once
  class_parameter: condition
  source: /home/amousset/projects/ncf/tree/30_generic_methods/condition_once.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: condition_once
  method_args:
  - condition
  parameters:
    condition:
      description: The condition to define
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File ensure line in XML section
  description: Ensure that a line is present in a tag in a specific location. The objective of this method is to handle XML-style files. Note that if the tag is not present in the file, it won't be added, and the edition will fail.
  documentation: ''
  supported_targets: []
  class_prefix: file_ensure_line_present_in_xml_tag
  class_parameter: file
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_ensure_line_present_in_xml_tag.cf
  deprecated: Use [file_line_present_in_xml_tag](#_file_line_present_in_xml_tag) instead.
  rename_to: file_line_present_in_xml_tag
  action: null
  method_name: file_ensure_line_present_in_xml_tag
  method_args:
  - file
  - tag
  - line
  parameters:
    line:
      description: Line to ensure is present inside the section
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    tag:
      description: Name of the XML tag under which lines should be added (not including the <> brackets)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    file:
      description: File name to edit (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Sharedfile to node
  description: This method shares a file with another Rudder node
  documentation: |-
    This method shares a file with another Rudder node using a unique file identifier.

    Read the Rudder documentation for a [high level overview of file sharing between nodes](https://docs.rudder.io/reference/current/usage/advanced_configuration_management.html#_share_files_between_nodes).

    The file will be kept on the policy server and transmitted to the destination node's policy server if it is different.
    It will be kept on this server for the destination node to download as long as it is not replaced by a new
    file with the same id or remove by expiration of the TTL.

    #### Parameters

    This section describes the generic method parameters.

    #### target_uuid

    The node you want to share this file with. The uuid of a node
    is visible in the Nodes details (in the Web interface) or by entering
    `rudder agent info` on the target node.

    ##### file_id

    This is a name that will be used to identify the file in the target node. It should be unique
    and describe the file content.

    ##### file_path

    The local absolute path of the file to share.

    ##### ttl

    The TTL can be:

    * A simple integer, in this case it is assumed to be a number of *seconds*
    * A string including units indications, the possible units are:

    * *days*, *day* or *d*
    * *hours*, *hour*, or *h*
    * *minutes*, *minute*, or *m*
    * *seconds*, *second* or *s*

    The ttl value can look like *1day 2hours 3minutes 4seconds* or can be abbreviated in the form *1d 2h 3m 4s*, or without spaces *1d2h3m4s* or any combination like *1day2h 3minute 4seconds*
    Any unit can be skipped, but the decreasing order needs to be respected.

    ##### file_id

    This is a name that will be used to identify the file once stored on the server. It should be unique
    and describe the file content.

    #### Example:

    We have a node *A*, with uuid `2bf1afdc-6725-4d3d-96b8-9128d09d353c` which wants to share
    the `/srv/db/application.properties` with node *B* with uuid `73570beb-2d4a-43d2-8ffc-f84a6817849c`.

    We want this file to stay available for one year for node *B* on its policy server.

    The node *B* wants to download it into `/opt/application/etc/application.properties`.

    They have to agree (i.e. it has to be defined in the policies of both nodes) on the id of the file,
    that will be used during the exchange, here it will be `application.properties`.

    To share the file, node *A* will use:

    ```
    sharedfile_to_node("73570beb-2d4a-43d2-8ffc-f84a6817849c", "application.properties", "/srv/db/application.properties", "356 days")
    ```

    To download the file, node *B* will use [sharedfile_from_node](#_sharedfile_from_node) with:

    ```
    sharedfile_from_node("2bf1afdc-6725-4d3d-96b8-9128d09d353c", "application.properties", "/opt/application/etc/application.properties")
    ```
  supported_targets: []
  class_prefix: sharedfile_to_node
  class_parameter: file_id
  source: /home/amousset/projects/ncf/tree/30_generic_methods/sharedfile_to_node.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: sharedfile_to_node
  method_args:
  - target_uuid
  - file_id
  - file_path
  - ttl
  parameters:
    target_uuid:
      description: Which node to share the file with
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    ttl:
      description: Time to keep the file on the policy server in seconds or in human readable form (see long description)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: ^(\d+\s*(days?|d))?(\d+\s*(hours?|h))?(\d+\s*(minutes?|m))?(\d+\s*(seconds?|s))?$
        max_length: 16384
      renamed_to: null
      p_type: String
    file_id:
      description: Unique name that will be used to identify the file on the receiver
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: ^[A-z0-9._-]+$
        max_length: 16384
      renamed_to: null
      p_type: String
    file_path:
      description: Path of the file to share
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Permissions (recurse)
  description: Verify if a file or directory has the right permissions recursively
  documentation: ''
  supported_targets: []
  class_prefix: permissions
  class_parameter: path
  source: /home/amousset/projects/ncf/tree/30_generic_methods/permissions_recurse.cf
  deprecated: Use [permissions_recursive](#_permissions_recursive) instead.
  rename_to: permissions_recursive
  action: null
  method_name: permissions_recurse
  method_args:
  - path
  - mode
  - owner
  - group
  parameters:
    mode:
      description: Mode to enforce
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    path:
      description: Path to the file / directory
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    group:
      description: Group to enforce
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    owner:
      description: Owner to enforce
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Schedule Simple Stateless
  description: Trigger a repaired outcome when a job should be run (without checks)
  documentation: |-
    This bundle will define a condition `schedule_simple_${job_id}_{kept,repaired,not_ok,ok,reached}`

     * _ok or _kept for when there is nothing to do
     * _repaired if the job should run
     * _not_ok and _reached have their usual meaning

     No effort is done to check if a run has already been done for this period or not.
     If the agent is run twice, the job will be run twice, and if the agent is not run, the job will no be run.
  supported_targets: []
  class_prefix: schedule_simple
  class_parameter: job_id
  source: /home/amousset/projects/ncf/tree/30_generic_methods/schedule_simple_stateless.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: ''
  method_args: []
  parameters:
    max_execution_delay_hours:
      description: On how many hours you want to spread the job
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    agent_periodicity:
      description: Agent run interval (in minutes)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    max_execution_delay_minutes:
      description: On how many minutes you want to spread the job
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    job_id:
      description: A string to identify this job
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    start_on_hours:
      description: At which hour should be the first run
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    start_on_minutes:
      description: At which minute should be the first run
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    periodicity_hours:
      description: Desired job run interval (in hours)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    start_on_day_of_week:
      description: At which day of week should be the first run
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    periodicity_days:
      description: Desired job run interval (in days)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    periodicity_minutes:
      description: Desired job run interval (in minutes)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Permissions group POSIX acl entry absent
  description: |-
    Verify that an ace is absent on a file or directory for a given group.
    This method will make sure that no ace is present in the POSIX ACL of the target.
  documentation: "The `permissions_*acl_*` manage the POSIX ACL on files and directories.\n\nPlease note that the mask will be automatically recalculated when editing ACLs.\n\n#### Parameters\n\n##### Path\n\nPath can be a regex with the following format:\n\n* `*` matches any filename or directory at one level, e.g. `*.cf` will match all files in one directory that end in .cf but it won't search across directories. `*/*.cf` on the other hand will look two levels deep.\n* `?` matches a single letter\n* `[a-z]` matches any letter from a to z\n* `{x,y,anything}` will match x or y or anything.\n\n##### Recursive\n\nCan be:\n\n* `true` to apply the given aces to folder and sub-folders and files.\n* or `false` to apply to the strict match of `Path`\n\nIf left blank, recursivity will automatically be set to `false`\n\n##### User\n\n`Username` to enforce the ace absence, being the Linux account name.\nThis method can only handle one groupname.\n\n#### Example\n\nGiven a file with the following getfacl output:\n\n~~~~\nroot@server# getfacl /tmp/myTestFile \ngetfacl: Removing leading '/' from absolute path names\n# file: tmp/myTestFile\n# owner: root\n# group: root\nuser::rwx\ngroup::r--\ngroup:bob:rwx\nmask::rwx\nother::---\n\n~~~~\n\nApplying this method with the following parameters:\n\n* `path`: /tmp/myTestFile\n* `recursive`: false\n* `group`: bob\n\nWill transform the previous ACLs in:\n\n~~~~\nroot@server# getfacl /tmp/myTestFile \ngetfacl: Removing leading '/' from absolute path names\n# file: tmp/myTestFile\n# owner: root\n# group: root\nuser::rwx\ngroup::r--\nmask::r--\nother::---\n\n~~~~"
  supported_targets: []
  class_prefix: permissions_group_acl_absent
  class_parameter: path
  source: /home/amousset/projects/ncf/tree/30_generic_methods/permissions_group_acl_absent.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: permissions_group_acl_absent
  method_args:
  - path
  - recursive
  - group
  parameters:
    group:
      description: Group name
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    path:
      description: Path of the file or directory
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    recursive:
      description: Recursive Should ACLs cleanup be recursive, "true" or "false" (defaults to "false")
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select:
        - ''
        - 'true'
        - 'false'
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File ensure block in section
  description: Ensure that a section contains exactly a text block
  documentation: ''
  supported_targets: []
  class_prefix: file_ensure_block_in_section
  class_parameter: file
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_ensure_block_in_section.cf
  deprecated: Use [file_block_present_in_section](#_file_block_present_in_section) instead.
  rename_to: file_block_present_in_section
  action: null
  method_name: file_ensure_block_in_section
  method_args:
  - file
  - section_start
  - section_end
  - block
  parameters:
    section_start:
      description: Start of the section
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    section_end:
      description: End of the section
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    block:
      description: Block representing the content of the section
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    file:
      description: File name to edit (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Kernel module not loaded
  description: Ensure that a given kernel module is not loaded on the system
  documentation: |-
    Ensure that a given kernel module is not loaded on the system.
      If the module is loaded, it will try to unload it using modprobe.
  supported_targets: []
  class_prefix: kernel_module_not_loaded
  class_parameter: module_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/kernel_module_not_loaded.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: kernel_module_not_loaded
  method_args:
  - module_name
  parameters:
    module_name:
      description: Complete name of the kernel module, as seen by lsmod or listed in /proc/modules
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Service started with service path
  description: Ensure that a service is running using the appropriate method, specifying the path of the service in the ps output, or using Windows task manager
  documentation: ''
  supported_targets: []
  class_prefix: service_started
  class_parameter: service_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/service_started_path.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: service_started_path
  method_args:
  - service_name
  - service_path
  parameters:
    service_path:
      description: Service with its path, as in the output from 'ps'
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    service_name:
      description: Service name (as recognized by systemd, init.d, Windows, etc...)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Service restart at a condition
  description: Restart a service using the appropriate method if the specified class is true, otherwise it is considered as not required and success classes are returned.
  documentation: See [service_action](#_service_action) for documentation.
  supported_targets: []
  class_prefix: service_restart
  class_parameter: service_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/service_restart_if.cf
  deprecated: Use [service_restart](#_service_restart) with a condition
  rename_to: null
  action: null
  method_name: service_restart_if
  method_args:
  - service_name
  - trigger_class
  parameters:
    service_name:
      description: Name of the service
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    trigger_class:
      description: class(es) which will trigger the restart of Service "(package_service_installed|service_conf_changed)" by example
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Variable dict
  description: Define a variable that contains key,value pairs (a dictionary)
  documentation: "To use the generated variable, you must use the form `${variable_prefix.variable_name[key]}` with each name replaced with the parameters of this method.\n\nBe careful that using a global variable can lead to unpredictable content in case of multiple definition, which is implicitly the case when a technique has more than one instance (directive). \nPlease note that only global variables are available within templates."
  supported_targets: []
  class_prefix: variable_dict
  class_parameter: variable_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/variable_dict.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: variable_dict
  method_args:
  - variable_prefix
  - variable_name
  - value
  parameters:
    variable_name:
      description: The variable to define, the full name will be variable_prefix.variable_name
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    variable_prefix:
      description: The prefix of the variable name
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    value:
      description: The variable content in JSON format
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Service enabled at boot
  description: Force a service to be started at boot
  documentation: ''
  supported_targets: []
  class_prefix: service_enabled
  class_parameter: service_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/service_enabled.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: service_enabled
  method_args:
  - service_name
  parameters:
    service_name:
      description: Service name (as recognized by systemd, init.d, Windows, SRC, SMF, etc...)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Variable dict from osquery
  description: Define a variable that contains key,value pairs (a dictionary) from an osquery query
  documentation: "To use the generated variable, you must use the form `${variable_prefix.variable_name[key]}` with each name replaced with the parameters of this method.\n\nBe careful that using a global variable can lead to unpredictable content in case of multiple definition, which is implicitly the case when a technique has more than one instance (directive). \nPlease note that only global variables are available within templates.\n\nThis method will define a dict variable from the output of an osquery query.\nThe query will be executed at every agent run, and its result will be usable as a standard\ndict variable.\n\n#### Setup\n\nThis method requires the presence of [osquery](https://osquery.io/) on the target nodes.\nIt won't install it automatically. Check the correct way of doing so for your OS.\n\n#### Building queries\n\nTo learn about the possible queries, read the [osquery schema](https://osquery.io/schema/) for your\nosquery version.\n\nYou can test the queries before using them with the `osqueryi` command, see the example below.\n\n#### Examples\n\n```\n# To get the number of cpus on the machine\nvariable_dict_from_osquery(\"prefix\", \"var1\", \"select cpu_logical_cores from system_info;\");\n```\n\nIt will produce the dict from the output of:\n\n```\nosqueryi --json \"select cpu_logical_cores from system_info;\"\n```\n\nHence something like:\n\n```json\n[\n {\"cpu_logical_cores\":\"8\"}\n]\n```\n\nTo access this value, use the `${prefix.var1[0][cpu_logical_cores]}` syntax."
  supported_targets: []
  class_prefix: variable_dict_from_osquery
  class_parameter: variable_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/variable_dict_from_osquery.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: variable_dict_from_osquery
  method_args:
  - variable_prefix
  - variable_name
  - query
  parameters:
    variable_prefix:
      description: The prefix of the variable name
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    variable_name:
      description: The variable to define, the full name will be variable_prefix.variable_name
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    query:
      description: The query to execute (ending with a semicolon)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Directory present
  description: Create a directory if it doesn't exist
  documentation: Create a directory if it doesn't exist.
  supported_targets: []
  class_prefix: directory_present
  class_parameter: target
  source: /home/amousset/projects/ncf/tree/30_generic_methods/directory_present.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: directory_present
  method_args:
  - target
  parameters:
    target:
      description: Full path of directory to create (trailing '/' is optional)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File lines present
  description: Ensure that one or more lines are present in a file
  documentation: ''
  supported_targets: []
  class_prefix: file_lines_present
  class_parameter: file
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_lines_present.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: file_lines_present
  method_args:
  - file
  - lines
  parameters:
    file:
      description: File name to edit (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    lines:
      description: Line(s) to add in the file
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Variable iterator from file
  description: Define a variable that will be automatically iterated over
  documentation: "The generated variable is a special variable that is automatically\niterated over. When you call a generic method with this variable as a parameter, n calls will be made,\none for each items of the variable.\nNote: there is a limit of 10000 items\nNote: empty items are ignored\n\nTo use the generated variable, you must use the form `${variable_prefix.variable_name}` with each name replaced with the parameters of this method.\n\nBe careful that using a global variable can lead to unpredictable content in case of multiple definition, which is implicitly the case when a technique has more than one instance (directive). \nPlease note that only global variables are available within templates."
  supported_targets: []
  class_prefix: variable_iterator_from_file
  class_parameter: variable_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/variable_iterator_from_file.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: variable_iterator_from_file
  method_args:
  - variable_prefix
  - variable_name
  - file_name
  - separator_regex
  - comments_regex
  parameters:
    file_name:
      description: The path to the file
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    comments_regex:
      description: 'Regular expression that is used to remove comments ( usually: \s*#.*?(?=\n) )'
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    variable_name:
      description: The variable to define, the full name will be variable_prefix.variable_name
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    variable_prefix:
      description: The prefix of the variable name
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    separator_regex:
      description: 'Regular expression that is used to split the value into items ( usually: \n )'
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Service check running ps
  description: Check if a service is running using ps
  documentation: ''
  supported_targets: []
  class_prefix: service_check_running
  class_parameter: service_regex
  source: /home/amousset/projects/ncf/tree/30_generic_methods/service_check_running_ps.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: service_check_running_ps
  method_args:
  - service_regex
  parameters:
    service_regex:
      description: Regular expression used to select a process in ps output
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File ensure key -> value present with option
  description: Ensure that the file contains a pair of "key separator value", with options on the spacing around the separator
  documentation: |-
    Edit (or create) the file, and ensure it contains an entry key -> value with arbitrary separator between the key and its value.
    If the key is already present, the method will change the value associated with this key.
  supported_targets: []
  class_prefix: file_ensure_key_value
  class_parameter: file
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_ensure_key_value_option.cf
  deprecated: Use [file_key_value_present_option](#_file_key_value_present_option) instead.
  rename_to: file_key_value_present_option
  action: null
  method_name: file_ensure_key_value_option
  method_args:
  - file
  - key
  - value
  - separator
  - option
  parameters:
    value:
      description: Value to define
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    key:
      description: Key to define
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    option:
      description: 'Option for the spacing around the separator: strict, which prevent spacing (space or tabs) around separators, or lax which accepts any number of spaces around separators'
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select:
        - strict
        - lax
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    file:
      description: File name to edit (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    separator:
      description: Separator between key and value, for example "=" or " " (without the quotes)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: true
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File copy from local source with check
  description: Ensure that a file or directory is copied from a local source if a check command succeeds
  documentation: This method is a conditional file copy.
  supported_targets: []
  class_prefix: file_copy_from_local_source_with_check
  class_parameter: destination
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_copy_from_local_source_with_check.cf
  deprecated: Use [file_from_local_source_with_check](#_file_from_local_source_with_check) instead.
  rename_to: file_from_local_source_with_check
  action: null
  method_name: file_copy_from_local_source_with_check
  method_args:
  - source
  - destination
  - check_command
  - rc_ok
  parameters:
    destination:
      description: Destination file (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    check_command:
      description: Command to run, it will get the source path as argument
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    source:
      description: Source file (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    rc_ok:
      description: Return codes to be considered as valid, separated by a comma (default is 0)
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Package install version compare (update optional)
  description: Install a package or verify if it is installed in a specific version, or higher or lower version than a version specified, optionally test update or not (Debian-, Red Hat- or SUSE-like systems only)
  documentation: |-
    *Example*:
    ```
    methods:
        "any" usebundle => package_install_version_cmp_update("postgresql", ">=", "9.1", "verify", "false");
    ```
  supported_targets: []
  class_prefix: package_install
  class_parameter: package_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/package_install_version_cmp_update.cf
  deprecated: Use [package_present](#_package_present) instead.
  rename_to: null
  action: null
  method_name: package_install_version_cmp_update
  method_args:
  - package_name
  - version_comparator
  - package_version
  - action
  - update_policy
  parameters:
    version_comparator:
      description: Comparator between installed version and defined version, can be ==,<=,>=,<,>,!=
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select:
        - ==
        - <=
        - '>='
        - <
        - '>'
        - '!='
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    package_name:
      description: Name of the package to install or verify
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    package_version:
      description: The version of the package to verify (can be "latest" for latest version)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    action:
      description: Action to perform, can be add, verify (defaults to verify)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    update_policy:
      description: While verifying packages, check against latest version ("true") or just installed ("false")
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: User group
  description: Define secondary group for a user
  documentation: |-
    Ensure that a user is within a group

    #### Behavior

    Ensure that the user belongs in the given secondary group (non-exclusive)

    ##### Parameters

    `user`      : the user login
    `group_name`: secondary group name the user should belong to (non-exclusive)

    #### Examples

    To ensure that user `test` belongs in group `dev`

    ```
     user_group("test", "dev")
    ```
    Note that it will make sure that user test is in group dev, but won't remove it
    from other groups it may belong to
  supported_targets: []
  class_prefix: user_group
  class_parameter: user
  source: /home/amousset/projects/ncf/tree/30_generic_methods/user_group.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: user_group
  method_args:
  - user
  - group_name
  parameters:
    group_name:
      description: Secondary group name for the user
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    user:
      description: User login
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Service start
  description: Start a service using the appropriate method
  documentation: See [service_action](#_service_action) for documentation.
  supported_targets: []
  class_prefix: service_start
  class_parameter: service_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/service_start.cf
  deprecated: |-
    This is an action that should not be used in the general case.
    If you really want to call the start method, use [service_action](#_service_action).
    Otherwise, simply call [service_started](#_service_started)
  rename_to: null
  action: null
  method_name: service_start
  method_args:
  - service_name
  parameters:
    service_name:
      description: Name of the service
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Condition from variable existence
  description: Create a condition from the existence of a variable
  documentation: |-
    This method define a condition:
    * `{condition_prefix}_true` if the variable named from
      the parameter **Variable name** is defined
    * `{condition_prefix}_false` if the variable named from
      the parameter **Variable name** is not defined

    Also, this method always result with a *success* outcome status.
  supported_targets: []
  class_prefix: condition_from_variable_existence
  class_parameter: condition_prefix
  source: /home/amousset/projects/ncf/tree/30_generic_methods/condition_from_variable_existence.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: condition_from_variable_existence
  method_args:
  - condition_prefix
  - variable_name
  parameters:
    condition_prefix:
      description: Prefix of the condition
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    variable_name:
      description: Complete name of the variable being tested, like my_prefix.my_variable
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Directory absent
  description: Ensure a directory's absence
  documentation: If `recursive` is false, only an empty directory can be deleted.
  supported_targets: []
  class_prefix: directory_absent
  class_parameter: target
  source: /home/amousset/projects/ncf/tree/30_generic_methods/directory_absent.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: directory_absent
  method_args:
  - target
  - recursive
  parameters:
    recursive:
      description: Should deletion be recursive, "true" or "false" (defaults to "false")
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    target:
      description: Directory to remove
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Service check started at boot
  description: |-
    Check if a service is set to start at boot using the appropriate method


    This bundle will define a condition service_check_started_at_boot_${service_name}_{kept,ok,not_ok,failed,reached}
  documentation: ''
  supported_targets: []
  class_prefix: service_check_started_at_boot
  class_parameter: service_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/service_check_started_at_boot.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: service_check_started_at_boot
  method_args:
  - service_name
  parameters:
    service_name:
      description: Service name (as recognized by systemd, init.d, etc...)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Variable dict merge tolerant
  description: Define a variable resulting of the merge of two other variables, allowing merging undefined variables
  documentation: |-
    To use the generated variable, you must use the form `${variable_prefix.variable_name[key]}` with each name replaced with the parameters of this method.

    See [variable_dict_merge](#_variable_dict_merge) for usage documentation. The only difference is that this method
    will not fail if one of the variables do not exist, and will return the other one. If both are undefined, the method will still fail.
  supported_targets: []
  class_prefix: variable_dict_merge_tolerant
  class_parameter: variable_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/variable_dict_merge_tolerant.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: variable_dict_merge_tolerant
  method_args:
  - variable_prefix
  - variable_name
  - first_variable
  - second_variable
  parameters:
    second_variable:
      description: The second variable, which content will override the first in the resulting variable if necessary (written in the form variable_prefix.variable_name)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    first_variable:
      description: The first variable, which content will be overridden in the resulting variable if necessary (written in the form variable_prefix.variable_name)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    variable_name:
      description: The variable to define, the full name will be variable_prefix.variable_name
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    variable_prefix:
      description: The prefix of the variable name
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Permissions POSIX ACLs absent
  description: Ensure that files or directories has no ACLs set
  documentation: "The `permissions_*acl_*` manage the POSIX ACL on files and directories.\n\n#### Parameters\n\n##### Path\n\nPath can be globbing with the following format:\n\n* * matches any filename or directory at one level, e.g. *.cf will match all files in one directory that end in .cf but it won't search across directories. */*.cf on the other hand will look two levels deep.\n* ? matches a single letter\n* [a-z] matches any letter from a to z\n* {x,y,anything} will match x or y or anything.\n\n##### Recursive\n\nCan be:\n\n* `true` to apply the given aces to folder and sub-folders and files.\n* or `false` to apply to the strict match of `Path`\n\nIf left blank, recursivity will automatically be set to `false`\n\n#### Example\nThe method has basically the same effect as `setfacl -b <path>`.\n\nGiven a file with the following getfacl output:\n\n~~~~\nroot@server# getfacl /tmp/myTestFile \ngetfacl: Removing leading '/' from absolute path names\n# file: tmp/myTestFile\n# owner: root\n# group: root\nuser::rwx\nuser:vagrant:rwx\ngroup::r--\nmask::rwx\nother::---\n\n~~~~\n\nIt will remove all ACLs, and only let classic rights, here:\n\n~~~~\nroot@server# getfacl myTestFile \n# file: myTestFile\n# owner: root\n# group: root\nuser::rwx\ngroup::r--\nother::---\n\nroot@server# ls -l myTestFile\n-rwxr----- 1 root root 0 Mar 22 11:24 myTestFile\nroot@server# \n\n~~~~"
  supported_targets: []
  class_prefix: permissions_posix_acls_absent
  class_parameter: path
  source: /home/amousset/projects/ncf/tree/30_generic_methods/permissions_posix_acls_absent.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: permissions_posix_acls_absent
  method_args:
  - path
  - recursive
  parameters:
    path:
      description: Path of the file or directory
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    recursive:
      description: Should ACLs cleanup be recursive, "true" or "false" (defaults to "false")
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select:
        - ''
        - 'true'
        - 'false'
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File from template with type
  description: Build a file from a template
  documentation: "These methods write a file based on a provided template and the\ndata available to the agent.\n\n#### Usage\n\nTo use these methods (`file_from_template_*`), you need to have:\n\n* a template file\n* data to fill this template\n\nThe template file should be somewhere on the local file system, so\nif you want to use a file shared from the policy server, you need to copy \nit first (using [file_copy_from_remote_source](#_file_copy_from_remote_source)).\n\nIt is common to use a specific folder to store those templates after copy,\nfor example in `${sys.workdir}/tmp/templates/`.\n\nThe data that will be used while expanding the template is the data available in\nthe agent at the time of expansion. That means:\n\n* Agent's system variables (`${sys.*}`, ...) and conditions (`linux`, ...)\n* data defined during execution (result conditions of generic methods, ...)\n* conditions based on `condition_` generic methods\n* data defined in ncf using `variable_*` generic methods, which allow for example\n  to load data from local json or yaml files.\n\n#### Template types\n\nncf currently supports three templating languages:\n\n* *mustache* templates, which are documented in [file_from_template_mustache](#_file_from_template_mustache)\n* *jinja2* templates, which are documented in [file_from_template_jinja2](#_file_from_template_jinja2)\n* CFEngine templates, which are a legacy implementation that is here for compatibility,\nand should not be used for new templates.\n\n#### Example\n\nHere is a complete example of templating usage:\n\nThe (basic) template file, present on the server in `/PATH_TO_MY_FILE/ntp.conf.mustache`\n(for syntax reference, see [file_from_template_mustache](#_file_from_template_mustache)):\n\n```mustache\n{{#classes.linux}}\nserver {{{vars.configuration.ntp.hostname}}}\n{{/classes.linux}}\n{{^classes.linux}}\nserver hardcoded.server.example\n{{/classes.linux}}\n\n```\n\nAnd on your local node in `/tmp/ntp.json`, the following json file:\n\n```json\n{ \"hostname\": \"my.hostname.example\" }\n```\n\nAnd the following policy:\n\n```\n# Copy the file from the policy server\nfile_copy_from_remote_source(\"/PATH_TO_MY_FILE/ntp.conf.mustache\", \"${sys.workdir}/tmp/templates/ntp.conf.mustache\")\n# Define the `ntp` variable in the `configuration` prefix from the json file\nvariable_dict_from_file(\"configuration\", \"ntp\", \"/tmp/ntp.json\")\n# Expand yout template\nfile_from_template_type(\"${sys.workdir}/tmp/templates/ntp.conf.mustache\", \"/etc/ntp.conf\", \"mustache\")\n# or\n# file_from_template_mustache(\"${sys.workdir}/tmp/templates/ntp.conf.mustache\", \"/etc/ntp.conf\")\n```\n\nThe destination file will contain the expanded content, for example on a Linux node:\n\n```\nserver my.hostname.example\n```"
  supported_targets: []
  class_prefix: file_from_template
  class_parameter: destination
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_from_template_type.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: file_from_template_type
  method_args:
  - source_template
  - destination
  - template_type
  parameters:
    template_type:
      description: Template type (cfengine, jinja2 or mustache)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    source_template:
      description: Source file containing a template to be expanded (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    destination:
      description: Destination file (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Permissions POSIX acl entry
  description: |-
    Verify that an ace is present on a file or directory.
    This method will append the given aces to the current POSIX ACLs of
    the target.
  documentation: |-
    The `permissions_*acl_*` manage the POSIX ACL on files and directories.

    Please note that the mask will be automatically recalculated when editing ACLs.

    #### Parameters

    ##### Path

    Path can be a regex with the following format:

    * `*` matches any filename or directory at one level, e.g. `*.cf` will match all files in one directory that end in .cf but it won't search across directories. `*/*.cf` on the other hand will look two levels deep.
    * `?` matches a single letter
    * `[a-z]` matches any letter from a to z
    * `{x,y,anything}` will match x or y or anything.

    ##### Recursive

    Can be:

    * `true` to apply the given aces to folder and sub-folders and files.
    * or `false` to apply to the strict match of `Path`

    If left blank, recursivity will automatically be set to `false`

    ##### User and Group

    ACE for user and group  can be left blank if they do not need any specification.
    If fulfill, they must respect the format:

    `<username|groupname>:<operator><mode>`

    with:

    * `username` being the Linux account name
    * `groupname` the Linux group name
    * Current `owner user` and `owner group` can be designed by the character `*`

    The operator can be:
    * `+` to add the given ACE to the current ones.
    * `-` to remove the given ACE to the current ones.
    * `=` to force the given ACE to the current ones.

    You can define multiple ACEs by separating them with commas.

    ##### Other

    ACE for other must respect the classic:

    * `[+-=]r?w?x?`
    It can also be left blank to let the `Other` ACE unchanged.

    #### Example

    Given a file with the following getfacl output:

    ~~~~
    root@server# getfacl /tmp/myTestFile
    getfacl: Removing leading '/' from absolute path names
    # file: tmp/myTestFile
    # owner: root
    # group: root
    user::rwx
    user:bob:rwx
    group::r--
    mask::rwx
    other::---

    ~~~~

    Applying this method with the following parameters:

    * `path`: /tmp/myTestFile
    * `recursive`: false
    * `user`: *:-x, bob:
    * `group`: *:+rw
    * `other`: =r

    Will transform the previous ACLs in:

    ~~~~
    root@server# getfacl /tmp/myTestFile
    getfacl: Removing leading '/' from absolute path names
    # file: tmp/myTestFile
    # owner: root
    # group: root
    user::rw-
    user:bob:---
    group::rw-
    mask::rw-
    other::r--

    ~~~~

    This method can not remove a given ACE, see here how the user bob ACE is handled.
  supported_targets: []
  class_prefix: permissions_acl_entry
  class_parameter: path
  source: /home/amousset/projects/ncf/tree/30_generic_methods/permissions_acl_entry.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: permissions_acl_entry
  method_args:
  - path
  - recursive
  - user
  - group
  - other
  parameters:
    recursive:
      description: Recursive Should ACLs cleanup be recursive, "true" or "false" (defaults to "false")
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select:
        - ''
        - 'true'
        - 'false'
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    group:
      description: 'Group acls, comma separated, like: wheel:+wx, anon:-rwx'
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: ^$|^(([A-z0-9._-]+|\*):([+-=]r?w?x?)?,? *)+$
        max_length: 16384
      renamed_to: null
      p_type: String
    other:
      description: Other acls, like -x
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: ^$|^[+-=^]r?w?x?$
        max_length: 16384
      renamed_to: null
      p_type: String
    user:
      description: 'User acls, comma separated, like: bob:+rwx, alice:-w'
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: ^$|^(([A-z0-9._-]+|\*):([+-=]r?w?x?)?,? *)+$
        max_length: 16384
      renamed_to: null
      p_type: String
    path:
      description: Path of the file or directory
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Permissions other POSIX acl entry present
  description: |-
    Verify that the other ace given is present on a file or directory.
    This method will make sure the given other ace is present in the POSIX ACL of the target for.
  documentation: "The `permissions_*acl_*` manage the POSIX ACL on files and directories.\n\nPlease note that the mask will be automatically recalculated when editing ACLs.\n\n#### Parameters\n\n##### Path\n\nPath can be a regex with the following format:\n\n* `*` matches any filename or directory at one level, e.g. `*.cf` will match all files in one directory that end in .cf but it won't search across directories. `*/*.cf` on the other hand will look two levels deep.\n* `?` matches a single letter\n* `[a-z]` matches any letter from a to z\n* `{x,y,anything}` will match x or y or anything.\n\n##### Recursive\n\nCan be:\n\n* `true` to apply the given aces to folder and sub-folders and files.\n* or `false` to apply to the strict match of `Path`\n\nIf left blank, recursivity will automatically be set to `false`\n\n##### Other_ACE\n\nThe operator can be:\n* `+` to add the given ACE to the current ones.\n* `-` to remove the given ACE to the current ones.\n* `=` to force the given ACE to the current ones.\n* `empty` if no operator is specified, it will be interpreted as `=`.\n\nACE must respect the classic:\n\n* `^[+-=]?(?=.*[rwx])r?w?x?$`\n\n#### Example\n\nGiven a file with the following getfacl output:\n\n~~~~\nroot@server# getfacl /tmp/myTestFile \ngetfacl: Removing leading '/' from absolute path names\n# file: tmp/myTestFile\n# owner: root\n# group: root\nuser::rwx\nuser:bob:rwx\ngroup::r--\nmask::rwx\nother::r-x\n\n~~~~\n\nApplying this method with the following parameters:\n\n* `path`: /tmp/myTestFile\n* `recursive`: false\n* `other ace`: -rw\n\nWill transform the previous ACLs in:\n\n~~~~\nroot@server# getfacl /tmp/myTestFile \ngetfacl: Removing leading '/' from absolute path names\n# file: tmp/myTestFile\n# owner: root\n# group: root\nuser::rwx\nuser:bob:rwx\ngroup::r--\nmask::rwx\nother::--x\n\n~~~~"
  supported_targets: []
  class_prefix: permissions_other_acl_present
  class_parameter: path
  source: /home/amousset/projects/ncf/tree/30_generic_methods/permissions_other_acl_present.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: permissions_other_acl_present
  method_args:
  - path
  - recursive
  - other
  parameters:
    path:
      description: Path of the file or directory
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    recursive:
      description: Recursive Should ACLs cleanup be recursive, "true" or "false" (defaults to "false")
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select:
        - ''
        - 'true'
        - 'false'
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    other:
      description: ACE to enforce for the given other.
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: ^[+-=]?(?=.*[rwx])r?w?x?$
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File from remote source
  description: Ensure that a file or directory is copied from a policy server
  documentation: |-
    *Note*: This method uses the agent native file copy protocol, and can only download files from
    the policy server. To download a file from an external source, you can use
    HTTP with the [file_download](#_file_download) method.

    This method requires that the policy server is configured to accept
    copy of the source file from the agents it will be applied to.

    You can download a file from the shared files with:
    ```
    /var/rudder/configuration-repository/shared-files/PATH_TO_YOUR_FILE
    ```
  supported_targets: []
  class_prefix: file_from_remote_source
  class_parameter: destination
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_from_remote_source.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: file_from_remote_source
  method_args:
  - source
  - destination
  parameters:
    source:
      description: Source file (absolute path on the policy server)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    destination:
      description: Destination file (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File key-value in INI section
  description: Ensure that a key-value pair is present in a section in a specific location. The objective of this method is to handle INI-style files.
  documentation: ''
  supported_targets: []
  class_prefix: file_key_value_present_in_ini_section
  class_parameter: file
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_key_value_present_in_ini_section.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: file_key_value_present_in_ini_section
  method_args:
  - file
  - section
  - name
  - value
  parameters:
    file:
      description: File name to edit (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    section:
      description: Name of the INI-style section under which the line should be added or modified (not including the [] brackets)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    name:
      description: Name of the key to add or edit
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    value:
      description: Value of the key to add or edit
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Condition from variable match
  description: Test the content of a string variable
  documentation: |-
    Test a variable content and create conditions depending on its value:
    * If the variable **is found and its content matches** the given regex:
        * a `${condition_prefix}_true` condition,
        * and **kept outcome** status
    * If the variable **is found but its content does not match** the given regex:
        * a `${condition_prefix}_false` condition,
        * and a **kept outcome** status
    * If the variable **can not be found**:
        * a `${condition_prefix}_false` condition
        * and an **error outcome** status

    /!\ Regex for unix machine must be PCRE compatible and those for Windows agent must respect the .Net regex format.

    * If you want to test a technique parameter, use the `technique_id` of the technique
      as variable prefix and the`parameter_name` as variable name.
  supported_targets: []
  class_prefix: condition_from_variable_match
  class_parameter: condition_prefix
  source: /home/amousset/projects/ncf/tree/30_generic_methods/condition_from_variable_match.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: condition_from_variable_match
  method_args:
  - condition_prefix
  - variable_name
  - expected_match
  parameters:
    variable_name:
      description: Complete name of the variable being tested, like my_prefix.my_variable
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    expected_match:
      description: Regex to use to test if the variable content is compliant
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    condition_prefix:
      description: Prefix of the class (condition) generated
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File key-value present
  description: Ensure that the file contains a pair of "key separator value"
  documentation: |-
    Edit (or create) the file, and ensure it contains an entry key -> value with arbitrary separator between the key and its value.
    If the key is already present, the method will change the value associated with this key.
  supported_targets: []
  class_prefix: file_key_value_present
  class_parameter: file
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_key_value_present.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: file_key_value_present
  method_args:
  - file
  - key
  - value
  - separator
  parameters:
    file:
      description: File name to edit (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    value:
      description: Value to define
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    key:
      description: Key to define
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    separator:
      description: Separator between key and value, for example "=" or " " (without the quotes)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: true
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Permissions (non recursive)
  description: Set permissions on a file or directory (non recursively)
  documentation: ''
  supported_targets: []
  class_prefix: permissions
  class_parameter: path
  source: /home/amousset/projects/ncf/tree/30_generic_methods/permissions.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: permissions
  method_args:
  - path
  - mode
  - owner
  - group
  parameters:
    path:
      description: Path to the file/directory
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    owner:
      description: Owner to enforce (like "root")
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    group:
      description: Group to enforce (like "wheel")
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    mode:
      description: Mode to enforce (like "640")
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Create symlink
  description: Create a symlink at a destination path and pointing to a source target except if a file or directory already exists.
  documentation: ''
  supported_targets: []
  class_prefix: file_create_symlink
  class_parameter: destination
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_create_symlink.cf
  deprecated: Use [file_symlink_present](#_file_symlink_present) instead.
  rename_to: file_symlink_present
  action: null
  method_name: file_create_symlink
  method_args:
  - source
  - destination
  parameters:
    source:
      description: Source file (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    destination:
      description: Destination file (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Service ensure disabled at boot
  description: Force a service not to be enabled at boot
  documentation: ''
  supported_targets: []
  class_prefix: service_ensure_disabled_at_boot
  class_parameter: service_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/service_ensure_disabled_at_boot.cf
  deprecated: Use [service_disabled_at_boot](#_service_disabled_at_boot) instead.
  rename_to: service_disabled_at_boot
  action: null
  method_name: service_ensure_disabled_at_boot
  method_args:
  - service_name
  parameters:
    service_name:
      description: Service name (as recognized by systemd, init.d, etc...)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File ensure keys -> values present
  description: Ensure that the file contains all pairs of "key separator value", with arbitrary separator between each key and its value
  documentation: |-
    This method ensures key-value pairs are present in a file.

    #### Usage

    This method will iterate over the key-value pairs in the dict, and:

    * If the key is not defined in the destination, add the *key* + *separator* + *value* line.
    * If the key is already present in the file, replace the *key* + *separator* + anything by *key* + *separator* + *value*

    This method always ignores spaces and tabs when replacing (which means for example that `key = value` will match the `=` separator).

    Keys are considered unique (to allow replacing the value), so you should use [file_ensure_lines_present](#_file_ensure_lines_present)
    if you want to have multiple lines with the same key.

    #### Example

    If you have an initial file (`/etc/myfile.conf`) containing:

    ```
    key1 = something
    key3 = value3
    ```

    To define key-value pairs, use the [variable_dict](#_variable_dict) or
    [variable_dict_from_file](#_variable_dict_from_file) methods.

    For example, if you use the following content (stored in `/tmp/data.json`):

    ```json
    {
       "key1": "value1",
       "key2": "value2"
    }
    ```

    With the following policy:

    ```
    # Define the `content` variable in the `configuration` prefix from the json file
    variable_dict_from_file("configuration", "content", "/tmp/data.json")
    # Enforce the presence of the key-value pairs
    file_ensure_keys_values("/etc/myfile.conf", "configuration.content", " = ")

    ```

    The destination file (`/etc/myfile.conf`) will contain:

    ```
    key1 = value1
    key3 = value3
    key2 = value2
    ```
  supported_targets: []
  class_prefix: file_ensure_keys_values
  class_parameter: file
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_ensure_keys_values.cf
  deprecated: Use [file_keys_values_present](#_file_keys_values_present) instead.
  rename_to: file_keys_values_present
  action: null
  method_name: file_ensure_keys_values
  method_args:
  - file
  - keys
  - separator
  parameters:
    keys:
      description: Name of the dict structure (without "${}") containing the keys (keys of the dict), and values to define (values of the dict)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    separator:
      description: Separator between key and value, for example "=" or " " (without the quotes)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: true
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    file:
      description: File name to edit (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Command execution result
  description: Execute a command and create result conditions depending on its exit code
  documentation: |-
    Execute a command and create result conditions
    depending on the exit codes given in parameters.
    If an exit code is not in the list it will lead to an error status.
    If you want 0 to be a success you have to list it in the **kept_codes** list
  supported_targets: []
  class_prefix: command_execution_result
  class_parameter: command
  source: /home/amousset/projects/ncf/tree/30_generic_methods/command_execution_result.cf
  deprecated: null
  rename_to: null
  action: ''
  method_name: command_execution_result
  method_args:
  - command
  - kept_codes
  - repaired_codes
  parameters:
    command:
      description: Command to run
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    kept_codes:
      description: 'List of codes that produce a kept status separated with commas (ex: 1,2,5)'
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    repaired_codes:
      description: 'List of codes that produce a repaired status separated with commas (ex: 3,4,6)'
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Condition from expression
  description: Create a new condition
  documentation: |-
    This method evaluates an expression, and produces a `${condition_prefix}_true`
    or a `${condition_prefix}_false` condition depending on the result of the
    expression evaluation:

    * This method always result with a *success* outcome status
    * If the evaluation results in a "defined" state, this will define a
       `${condition_prefix}_true` condition,
    * If the evaluation results in an "undefined" state, this will produce a
       `${condition_prefix}_false` condition.


    Calling this method with a condition expression transforms a complex expression into a single condition.

    The created condition is global to the agent.

    ##### Example

    If you want to check if a condition evaluates to true, like checking that you
    are on Monday, 2am, on RedHat systems, you can use the following policy

    ```
    condition_from_expression("backup_time", "Monday.redhat.Hr02")
    ```

    The method will define:
    * In any case:
         * `condition_from_expression_backup_time_kept`
         * `condition_from_expression_backup_time_reached`
    * And:
        * `backup_time_true` if the system is a RedHat like system, on Monday, at 2am.
        * `backup_time_false` if the system not a RedHat like system, or it's not Monday, or it's not 2am
        * no extra condition if the expression is invalid (cannot be parsed)

    ##### Notes:

    Rudder will automatically "canonify" the given **Condition prefix** at execution time,
    which means that all non `[a-zA-Z0-9_]` characters will be replaced by an underscore.
  supported_targets: []
  class_prefix: condition_from_expression
  class_parameter: condition_prefix
  source: /home/amousset/projects/ncf/tree/30_generic_methods/condition_from_expression.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: condition_from_expression
  method_args:
  - condition_prefix
  - condition_expression
  parameters:
    condition_expression:
      description: The expression evaluated to create the condition (use 'any' to always evaluate to true)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    condition_prefix:
      description: The condition prefix
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Symlink present (force overwrite)
  description: Create a symlink at a destination path and pointing to a source target even if a file or directory already exists.
  documentation: ''
  supported_targets: []
  class_prefix: file_symlink_present
  class_parameter: destination
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_symlink_present_force.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: file_symlink_present_force
  method_args:
  - source
  - destination
  parameters:
    source:
      description: Source file (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    destination:
      description: Destination file (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Permissions dirs recursive
  description: Verify if a directory has the right permissions recursively
  documentation: ''
  supported_targets: []
  class_prefix: permissions
  class_parameter: path
  source: /home/amousset/projects/ncf/tree/30_generic_methods/permissions_dirs_recursive.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: permissions_dirs_recursive
  method_args:
  - path
  - mode
  - owner
  - group
  parameters:
    mode:
      description: Mode to enforce
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    path:
      description: Path to the directory
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    owner:
      description: Owner to enforce
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    group:
      description: Group to enforce
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Directory create
  description: Create a directory if it doesn't exist
  documentation: ''
  supported_targets: []
  class_prefix: directory_create
  class_parameter: target
  source: /home/amousset/projects/ncf/tree/30_generic_methods/directory_create.cf
  deprecated: Use [directory_present](#_directory_present) instead.
  rename_to: directory_present
  action: null
  method_name: directory_create
  method_args:
  - target
  parameters:
    target:
      description: Full path of directory to create (trailing '/' is optional)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File Augeas commands
  description: Use Augeas binaries to execute augtool commands and options directly on the agent.
  documentation: |-
    Augeas is a tool that provides an abstraction layer for all the complexities that turn around editing files with regular expressions.

    This method defines a rudder variable from the output of a `augtool` command. The method has in total 4 parameters:

    * **variable_prefix**: target variable prefix
    * **variable_name**: target variable name
    * **commands**: augtool script to run
    * **autoload**: boolean to load or not the common augeas lens, default to `true`

    Augtool provides bunch of other commands and options that you can use in this generic method such as `match` to print the matches for a specific
    path expression, `span` to print position in input file corresponding to tree, `retrieve` to transform tree into text and `save` to save all pending changes.
    If Augeas isn't installed on the agent, it will produces an error.

    This method will execute the **commands** via `augtool`.
    The particular thing you may want to do with this method is using it depending on you needs and in two cases.

    #### With autoload

    Augeas will accordingly load all files and lenses before executing the commands you have specified since **autoload** is active.

    ```
    file_augeas_commands("label","value","print /files/etc/hosts/*/ipaddr[../canonical="server.rudder.local"]","")
    # The variable label.value will be defined as such:
    ${label.value} -> /files/etc/hosts/2/ipaddr = "192.168.2.2"
    ```

    ```
    file_augeas_commands("label","value","ls files/etc/ \n print /files/etc/ssh/sshd_config","true")
    # Will define the variable label.value with the list of files availables in /etc and already parsable with augeas,
    # followed by the dump of the sshd_config file, parsed by augeas.
    ```

    #### Without autoload

    The second case is when you deactivate that option which means that you are specifying **autoload** to `false` and in this case you have to
    load manually your files and lenses in the **commands** parameter by using the `set` augeas command.
    Below is a second example where the lens and file are explicitly set:

    ```
    file_augeas_commands("label","value","set /augeas/load/Sshd/lens "Sshd.lns \n set /augeas/load/Sshd/incl "/etc/ssh/sshd_config" \n load \n print /augeas/load/Sshd \n print /augeas/load/Sshd \n print /files/etc/ssh/sshd_config","false")
    ```
  supported_targets: []
  class_prefix: file_augeas_commands
  class_parameter: variable_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_augeas_commands.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: file_augeas_commands
  method_args:
  - variable_prefix
  - variable_name
  - commands
  - autoload
  parameters:
    variable_name:
      description: The variable to define, the full name will be variable_prefix.variable_name
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    variable_prefix:
      description: The prefix of the variable name
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    commands:
      description: The augeas command(s)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    autoload:
      description: Deactivate the `autoload` option if you don't want augeas to load all the files/lens, it's `true` by default.
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select:
        - ''
        - 'true'
        - 'false'
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File report content tail
  description: Report the tail of a file
  documentation: |-
    Report the tail of a file.

    This method does nothing on the system, but only reports a partial content
    from a given file. This allows centralizing this information on the server, and avoid
    having to connect on each node to get this information.

    NOTE: This method only works in "Full Compliance" reporting mode.

    #### Parameters

    ##### Target

    This is the file you want to report content from. The method will return an error if it
    does not exist.

    ##### Limit

    The number of line to report.

    #### Examples

    ```
    # To get the 3 first line of /etc/hosts
    file_report_content("/etc/hosts", "3");
    ```
  supported_targets: []
  class_prefix: file_report_content_tail
  class_parameter: target
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_report_content_tail.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: file_report_content_tail
  method_args:
  - target
  - limit
  parameters:
    limit:
      description: Number of lines to report (default is 10)
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: ^\d*$
        max_length: 16384
      renamed_to: null
      p_type: String
    target:
      description: File to report content from
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Service check running
  description: Check if a service is running using the appropriate method
  documentation: ''
  supported_targets: []
  class_prefix: service_check_running
  class_parameter: service_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/service_check_running.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: service_check_running
  method_args:
  - service_name
  parameters:
    service_name:
      description: Process name
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File key-value parameter in list
  description: Ensure that one parameter exists in a list of parameters, on one single line, in the right hand side of a key->values line
  documentation: |-
    Edit the file, and ensure it contains the defined parameter in the list of values on the right hand side of a key->values line.
    If the parameter is not there, it will be added at the end, separated by parameter_separator.
    Optionnaly, you can define leading and closing character to enclose the parameters
    If the key does not exist in the file, it will be added in the file, along with the parameter

    #### Example

    If you have an initial file (`/etc/default/grub`) containing

    ```
    GRUB_CMDLINE_XEN="dom0_mem=16G"
    ```

    To add parameter `dom0_max_vcpus=32` in the right hand side of the line, you'll need the following policy

    ```
    file_ensure_key_value_parameter_in_list("/etc/default/grub", "GRUB_CMDLINE", "=", "dom0_max_vcpus=32", " ", "\"", "\"");
    ```
  supported_targets: []
  class_prefix: file_key_value_parameter_present_in_list
  class_parameter: file
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_key_value_parameter_present_in_list.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: file_key_value_parameter_present_in_list
  method_args:
  - file
  - key
  - key_value_separator
  - parameter
  - parameter_separator
  - leading_char_separator
  - closing_char_separator
  parameters:
    key_value_separator:
      description: character used to separate key and value in a key-value line
      constraints:
        allow_empty_string: false
        allow_whitespace_string: true
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    file:
      description: File name to edit (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    parameter:
      description: String representing the sub-value to ensure is present in the list of parameters that form the value part of that line
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    closing_char_separator:
      description: closing character of the parameters
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    key:
      description: Full key name
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    parameter_separator:
      description: Character used to separate parameters in the list
      constraints:
        allow_empty_string: false
        allow_whitespace_string: true
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    leading_char_separator:
      description: leading character of the parameters
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: User locked
  description: Ensure the user is locked. User must already exist.
  documentation: |-
    This method does not create the user. Note that locked accounts will
      be marked with "!" in /etc/shadow, which is equivalent to "*".
      To unlock a user, apply a user_password method.
  supported_targets: []
  class_prefix: user_locked
  class_parameter: login
  source: /home/amousset/projects/ncf/tree/30_generic_methods/user_locked.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: user_locked
  method_args:
  - login
  parameters:
    login:
      description: User's login
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Schedule Simple
  description: Trigger a repaired outcome when a job should be run
  documentation: |-
    This method compute the expected time for running the job, based on the parameters and splayed uing system ids, and define a conditions based on this computation:

     * `schedule_simple_${job_id}_kept` if the job should not be run now
     * `schedule_simple_${job_id}_repaired` if the job should be run
     * `schedule_simple_${job_id}_error` if their is an inconsistency in the method parameters

    #### Example

    If you want to run a job, at every hour and half-hour (0:00 and 0:30),
    with no spread across system, with an agent running with default schedule
    of 5 minutes, and making sure that the job is run (if the agent couldn't
    run it, then at the next agent execution the job should be run), you will
    call the method with the following parameters:

    ```
    schedule_simple("job_schedule_id", "5", "0", "0",  "0", "0", "0",  "30", "0", "0", "catchup")
    ```

    During each run right after o'clock and half-hour, this method will define the condition
    schedule_simple_job_schedule_id_repaired, that you can use as a condition for a generic
    method `command_execution`
  supported_targets: []
  class_prefix: schedule_simple
  class_parameter: job_id
  source: /home/amousset/projects/ncf/tree/30_generic_methods/schedule_simple.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: ''
  method_args: []
  parameters:
    periodicity_hours:
      description: Desired job run interval (in hours)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    mode:
      description: '"nodups": avoid duplicate runs in the same period / "catchup": avoid duplicates and one or more run have been missed, run once before next period / "stateless": no check is done on past runs'
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    max_execution_delay_minutes:
      description: On how many minutes you want to spread the job
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    start_on_hours:
      description: At which hour should be the first run
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    periodicity_minutes:
      description: Desired job run interval (in minutes)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    agent_periodicity:
      description: Agent run interval (in minutes)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    periodicity_days:
      description: Desired job run interval (in days)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    max_execution_delay_hours:
      description: On how many hours you want to spread the job
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    job_id:
      description: A string to identify this job
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    start_on_day_of_week:
      description: At which day of week should be the first run
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    start_on_minutes:
      description: At which minute should be the first run
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File report content head
  description: Report the head of a file
  documentation: |-
    Report the head of a file.

    This method does nothing on the system, but only reports a partial content
    from a given file. This allows centralizing this information on the server, and avoid
    having to connect on each node to get this information.

    NOTE: This method only works in "Full Compliance" reporting mode.

    #### Parameters

    ##### Target

    This is the file you want to report content from. The method will return an error if it
    does not exist.

    ##### Limit

    The number of line to report.

    #### Examples

    ```
    # To get the 3 first line of /etc/hosts
    file_report_content("/etc/hosts", "3");
    ```
  supported_targets: []
  class_prefix: file_report_content_head
  class_parameter: target
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_report_content_head.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: file_report_content_head
  method_args:
  - target
  - limit
  parameters:
    limit:
      description: Number of lines to report (default is 10)
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: ^\d*$
        max_length: 16384
      renamed_to: null
      p_type: String
    target:
      description: File to report content from
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: User uid
  description: Define the uid of the user. User must already exists, uid must be non-allowed(unique).
  documentation: This method does not create the user.
  supported_targets: []
  class_prefix: user_uid
  class_parameter: login
  source: /home/amousset/projects/ncf/tree/30_generic_methods/user_uid.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: user_uid
  method_args:
  - login
  - uid
  parameters:
    uid:
      description: User's uid
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    login:
      description: User's login
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File absent
  description: Remove a file if it exists
  documentation: ''
  supported_targets: []
  class_prefix: file_absent
  class_parameter: target
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_absent.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: file_absent
  method_args:
  - target
  parameters:
    target:
      description: File to remove (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Service check disabled at boot
  description: |-
    Check if a service is set to not start at boot using the appropriate method


    This bundle will define a condition service_check_disabled_at_boot_${service_name}_{kept,ok,not_ok,failed,reached}
  documentation: ''
  supported_targets: []
  class_prefix: service_check_disabled_at_boot
  class_parameter: service_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/service_check_disabled_at_boot.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: service_check_disabled_at_boot
  method_args:
  - service_name
  parameters:
    service_name:
      description: Service name (as recognized by systemd, init.d, etc...)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File keys-values present
  description: Ensure that the file contains all pairs of "key separator value", with arbitrary separator between each key and its value
  documentation: |-
    This method ensures key-value pairs are present in a file.

    #### Usage

    This method will iterate over the key-value pairs in the dict, and:

    * If the key is not defined in the destination, add the *key* + *separator* + *value* line.
    * If the key is already present in the file, replace the *key* + *separator* + anything by *key* + *separator* + *value*

    This method always ignores spaces and tabs when replacing (which means for example that `key = value` will match the `=` separator).

    Keys are considered unique (to allow replacing the value), so you should use [file_ensure_lines_present](#_file_ensure_lines_present)
    if you want to have multiple lines with the same key.

    #### Example

    If you have an initial file (`/etc/myfile.conf`) containing:

    ```
    key1 = something
    key3 = value3
    ```

    To define key-value pairs, use the [variable_dict](#_variable_dict) or
    [variable_dict_from_file](#_variable_dict_from_file) methods.

    For example, if you use the following content (stored in `/tmp/data.json`):

    ```json
    {
       "key1": "value1",
       "key2": "value2"
    }
    ```

    With the following policy:

    ```
    # Define the `content` variable in the `configuration` prefix from the json file
    variable_dict_from_file("configuration", "content", "/tmp/data.json")
    # Enforce the presence of the key-value pairs
    file_ensure_keys_values("/etc/myfile.conf", "configuration.content", " = ")

    ```

    The destination file (`/etc/myfile.conf`) will contain:

    ```
    key1 = value1
    key3 = value3
    key2 = value2
    ```
  supported_targets: []
  class_prefix: file_keys_values_present
  class_parameter: file
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_keys_values_present.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: file_keys_values_present
  method_args:
  - file
  - keys
  - separator
  parameters:
    separator:
      description: Separator between key and value, for example "=" or " " (without the quotes)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: true
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    file:
      description: File name to edit (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    keys:
      description: Name of the dict structure (without "${}") containing the keys (keys of the dict), and values to define (values of the dict)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Variable iterator
  description: Define a variable that will be automatically iterated over
  documentation: "The generated variable is a special variable that is automatically\niterated over. When you call a generic method with this variable as a parameter, n calls will be made,\none for each items of the variable.\nNote: there is a limit of 10000 items \n\nTo use the generated variable, you must use the form `${variable_prefix.variable_name}` with each name replaced with the parameters of this method.\n\nBe careful that using a global variable can lead to unpredictable content in case of multiple definition, which is implicitly the case when a technique has more than one instance (directive). \nPlease note that only global variables are available within templates."
  supported_targets: []
  class_prefix: variable_iterator
  class_parameter: variable_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/variable_iterator.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: variable_iterator
  method_args:
  - variable_prefix
  - variable_name
  - value
  - separator
  parameters:
    variable_prefix:
      description: The prefix of the variable name
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    variable_name:
      description: The variable to define, the full name will be variable_prefix.variable_name
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    separator:
      description: 'Regular expression that is used to split the value into items ( usually: , )'
      constraints:
        allow_empty_string: false
        allow_whitespace_string: true
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    value:
      description: The variable content
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Variable string match
  description: Test the content of a string variable
  documentation: |-
    Test a variable content and report a success if it matched, or an error if it does not or if the variable could not be found.
     Regex must respect PCRE format.
     Please note that this method is designed to only audit a variable state. If you want to use conditions resulting from this generic method,
     is it recommended to use instead condition_from_variable_match which is designed for it.
  supported_targets: []
  class_prefix: variable_string_match
  class_parameter: variable_name
  source: /home/amousset/projects/ncf/tree/30_generic_methods/variable_string_match.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: variable_string_match
  method_args:
  - variable_name
  - expected_match
  parameters:
    expected_match:
      description: Regex to use to test if the variable content is compliant
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    variable_name:
      description: Complete name of the variable being tested, like my_prefix.my_variable
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File ensure lines absent
  description: Ensure that a line is absent in a specific location
  documentation: ''
  supported_targets: []
  class_prefix: file_ensure_lines_absent
  class_parameter: file
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_ensure_lines_absent.cf
  deprecated: Use [file_lines_absent](#_file_lines_absent) instead.
  rename_to: file_lines_absent
  action: null
  method_name: file_ensure_lines_absent
  method_args:
  - file
  - lines
  parameters:
    file:
      description: File name to edit (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    lines:
      description: Line(s) to remove in the file
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Schedule Simple Catchup
  description: Trigger a repaired outcome when a job should be run (avoid losing a job)
  documentation: |-
    This bundle will define a condition `schedule_simple_${job_id}_{kept,repaired,not_ok,ok,reached}`

     * _ok or _kept for when there is nothing to do
     * _repaired if the job should run
     * _not_ok and _reached have their usual meaning

     If the agent run is skipped during the period, method tries to catchup the run on next agent run.
     If the agent run is skipped twice,, only one run is catched up.
     If the agent is run twice (for example from a manual run), the job is run only once.
  supported_targets: []
  class_prefix: schedule_simple
  class_parameter: job_id
  source: /home/amousset/projects/ncf/tree/30_generic_methods/schedule_simple_catchup.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: ''
  method_args: []
  parameters:
    periodicity_days:
      description: Desired job run interval (in days)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    job_id:
      description: A string to identify this job
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    agent_periodicity:
      description: Agent run interval (in minutes)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    max_execution_delay_hours:
      description: On how many hours you want to spread the job
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    start_on_minutes:
      description: At which minute should be the first run
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    periodicity_hours:
      description: Desired job run interval (in hours)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    start_on_day_of_week:
      description: At which day of week should be the first run
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    max_execution_delay_minutes:
      description: On how many minutes you want to spread the job
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    start_on_hours:
      description: At which hour should be the first run
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    periodicity_minutes:
      description: Desired job run interval (in minutes)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File ensure key value parameter in list
  description: Ensure that one parameter exists in a list of parameters, on one single line, in the right hand side of a key->values line
  documentation: |-
    Edit the file, and ensure it contains the defined parameter in the list of values on the right hand side of a key->values line.
    If the parameter is not there, it will be added at the end, separated by parameter_separator.
    Optionally, you can define leading and closing character to enclose the parameters
    If the key does not exist in the file, it will be added in the file, along with the parameter

    #### Example

    If you have an initial file (`/etc/default/grub`) containing

    ```
    GRUB_CMDLINE_XEN="dom0_mem=16G"
    ```

    To add parameter `dom0_max_vcpus=32` in the right hand side of the line, you'll need the following policy

    ```
    file_ensure_key_value_parameter_in_list("/etc/default/grub", "GRUB_CMDLINE", "=", "dom0_max_vcpus=32", " ", "\"", "\"");
    ```
  supported_targets: []
  class_prefix: file_ensure_key_value_parameter_in_list
  class_parameter: file
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_ensure_key_value_parameter_in_list.cf
  deprecated: Use [file_key_value_parameter_present_in_list](#_file_key_value_parameter_present_in_list) instead.
  rename_to: file_key_value_parameter_present_in_list
  action: null
  method_name: file_ensure_key_value_parameter_in_list
  method_args:
  - file
  - key
  - key_value_separator
  - parameter
  - parameter_separator
  - leading_char_separator
  - closing_char_separator
  parameters:
    closing_char_separator:
      description: closing character of the parameters
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    key:
      description: Full key name
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    file:
      description: File name to edit (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    parameter:
      description: String representing the sub-value to ensure is present in the list of parameters that form the value part of that line
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    key_value_separator:
      description: character used to separate key and value in a key-value line
      constraints:
        allow_empty_string: false
        allow_whitespace_string: true
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    parameter_separator:
      description: Character used to separate parameters in the list
      constraints:
        allow_empty_string: false
        allow_whitespace_string: true
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    leading_char_separator:
      description: leading character of the parameters
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: Permissions group POSIX acl entry present
  description: |-
    Verify that an ace is present on a file or directory for a given group.
    This method will make sure the given ace is present in the POSIX ACL of the target for the given group.
  documentation: "The `permissions_*acl_*` manage the POSIX ACL on files and directories.\n\nPlease note that the mask will be automatically recalculated when editing ACLs.\n\n#### Parameters\n\n##### Path\n\nPath can be a regex with the following format:\n\n* `*` matches any filename or directory at one level, e.g. `*.cf` will match all files in one directory that end in .cf but it won't search across directories. `*/*.cf` on the other hand will look two levels deep.\n* `?` matches a single letter\n* `[a-z]` matches any letter from a to z\n* `{x,y,anything}` will match x or y or anything.\n\n##### Recursive\n\nCan be:\n\n* `true` to apply the given aces to folder and sub-folders and files.\n* or `false` to apply to the strict match of `Path`\n\nIf left blank, recursivity will automatically be set to `false`\n\n##### Group\n\n`Group` to enfoorce the ace, being the Linux account name.\nThis method can only handle one groupname.\n\n##### ACE\n\nThe operator can be:\n* `+` to add the given ACE to the current ones.\n* `-` to remove the given ACE to the current ones.\n* `=` to force the given ACE to the current ones.\n* `empty` if no operator is specified, it will be interpreted as `=`.\n\nACE must respect the classic:\n\n* `^[+-=]?(?=.*[rwx])r?w?x?$`\n\n#### Example\n\nGiven a file with the following getfacl output:\n\n~~~~\nroot@server# getfacl /tmp/myTestFile \ngetfacl: Removing leading '/' from absolute path names\n# file: tmp/myTestFile\n# owner: root\n# group: root\nuser::rwx\ngroup::r--\ngroup:bob:rwx\nmask::rwx\nother::---\n\n~~~~\n\nApplying this method with the following parameters:\n\n* `path`: /tmp/myTestFile\n* `recursive`: false\n* `group`: bob\n* `ace`: -rw\n\nWill transform the previous ACLs in:\n\n~~~~\nroot@server# getfacl /tmp/myTestFile \ngetfacl: Removing leading '/' from absolute path names\n# file: tmp/myTestFile\n# owner: root\n# group: root\nuser::rwx\ngroup::r--\ngroup:bob:--x\nmask::r-x\nother::---\n\n~~~~"
  supported_targets: []
  class_prefix: permissions_group_acl_present
  class_parameter: path
  source: /home/amousset/projects/ncf/tree/30_generic_methods/permissions_group_acl_present.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: permissions_group_acl_present
  method_args:
  - path
  - recursive
  - group
  - ace
  parameters:
    ace:
      description: ACE to enforce for the given group.
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: ^[+-=]?(?=.*[rwx])r?w?x?$
        max_length: 16384
      renamed_to: null
      p_type: String
    path:
      description: Path of the file or directory
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    group:
      description: Group name
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    recursive:
      description: Recursive Should ACLs cleanup be recursive, "true" or "false" (defaults to "false")
      constraints:
        allow_empty_string: true
        allow_whitespace_string: false
        select:
        - ''
        - 'true'
        - 'false'
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
- name: File check is symlink to
  description: Checks if first file is symlink to second file
  documentation: "This bundle will define a condition `file_check_symlinkto_${target}_{ok, reached, kept}` if the file `${symlink}`\nis a symbolic link to `${target}`, or `file_check_symlinkto_${target}_{not_ok, reached, not_kept, failed}` if\nif it is not a symbolic link, or any of the files does not exist. The symlink's path is resolved to the \nabsolute path and checked against the target file's path, which must also be an absolute path."
  supported_targets: []
  class_prefix: file_check_symlinkto
  class_parameter: symlink
  source: /home/amousset/projects/ncf/tree/30_generic_methods/file_check_symlinkto.cf
  deprecated: null
  rename_to: null
  action: null
  method_name: file_check_symlinkto
  method_args:
  - symlink
  - target
  parameters:
    symlink:
      description: Symbolic link (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
    target:
      description: Target file (absolute path on the target node)
      constraints:
        allow_empty_string: false
        allow_whitespace_string: false
        select: null
        regex: null
        max_length: 16384
      renamed_to: null
      p_type: String
