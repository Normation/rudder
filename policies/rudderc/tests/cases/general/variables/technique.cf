# @name Testing variables expansion
# @version 1.0

bundle agent test_windows(content) {

  vars:
    "report_data.index" int => int(eval("${report_data.index}+1", "math", "infix")),
                           unless => "rudder_increment_guard";
    "local_index"       int => ${report_data.index},
                           unless => "rudder_increment_guard";

    "args"              slist => {"${content}"};
    "report_param"      string => join("_", args);
    "full_class_prefix" string => canonify("test_windows_${report_param}");
    "class_prefix"      string => string_head("${full_class_prefix}", "1000");

  classes:
    "rudder_increment_guard" expression => "any";

  methods:
    "index_${local_index}_0" usebundle => call_test_windows_d982a7e6_494a_40a5_aea1_7d9a185eed61("File content", "/some/path", "d982a7e6-494a-40a5-aea1-7d9a185eed61", @{args}, "${class_prefix}", "/some/path", "# Raw string
foo foobar
# With parameter
foo ${content} foobar
# With a var looking like a parameter
foo ${contentbis}
# With a const
${const.n}
# With node properties
${node.properties[name][key]}", "true");

}
bundle agent call_test_windows_d982a7e6_494a_40a5_aea1_7d9a185eed61(c_name, c_key, report_id, args, class_prefix, path, lines, enforce) {

  vars:
    "report_data.index" int => int(eval("${report_data.index}+1", "math", "infix")),
                           unless => "rudder_increment_guard";
    "local_index"       int => ${report_data.index},
                           unless => "rudder_increment_guard";

  classes:
    "rudder_increment_guard" expression => "any";

  methods:
    "index_${local_index}_0" usebundle => _method_reporting_context_v4("${c_name}", "${c_key}", "${report_id}");
    "index_${local_index}_1" usebundle => file_content("${path}", "${lines}", "${enforce}");

}
