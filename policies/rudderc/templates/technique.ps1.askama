{#- Syntax: https://djc.github.io/askama/template_syntax.html -#}
function {{ id|technique_name }} {
    [CmdletBinding()]
    param (
        [parameter(Mandatory = $true)]
        [string]$reportId,
        [parameter(Mandatory = $true)]
        [string]$techniqueName,
{% for p in parameters %}
        [parameter(Mandatory = ${{ !p.constraints.allow_empty }})]
        [string]${{ p.name }},
{%- endfor %}
        [Rudder.PolicyMode]$policyMode
    )
    $techniqueParams = @{
{% for p in parameters %}
        "{{ p.name }}" = ${{- p.name -}}
{%- endfor %}
    }
    BeginTechniqueCall -Name $techniqueName -Parameters $techniqueParams
    $reportIdBase = $reportId.Substring(0, $reportId.Length - 1)
{% if has_resources %}
    Add-RudderVar -Name 'resources_dir' -Value ($PSScriptRoot + '\resources')
{% endif %}
    $fallBackReportParams = @{
        ClassPrefix = 'skipped_method'
        ComponentKey = 'None'
        ComponentName = 'None'
        TechniqueName = $techniqueName
    }

{% for m in methods %}
    $reportId=$reportIdBase + "{{ m.id }}"
    try {
        $componentKey = {{ m.component_key|value_fmt(id, parameters) }}
        $reportParams = @{
            ClassPrefix = ([Rudder.Condition]::canonify(("{{ m.class_prefix }}_" + $componentKey)))
            ComponentKey = $componentKey
            ComponentName = {{ m.component_name|value_fmt(id, parameters) }}
            PolicyMode = {{ m.policy_mode_override|policy_mode_fmt }}
            ReportId = $reportId
            DisableReporting = ${{ m.disable_reporting }}
            TechniqueName = $techniqueName
        }
      {%- if m.is_supported %}
        {% match m.condition %}
        {%- when Some with (cond) %}
        $class = {{ cond|canonify_condition_with_context(id, parameters) }}
        if ([Rudder.Datastate]::Evaluate($class)) {
            $methodParams = @{
                {% for arg in m.args %}
                    {{- arg.0 }} = {{ arg|parameter_fmt(id, parameters) }}
                {% endfor %}
            }
            $call = {{ m.name|dsc_case }} @methodParams -PolicyMode {{ m.policy_mode_override|policy_mode_fmt }}
            Compute-Method-Call @reportParams -MethodCall $call
        } else {
            Rudder-Report-NA @reportParams
        }
        {%- when None %}
        $methodParams = @{
            {% for arg in m.args %}
                {{- arg.0 }} = {{ arg|parameter_fmt(id, parameters) }}
            {% endfor %}
        }
        $call = {{ m.name|dsc_case }} @methodParams -PolicyMode {{ m.policy_mode_override|policy_mode_fmt }}
        Compute-Method-Call @reportParams -MethodCall $call
        {% endmatch %}
      {%- else %}
        Rudder-Report-NA @reportParams
      {%- endif %}
    } catch [Nustache.Core.NustacheDataContextMissException], [Nustache.Core.NustacheException] {
        $failedCall = [Rudder.MethodResult]::Error(
            ([String]::Format(
                'The method call was skipped because it references an undefined variable "{0}"',
                $_.ToString()
            )),
            $techniqueName
        )
        Compute-Method-Call @fallBackReportParams -PolicyMode {{ m.policy_mode_override|policy_mode_fmt }} -ReportId $reportId -DisableReporting:${{ m.disable_reporting }} -MethodCall $failedCall
    } catch {
        $failedCall = [Rudder.MethodResult]::Error(
            ([String]::Format(
                'The method call was skipped as an unexpected error was thrown "{0}"',
                (Format-Exception $_)[1]
            )),
            $techniqueName
        )
        Compute-Method-Call @fallBackReportParams -PolicyMode {{ m.policy_mode_override|policy_mode_fmt }} -ReportId $reportId -DisableReporting:${{ m.disable_reporting }} -MethodCall $failedCall
    }
{% endfor %}
    EndTechniqueCall -Name $techniqueName
}
