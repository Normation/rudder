{#- Syntax: https://djc.github.io/askama/template_syntax.html -#}
function {{ id|dsc_case }} {
    [CmdletBinding()]
    param (
        [parameter(Mandatory = $true)]
        [string]$reportId,
        [parameter(Mandatory = $true)]
        [string]$techniqueName,
{% for p in parameters %}
        [parameter(Mandatory = ${{ !p.constraints.allow_empty }})]
        [string]${{ p.name }},
{%- endfor %}
        [Rudder.PolicyMode]$policyMode
    )
    $techniqueParams = @{
{% for p in parameters %}
        "{{ p.name }}" = ${{- p.name -}}
{%- endfor %}
    }
    BeginTechniqueCall -Name $techniqueName -Parameters $techniqueParams
    $reportIdBase = $reportId.Substring(0, $reportId.Length - 1)
    $localContext = New-Object -TypeName "Rudder.Context" -ArgumentList @($techniqueName)
    $localContext.Merge($system_classes)
{% if has_modules %}
    $modules_dir = $PSScriptRoot + "\modules"
{% endif %}

{% for m in methods %}
    $reportId=$reportIdBase + "{{ m.id }}"
    $componentKey = "{{ m.component_key|escape_double_quotes }}"
    $reportParams = @{
        ClassPrefix = ([Rudder.Condition]::canonify(("{{ m.class_prefix }}_" + $componentKey)))
        ComponentKey = $componentKey
        ComponentName = "{{ m.component_name|escape_double_quotes }}"
        PolicyMode = $policyMode
        ReportId = $reportId
        DisableReporting = ${{ m.disable_reporting }}
        TechniqueName = $techniqueName
    }
    {% match m.condition %}
    {%- when Some with (cond) %}
    $class = {{ cond|canonify_condition }}
    if ($localContext.Evaluate($class)) {
        $methodParams = @{
            {% for arg in m.args %}
                {{- arg.0 }} = {{ arg|parameter_fmt }}
            {% endfor %}
        }
        $call = {{ m.name|dsc_case }} @methodParams -PolicyMode $policyMode
        $methodContext = Compute-Method-Call @reportParams -MethodCall $call
        $localContext.merge($methodContext)
    } else {
        Rudder-Report-NA @reportParams
    }
    {%- when None %}
    $methodParams = @{
        {% for arg in m.args %}
            {{- arg.0 }} = {{ arg|parameter_fmt }}
        {% endfor %}
    }
    $call = {{ m.name|dsc_case }} @methodParams -PolicyMode $policyMode
    $methodContext = Compute-Method-Call @reportParams -MethodCall $call
    $localContext.merge($methodContext)
    {% endmatch %}
{% endfor %}

    EndTechniqueCall -Name $techniqueName
}
