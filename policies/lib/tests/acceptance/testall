#!/bin/sh
#
#  Copyright (C) CFEngine AS
#
#  This file is part of CFEngine 3 - written and maintained by CFEngine AS.
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by the
#  Free Software Foundation; version 3.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA
#
# To the extent this program is licensed as part of the Enterprise
# versions of CFEngine, the applicable Commercial Open Source License
# (COSL) may apply to this file if you as a licensee so wish it. See
# included file COSL.txt.
#

set -e

#
# Detect and replace non-POSIX shell
#
try_exec() {
  type "$1" > /dev/null 2>&1 && exec "$@"
}

unset foo
(: ${foo%%bar}) 2> /dev/null
T1="$?"

if test "$T1" != 0; then
  try_exec /usr/xpg4/bin/sh "$0" "$@"
  echo "No compatible shell script interpreter found."
  echo "Please find a POSIX shell for your system."
  exit 42
fi

#
# Explicitly use POSIX tools if needed
#
if [ -f /usr/xpg4/bin/grep ]; then
  PATH=/usr/xpg4/bin:$PATH
  export PATH
fi

# Use only newline as token separator, not spaces.
IFS='
'

#
# Unset environment variables which might break runinng acceptance tests
#
GREP_OPTIONS=
export GREP_OPTIONS

#
# Defaults (overridden by command-line arguments)
#
LOG=test_debug.log
SUMMARY=test.log
XML=test.xml
XMLTMP=xml.tmp
BASE_WORKDIR="`pwd`/workdir"
QUIET=
STAGING_TESTS=${STAGING_TESTS:-0}
NETWORK_TESTS=${NETWORK_TESTS:-1}
UNSAFE_TESTS=${UNSAFE_TESTS:-0}

# Only use fakeroot by default if we are are not already root
[ `id | cut -d\( -f2 | cut -d\) -f1` = 'root' ] && GAINROOT="" || GAINROOT=${GAINROOT:-fakeroot}

PASSED_TESTS=0
FAILED_TESTS=0
FAILED_TO_CRASH_TESTS=0
SKIPPED_TESTS=0

OUR_DIR=`dirname "$0"`
NCF_TREE=`cd "${OUR_DIR}" && pwd`/../../tree
NCF_TESTS_ACCEPTANCE=`cd "${OUR_DIR}" && pwd`
NCF_COMPATIBLE_INPUTS="${NCF_TREE}/10_ncf_internals/list-compatible-inputs"
CAPABILITY_FILE="/opt/rudder/etc/agent-capabilities"
#
# Many older platforms don't support date +%s, so check for compatibility
# and find Perl for the unix_seconds() routine below. (Mantis #1254)
#
HAVE_DATE_PCT_S=
date +%s >/dev/null 2>&1
if [ $? -eq 0 ] ; then
  HAVE_DATE_PCT_S=1
fi
PERL=`which perl 2>/dev/null`

#
# Obtain UNIX time(), using date +%s, Perl, or POSIX-compatible approach.
#
unix_seconds() {
  if [ "$HAVE_DATE_PCT_S" ]; then
    date +%s
    return 0
  fi

  if [ "$PERL" ]; then
    $PERL -e 'print time() . "\n"' 2>/dev/null
    if [ $? -eq 0 ] ; then
      return 0
    fi
  fi

  # Last resort if Perl fails - the extended cpio interchange format has
  # the file modification timestamp in columns 48-59, in octal.
  : > $BASE_WORKDIR/x
  echo "ibase=8;`pax -wx cpio $BASE_WORKDIR/$$.seconds | cut -c 48-59`" | bc 2>/dev/null
  rm $BASE_WORKDIR/x
}

echo
echo === Test environment: ===
echo AGENT=$AGENT
echo CF_PROMISES=$CF_PROMISES
echo CF_SERVERD=$CF_SERVERD
echo CF_KEY=$CF_KEY
echo =========================
echo

usage() {
  echo "testall [-q] [--gainroot=<command>] [--agent=<agent>] [--cfpromises=<cf-promises>] [--cfserverd=<cf-serverd>] [--cfkey=<cf-key>] [--no-nova] [--staging] [--unsafe] [--no-network] [--gdb] [--printlog] [--info] [--verbose] [<test> <test>...]"
  echo
  echo "If no test is given, all standard tests are run:"
  echo "  Tests with names of form <file>.cf are expected to run successfully"
  echo "  Tests with names of form <file>.x.cf are expected to crash"
  echo
  echo "If arguments are given, those are executed as tests"
  echo
  echo " -q makes script much quieter"
  echo
  echo " --gainroot=<command> forces use of command to gain root privileges,"
  echo "           otherwise fakeroot is used."
  echo
  echo " --agent   provides a way to specify non-default cf-agent location,"
  echo "           and defaults to $DEFAGENT."
  echo
  echo " --cfpromises  provides a way to specify non-default cf-promises location,"
  echo "               and defaults to $DEFCF_PROMISES."
  echo
  echo " --cfserverd  provides a way to specify non-default cf-serverd location,"
  echo "               and defaults to $DEFCF_SERVERD."
  echo
  echo " --cfkey  provides a way to specify non-default cf-key location,"
  echo "               and defaults to $DEFCF_KEY."
  echo
  echo " --libtool specify non-default libtool location (only needed for --gdb)."
  echo "               defaults to $DEFLIBTOOL."
  echo
  echo " --staging enable tests in staging directories. They are not expected to pass."
  echo
  echo " --unsafe  enable tests in unsafe directories. WARNING! These tests modify the"
  echo "           system they're running on and can DAMAGE YOUR SYSTEM! DO NOT use"
  echo "           this option without a backup."
  echo "           If you use this option you should also use --gainroot=sudo,"
  echo "           otherwise you will get incorrect results."
  echo
  echo " --no-network disable tests in network directories."
  echo " --printlog   print the full test.log output immediately."
  echo
  echo " --gdb   Run test under GDB"
  echo
  echo " --info  Run test in info mode"
  echo
  echo " --verbose Run test in verbose mode"
}

runtest() {
  AGENT="$1"
  TEST="$2"
  if [ -z "$QUIET" ]; then
    printf "$TEST "
  fi

  if echo "$TEST" | grep -q -F -e .x.cf ; then
    EXPECTED_CRASH=1
  else
    EXPECTED_CRASH=
  fi

  if [ "x$STAGING_TESTS" = "x0" ] && echo "$TEST" | grep -q -e '/staging/'; then
    SKIP=1
    SKIPREASON="Staging tests are disabled"
  elif [ "x$UNSAFE_TESTS" != "x1" ] && echo "$TEST" | grep -q -e '/unsafe/'; then
    SKIP=1
    SKIPREASON="Unsafe tests are disabled"
  elif [ "x$NON_CONTAINER_TESTS" != "x1" ] && echo "$TEST" | grep -q -e '/non_container/'; then
    SKIP=1
    SKIPREASON="Tests using systemd units are disabled"
  elif [ "x$NETWORK_TESTS" = "x0" ] && echo "$TEST" | grep -q -e '/network/'; then
    SKIP=1
    SKIPREASON="Network-dependent tests are disabled"
  elif grep -q "testinfra" $TEST && ! python -c "import testinfra" > /dev/null; then
      SKIP=1
      SKIPREASON="Testinfra python module required but not found"
  else
    SKIP=
    SKIPREASON=
  fi

  ( echo ----------------------------------------------------------------------
    echo "$TEST"${EXPECTED_CRASH:+ \(expected to crash\)}${SKIPREASON:+ \($SKIPREASON\)}
    echo ----------------------------------------------------------------------
  ) >> "$LOG"

  if [ -z "$SKIP" ]; then
    TEST_START_TIME=`unix_seconds`

    FLATNAME="`echo "$TEST" | sed 's,[./],_,g'`"

    # Prepare workdir
    WORKDIR="$BASE_WORKDIR/$FLATNAME"
    $GAINROOT rm -rf "$WORKDIR"
    mkdir -p "$WORKDIR/bin" "$WORKDIR/tmp" "$WORKDIR/inputs"
    chmod ugo+rwxt "$WORKDIR/tmp"
    ln -sf "$AGENT" "$WORKDIR/bin"
    ln -sf "$CF_PROMISES" "$WORKDIR/bin"
    ln -sf "$CF_SERVERD" "$WORKDIR/bin"
    ln -sf "$CF_KEY" "$WORKDIR/bin"
    echo ".*" > $WORKDIR/inputs/ignore_interfaces.rx
    if uname | grep MINGW > /dev/null; then
        PLATFORM_WORKDIR="$(echo $WORKDIR | sed -e 's%^/\([a-cA-Z]\)/%\1:/%' | sed -e 's%/%\\%g')"
        DS="\\"
    else
        PLATFORM_WORKDIR="$WORKDIR"
        DS="/"
    fi

    echo "#!/bin/sh
CFENGINE_TEST_OVERRIDE_WORKDIR=\"$PLATFORM_WORKDIR\"
TEMP=\"$PLATFORM_WORKDIR${DS}tmp\"
NCF_TREE=\"${NCF_TREE}\"
NCF_TESTS_ACCEPTANCE=\"${NCF_TESTS_ACCEPTANCE}\"
export CFENGINE_TEST_OVERRIDE_WORKDIR TEMP NCF_TREE NCF_TESTS_ACCEPTANCE

" > "$WORKDIR/runtest"

    if [ "$GDB" = 1 ]; then
      if grep -q libtool < "$AGENT"; then
        printf "\"$LIBTOOL\" --mode=execute " >> "$WORKDIR/runtest"
      fi
      printf "gdb --args " >> "$WORKDIR/runtest"
    fi

    printf "\"$AGENT\" $VERBOSE -Kf \"$TEST\" -D AUTO,DEBUG 2>&1\n" >> "$WORKDIR/runtest"
    chmod +x "$WORKDIR/runtest"

    if [ "$GDB" = 1 ]; then
      $GAINROOT "$WORKDIR/runtest"
    else
      OUT=`$GAINROOT "$WORKDIR/runtest"`
    fi
    RETVAL=$?
    echo "$OUT" >> "$LOG"
    echo >> "$LOG"
    echo "Return code is $RETVAL." >> "$LOG"

    TEST_END_TIME=`unix_seconds`
    echo "              "time=\"$(($TEST_END_TIME - $TEST_START_TIME)) seconds\"\> >> "$XMLTMP"

    # Some states are output by default.cf.sub, therefore check for both TEST
    # prefix and default.cf.sub prefix.
    ESCAPED_TEST="$(echo "($TEST|default.cf.sub)" | sed -e 's/\./\\./g')"

    if [ -z "$EXPECTED_CRASH" ]; then
      if [ $RETVAL -eq 0 ] && echo "$OUT" | egrep -q -e "R: .*$ESCAPED_TEST Pass"; then
        RESULT=Pass
      else
        RESULT=FAIL
      fi
    else
      if [ $RETVAL -ne 0 ]; then
        RESULT=Pass
      else
        RESULT="FAILed to crash"
      fi
    fi

    if [ "$RESULT" = "Pass" ]; then
      $GAINROOT rm -rf "$WORKDIR"
    fi

    if [ "$RESULT" != Pass ] && [ -e .succeeded/"$FLATNAME" ]; then
      echo $RESULT $TEST '(UNEXPECTED FAILURE)' >> "$SUMMARY"
      ( echo "        "\<failure type=\"UNEXPECTED FAILURE\"
        echo "                 "message=\"$RESULT $TEST '(UNEXPECTED FAILURE)'\"\>
        echo "        "\<\/failure\>
      ) >> "$XMLTMP"
    else
      echo $RESULT $TEST >> "$SUMMARY"
      if [ "$RESULT" = FAIL ]; then
        ( echo "        "\<failure type=\"FAIL\"
          echo "                 "message=\"$RESULT $TEST\"\>
          echo "        "\<\/failure\>
        ) >> "$XMLTMP"
      elif [ "$RESULT" = "FAILed to crash" ]; then
        ( echo "        "\<failure type=\"FAILed to crash\"
          echo "                 "message=\"$RESULT $TEST\"\>
          echo "        "\<\/failure\>
        ) >> "$XMLTMP"
      fi
    fi

    if [ -z "$QUIET" ]; then
      if [ "$RESULT" != Pass ] && [ -e .succeeded/"$FLATNAME" ]; then
        echo $RESULT '(UNEXPECTED FAILURE)'
      else
        echo $RESULT
      fi
    else
      if [ "$RESULT" = Pass ]; then
        printf '.'
      else
        if [ -n "$EXPECTED_CRASH" ]; then
          printf '!'
        else
          printf 'x'
        fi
      fi
    fi

    (
      echo
      echo '  ==>' $RESULT
      echo
    ) >> "$LOG"

    if [ "$RESULT" = Pass ]; then
      PASSED_TESTS=$(($PASSED_TESTS + 1))

      mkdir -p '.succeeded'
      touch .succeeded/"$FLATNAME"
    elif [ "$RESULT" = FAIL ]; then
      FAILED_TESTS=$(($FAILED_TESTS + 1))
    elif [ "$RESULT" = "FAILed to crash" ]; then
      FAILED_TO_CRASH_TESTS=$(($FAILED_TO_CRASH_TESTS + 1))
    fi
  else
    echo "              "time=\"NULL\"\> >> "$XMLTMP"
    echo Skip $TEST >> "$SUMMARY"
    ( echo "        "\<skipped type=\"$SKIPREASON\"\>
      echo "        "\<\/skipped\>
    ) >> "$XMLTMP"
    if [ -z "$QUIET" ]; then
      echo Skipped
    else
      printf '-'
    fi
    SKIPPED_TESTS=$(($SKIPPED_TESTS + 1))
  fi
}

# We assume we're running this script from $objdir, $objdir/tests/acceptance,
# or /var/cfengine/tests/acceptance.
find_default_binary()
{
    [ -x "`pwd`/$2/$2" ] && eval $1=\""`pwd`/$2/$2"\"
    [ -x "`pwd`/../../$2/$2" ] && eval $1=\""`pwd`/../../$2/$2"\"
    [ -x "`pwd`/../../bin/$2" ] && eval $1=\""`pwd`/../../bin/$2"\"
    which $2 > /dev/null && eval $1=\""`which $2`"\"
}
find_default_binary DEFAGENT cf-agent
find_default_binary DEFCF_PROMISES cf-promises
find_default_binary DEFCF_SERVERD cf-serverd
find_default_binary DEFCF_KEY cf-key

[ -x "`pwd`/libtool" ] && DEFLIBTOOL="`pwd`/libtool"
[ -x "`pwd`/../../libtool" ] && DEFLIBTOOL="`pwd`/../../libtool"

while true; do
  case "$1" in
    --help)
      usage
      exit;;
    -q)
      QUIET=1;;
    --gainroot=*)
      GAINROOT=${1#--gainroot=};;
    --staging)
      STAGING_TESTS=1;;
    --unsafe)
      UNSAFE_TESTS=1;;
    --non_container)
      NON_CONTAINER_TESTS=1;;
    --no-network)
      NETWORK_TESTS=0;;
    --agent=*)
      AGENT=${1#--agent=};;
    --cfpromises=*)
      CF_PROMISES=${1#--cfpromises=};;
    --cfserverd=*)
      CF_SERVERD=${1#--cfserverd=};;
    --cfkey=*)
      CF_KEY=${1#--cfkey=};;
    --libtool=*)
      LIBTOOL=${1#--libtool=};;
    --printlog)
      PRINTLOG=1;;
    --gdb)
      GDB=1;;
    --info)
      VERBOSE="-I -D debug";;
    --verbose)
      VERBOSE="-v -D debug";;
    -*)
      echo "Unknown option: $1"
      exit 1;;
    *)
      break;;
  esac
  shift
done

AGENT=${AGENT:-${DEFAGENT}}
CF_PROMISES=${CF_PROMISES:-${DEFCF_PROMISES}}
CF_SERVERD=${CF_SERVERD:-${DEFCF_SERVERD}}
CF_KEY=${CF_KEY:-${DEFCF_KEY}}
LIBTOOL=${LIBTOOL:-${DEFLIBTOOL}}

if [ ! -x "$AGENT" ]; then
  echo "ERROR can't find cf-agent. Are you sure you're running this from OBJDIR or OBJDIR/tests/acceptance? Check cf-agent = '$AGENT'"
  exit 1
fi
if [ ! -x "$CF_PROMISES" ]; then
  CF_PROMISES="`dirname $AGENT`/cf-promises"
  if [ ! -x "$CF_PROMISES" ]; then
    echo "ERROR can't find cf-promises. Are you sure you're running this from OBJDIR or OBJDIR/tests/acceptance? Check cf-promises = '$CF_PROMISES'"
    exit 1
  fi
fi
if [ ! -x "$CF_SERVERD" ]; then
  CF_SERVERD="`dirname $AGENT`/cf-serverd"
  if [ ! -x "$CF_SERVERD" ]; then
    echo "ERROR can't find cf-serverd. Are you sure you're running this from OBJDIR or OBJDIR/tests/acceptance? Check cf-serverd = '$CF_SERVERD'"
    exit 1
  fi
fi
if [ ! -x "$CF_KEY" ]; then
  CF_KEY="`dirname $AGENT`/cf-key"
  if [ ! -x "$CF_KEY" ]; then
    echo "ERROR can't find cf-key. Are you sure you're running this from OBJDIR or OBJDIR/tests/acceptance? Check cf-key = '$CF_KEY'"
    exit 1
  fi
fi

if [ "$UNSAFE_TESTS" = "1" -a "$GAINROOT" = "fakeroot" ]; then
    echo "Unsafe tests do not play well together with fakeroot. Please use a different"
    echo "--gainroot (like \"sudo\"), or you will get incorrect results."
    exit 1
fi

# Get current agent version
AGENT_VERSION=`"${AGENT}" -V | cut -d' ' -f 3 | sed 's/\.[^.]*$//'`

if [ $# -gt 0 ]; then
  # We need to run all specified tests, but not unsafe ones.
  STAGING_TESTS=1
  NETWORK_TESTS=1
  for test in "$@"; do
    if ! expr "$test" : '[/.]' >/dev/null; then
      test="./$test"
    fi

    if [ -f $test ]; then
      TESTS="$TESTS${TESTS:+
}$test"
    elif [ -d $test ]; then
      ADDTESTS=`${NCF_COMPATIBLE_INPUTS} --capability-file ${CAPABILITY_FILE} --agent-version ${AGENT_VERSION} --ncf-path "${NCF_TESTS_ACCEPTANCE}/${test}" . | awk -v path="${test}" '{ print path"/"$0 }' | sort`
      TESTS="$TESTS${TESTS:+
}$ADDTESTS"
    else
      echo "Unable to open test file/directory: $test"
    fi
  done
else
  MYDIR=`dirname $0`
  TESTS=`${NCF_COMPATIBLE_INPUTS} --capability-file ${CAPABILITY_FILE} --agent-version ${AGENT_VERSION} --ncf-path "${MYDIR}" . | sort`
fi

#
# fd 7 is a /dev/null for quiet execution and stdout for default one
#
if [ -z "$QUIET" ]; then
  exec 7>&1
else
  exec 7>/dev/null
fi

#
# Now run the tests
#

TESTS_COUNT=`echo $TESTS | wc -w`
START_TIME=`unix_seconds`

( echo ======================================================================
  echo Testsuite started at `date "+%F %T"`
  echo ----------------------------------------------------------------------
  echo Total tests: $TESTS_COUNT
  echo
) | tee "$LOG" | tee "$SUMMARY" >&7


( echo \<\?xml version=\"1.0\" encoding=\"UTF-8\"\?\>
  echo \<testsuite name=\"`pwd`\"
  echo "           "timestamp=\"`date "+%F %T"`\"
  echo "           hostname=\"localhost\""
  echo "           "tests=\"$TESTS_COUNT\"
) > "$XML"

  echo -n "" > "$XMLTMP"

for test in $TESTS; do
  echo "    "\<testcase name=\"`basename $test`\" >> "$XMLTMP"
  echo "              "classname=\"$test\" >> "$XMLTMP"
  if [ -n "$USE_VALGRIND" ]; then
    runtest "valgrind --leak-check=full --show-reachable=yes $AGENT" "$test" || true
  else
    runtest $AGENT "$test" || true
  fi
  echo "    "\<\/testcase\> >> "$XMLTMP"
done

END_TIME=`unix_seconds`

( echo
  echo ======================================================================
  echo Testsuite finished at `date  "+%F %T"` \($(($END_TIME - $START_TIME)) seconds\)
) | tee -a "$LOG" | tee -a "$SUMMARY" >&7

( echo
  echo Passed tests: $PASSED_TESTS
  echo Failed tests: $FAILED_TESTS
  echo Failed to crash tests: $FAILED_TO_CRASH_TESTS
  echo Skipped tests: $SKIPPED_TESTS
) | tee -a "$LOG" | tee -a "$SUMMARY"

(  echo "           "failures=\"$FAILED_TESTS\"
   echo "           "skipped=\"$SKIPPED_TESTS\"
   echo "           "time=\"$(($END_TIME - $START_TIME)) seconds\"\>
) >> "$XML"

  cat "$XMLTMP" >> "$XML"

  echo \<\/testsuite\> >> "$XML"

if [ -n "$PRINTLOG" ]; then
  cat "$LOG"
fi

if [ "$FAILED_TESTS" -ne 0 ] || [ "$FAILED_TO_CRASH_TESTS" -ne 0 ]; then
  exit 1
else
  exit 0
fi

