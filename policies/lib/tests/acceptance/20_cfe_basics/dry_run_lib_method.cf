#######################################################
#
# Test ncf dry-run using the set_dry_run_mode call
#
#######################################################

# @agent_requirements "capabilities": [ "bodydefault" ] || "agent_version" >= 3.9

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init {}

#######################################################

bundle agent test_action(name)
{
  files:
	  "$(G.testdir)/${name}"
             create => "true",
             classes => classes_generic("create_${name}");
}

#######################################################

bundle agent test
{

  methods:
      "default"
        usebundle => test_action("default");
      "enable dry-run"
        usebundle => set_dry_run_mode("true");
      "dryrun"
        usebundle => test_action("dryrun");
      "disable dry-run"
        usebundle => set_dry_run_mode("false");
      "not dryrun"
        usebundle => test_action("notdryrun");

}

bundle agent check
{
  classes:
    "default_created" expression => fileexists("$(G.testdir)/default");
    "dryrun_created" expression => fileexists("$(G.testdir)/dryrun");
    "notdryrun_created" expression => fileexists("$(G.testdir)/notdryrun");
    "ok" expression => "create_dryrun_reached.!dryrun_created.default_created.notdryrun_created";

  reports:   
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
}

