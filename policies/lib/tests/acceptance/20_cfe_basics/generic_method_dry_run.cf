#######################################################
#
# Test ncf dry-run with a generic method
#
#######################################################

# @agent_requirements "capabilities": [ "bodydefault" ] || "agent_version" >= 3.9

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{

  vars:
      "file" slist => { "default", "dryrun", "notdryrun" };

      "path[${file}]" string => "$(G.testdir)/${file}";
      "canon[${file}]" string => canonify("${path[${file}]}");

}

#######################################################

bundle agent test
{

  methods:
      "default"
        usebundle => file_create("${init.path[default]}");
      "enable dry-run"
        usebundle => set_dry_run_mode("true");
      "dryrun"
        usebundle => file_create("${init.path[dryrun]}");
      "disable dry-run"
        usebundle => set_dry_run_mode("false");
      "not dryrun"
        usebundle => file_create("${init.path[notdryrun]}");

}

bundle agent check
{
  classes:
    "default_created" expression => fileexists("${init.path[default]}");
    "dryrun_created" expression => fileexists("${init.path[dryrun]}");
    "notdryrun_created" expression => fileexists("${init.path[notdryrun]}");
    "ok" expression => "file_create_${init.canon[dryrun]}_reached.!dryrun_created.default_created.notdryrun_created";

  reports:   
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
}

