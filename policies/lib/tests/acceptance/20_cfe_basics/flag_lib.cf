#######################################################
#
# Test flag_lib
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, initialization, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init {
  vars:
      "existing" string => '{ "already": { "created": "2018-10-15T16:52:20+0200" } }';

  methods:
      "clean" usebundle => file_absent("${configuration.flag_file}");
}

#######################################################

bundle agent test
{

  methods:
      "read before"
        usebundle => get_flag("test"),
        useresult => "get1";
      "reserve"
        usebundle => reserve_flag("test"),
        useresult => "reserve2";
      "read after"
        usebundle => get_flag("test"),
        useresult => "get3";
      "reserve twice"
        usebundle => reserve_flag("test"),
        useresult => "reserve4";
      "set flag"
        usebundle => set_flag("test"),
        useresult => "set5";
      "read after set"
        usebundle => get_flag("test"),
        useresult => "get6";
      "reserve after set"
        usebundle => reserve_flag("test"),
        useresult => "reserve6";
      "set another flag without reservation"
        usebundle => set_flag("test2"),
        useresult => "set7";

      "clean" usebundle => file_content("${configuration.flag_file}", "${init.existing}", "true");
      "read an existing condition"
        usebundle => get_flag("already"),
        useresult => "get8";

      "reserve"
        usebundle => reserve_flag("test3"),
        useresult => "reserve9";
      "cancel" usebundle => cancel_flag("test3");
      "read after"
        usebundle => get_flag("test3"),
        useresult => "get10";
}

bundle agent check
{
  classes:
      "ok_1" expression => strcmp("${test.get1[1]}", "free");
      "ok_2" expression => strcmp("${test.reserve2[1]}", "ok");
      "ok_3" expression => strcmp("${test.get3[1]}", "reserved");
      "ok_4" expression => strcmp("${test.reserve4[1]}", "failed_reserved");
      "ok_5" expression => strcmp("${test.set5[1]}", "ok");
      "ok_6" expression => strcmp("${test.get6[1]}", "set");
      "ok_6b" expression => strcmp("${test.reserve6[1]}", "failed_set");
      "ok_7" expression => strcmp("${test.set7[1]}", "notreserved");
      "ok_8" expression => strcmp("${test.get8[1]}", "set");
      "ok_9" expression => strcmp("${test.reserve9[1]}", "ok");
      "ok_10" expression => strcmp("${test.get10[1]}", "free");

      "ok" expression => "ok_1.ok_2.ok_3.ok_4.ok_5.ok_6.ok_6b.ok_7.ok_8.ok_9.ok_10";

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
}

