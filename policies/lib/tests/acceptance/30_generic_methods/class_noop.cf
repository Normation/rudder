#######################################################
#
# Test if only noop classes are created
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("$(this.promise_filename)") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    "tmp"         string => getenv("TEMP", 1024);
}

#######################################################

bundle agent test
{
  methods:
    "ph1"         usebundle => _classes_noop("my_class");
    "ph1"         usebundle => _classes_noop("");

}

#######################################################

bundle agent check
{
  classes:
      "ok_noop"     and        => { "my_class_noop" };
      "ok_success"  expression => "!(promise_kept_my_class|my_class_kept|my_class_not_repaired|my_class_ok|my_class_reached)";
      "ok_repaired" expression => "!(promise_repaired_my_class|my_class_repaired)";
      "ok_error"    expression => "!(repair_failed_my_class|repair_denied_class_my_class|repair_timeout_my_class|my_class_failed|my_class_not_ok|my_class_not_kept|my_class_denied|my_class_timeout)";
      "ok_no_empty" expression => "!_noop";
      "ok"          and        => { "ok_noop", "ok_success", "ok_repaired", "ok_error", "ok_no_empty" };

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
}
