#######################################################
#
# This will check that result classes are copied
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { default("$(this.promise_filename)") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    "tmp"         string => getenv("TEMP", 1024);
    "file"        string => "${tmp}/test";
    "file_canon"  string => canonify("${file}");
}

#######################################################

bundle agent test
{

  methods:
    "ph1" usebundle => file_ensure_lines_present("${init.file}", "sample two"); # should get repaired
    "ph2" usebundle => file_ensure_lines_absent("${init.file}", "sample one"); # should get success
    "ph3" usebundle => file_ensure_lines_absent("/dev/zero", "sample three"); # should get failed

    "test1" usebundle => _classes_combine_two("file_ensure_lines_absent_${init.file_canon}", "file_ensure_lines_absent_${init.file_canon}", "global_classA"); # success
    "test2" usebundle => _classes_combine_two("file_ensure_lines_absent_${init.file_canon}", "file_ensure_lines_present_${init.file_canon}", "global_classB"); # repaired
    "test3" usebundle => _classes_combine_two("file_ensure_lines_absent_${init.file_canon}", "file_ensure_lines_absent__dev_zero", "global_classC"); # error
}

#######################################################

bundle agent check
{
  classes:
      "ok_repaired" expression => "(global_classA_ok.global_classA_reached.global_classA_kept.global_classA_not_repaired.promise_kept_global_classA).!(global_classA_repaired|promise_repaired_global_classA)";
      "ok_success"  expression => "(global_classB_ok.global_classB_reached.global_classB_repaired.promise_repaired_global_classB).!(global_classB_kept|global_classB_not_repaired|promise_kept_global_classB)";
      "ok_error"    expression => "(global_classC_failed.repair_failed_global_classC.global_classC_not_ok.global_classC_not_kept.global_classC_not_repaired.global_classC_reached).!(global_classC_kept|promise_kept_global_classC|global_classC_repaired|promise_repaired_global_classC)";
      "ok"          expression => "ok_success.ok_repaired.ok_error";

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
}
