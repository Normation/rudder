#######################################################
#
# Test checking if ACLs are present or not
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, initialization, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
      "tmp"                        string => getenv("TEMP", 1024);
      "splitted_tmp"                slist => { @(getParent_py.parentDirectories) };

     # exp_lines = expected lines in the getfacl run on the target, in the check bundle
     # exp_parent_lines = expected lines in the getfacl run on the parents, in the check bundle
     # parents = list of parents dirs to audit
     # REPAIRED
     ## recursive
      "path[1]"                     string => "${tmp}/file1";
      "recursive[1]"                string => "true";
      "user[1]"                     string => "";
      "group[1]"                    string => "bin:+rwx";
      "other[1]"                    string => "";
      "parent_permissions_user[1]"  string => "";
      "parent_permissions_group[1]" string => "bin:+rx";
      "parent_permissions_other[1]" string => "";
      "create[1]"                   string => "true";          # if "true", the file will be created at init
      "mode[1]"                     string => "enforce";       # mode, "enforce" or "audit"
      "status[1]"                   string => "repaired";      # expected status, "repaired", "success" or "error"
      "execute[1]"                  string => "true";          # Tell if an execution is needed
      "initial[1]"                   slist => { "user:*:rwx", "group:*:rx", "group:bin:r", "user:*:r", "all:r" };
      "exp_lines[1]"                 slist => { "group:bin:rwx" };
      "exp_parent_lines[1]"          slist => { "group:bin:r-x" };
      "parents[1]"                   slist => { @(splitted_tmp) };

      "path[2]"                     string => "${tmp}/file1*"; # Same than 1, but with a different path resolution to avoid class conflicts
      "recursive[2]"                string => "true";
      "user[2]"                     string => "";
      "group[2]"                    string => "bin:+rwx";
      "other[2]"                    string => "";
      "parent_permissions_user[2]"  string => "";
      "parent_permissions_group[2]" string => "bin:+rx";
      "parent_permissions_other[2]" string => "";
      "create[2]"                   string => "false";          # if "true", the file will be created at init
      "mode[2]"                     string => "enforce";       # mode, "enforce" or "audit"
      "status[2]"                   string => "success";      # expected status, "repaired", "success" or "error"
      "execute[2]"                  string => "true";          # Tell if an execution is needed
      "initial[2]"                   slist => { "user:*:rwx", "group:*:rx", "group:bin:r", "user:*:r", "all:r" };
      "exp_lines[2]"                 slist => { "group:bin:rwx" };
      "exp_parent_lines[2]"          slist => { "group:bin:r-x" };
      "parents[2]"                   slist => { @(splitted_tmp) };

   pass1::
      "indices" slist => getindices("path");

  classes:
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";
      "create_${indices}" expression => strcmp("${create[${indices}]}", "true");

  files:
      "${path[${indices}]}"
        create => "true",
        ifvarclass => "create_${indices}",
        acl => access_generic("@{initial[${indices}]}");

   commands:
     pass1::
       # Pre compute the ENV path is pretty hard, so we are using the module to split it.
       # This is fine since the module has its own dedicated test set.
       "${sys.workdir}/modules/promises/getParent.py"
         args => "\"${tmp}\"",
         module => "true";
}

#######################################################

bundle agent test
{
  vars:
      "args${init.indices}" slist => {
                                       "${init.path[${init.indices}]}",
                                       "${init.recursive[${init.indices}]}",
                                       "${init.user[${init.indices}]}",
                                       "${init.group[${init.indices}]}",
                                       "${init.other[${init.indices}]}",
                                       "${init.parent_permissions_user[${init.indices}]}",
                                       "${init.parent_permissions_group[${init.indices}]}",
                                       "${init.parent_permissions_other[${init.indices}]}"
                                     };

  classes:
    "pass2" expression => "pass1";
    "pass1" expression => "any";

  methods:
    pass1.!pass2::
    #REPAIRED
      "ph1" usebundle => apply_gm_v4("permissions_posix_acl_entry_parent", @{args1}, "${init.status[1]}", "ph1", "${init.mode[1]}" );
      # This one does not work, might be from a troncated class since the code seems correct?
      "ph2" usebundle => apply_gm_v4("permissions_posix_acl_entry_parent", @{args2}, "${init.status[2]}", "ph2", "${init.mode[2]}" );
}

#######################################################

bundle agent check
{
  vars:
    pass1::
      "getfacl_target_output[${init.indices}]" string => execresult("${paths.getfacl} ${init.path[${init.indices}]}", "useshell");
      "getfacl_parents_output[${init.indices}]" string => execresult("${paths.getfacl} ${init.path[${init.indices}]}", "useshell");

  classes:
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";

      "create_${init.indices}"  expression => strcmp("${init.create[${init.indices}]}", "true");
      "execute_${init.indices}" expression => strcmp("${init.execute[${init.indices}]}", "true");

      # Reverse grep exit code as we want a class when it does not match
      # ! getfacl /tmp 2>/dev/null | grep -q 'group::rwx'
      "parent_acls_failed_${init.indices}" expression => returnszero("! ${paths.getfacl} ${init.parents[${init.indices}]} 2>/dev/null | grep -q '${init.exp_parent_lines[${init_indices}]}'", "useshell");

    pass3::
      "target_acl_failed_${init.indices}" not => regcmp(".*${init.exp_lines[${init.indices}]}.*", "${getfacl_output[${init.indices}]}"),
        ifvarclass => "create_${init.indices}";
      "parents_acl_failed_${init.indices}" not => regcmp(".*${init.exp_lines[${init.indices}]}.*", "${getfacl_output[${init.indices}]}"),
        ifvarclass => "create_${init.indices}";

      "lines_not_ok" expression => "target_acl_failed_${init.indices}|parent_acls_failed_${init.indices}";

      "classes_not_ok"  expression => or("classes_ok", "!ph${init.indices}_ok"),
        ifvarclass => "execute_${init.indices}";

      "ok"          expression => "!classes_not_ok.!lines_not_ok";

  reports:
    pass3.ok::
      "$(this.promise_filename) Pass";
    pass3.!ok::
      "$(this.promise_filename) FAIL";
}
