#######################################################
#
# Test checking if a symlink is created
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("$(this.promise_filename)") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    "tmp"             string => getenv("TEMP", 1024);
    "file"            string => "${tmp}/test";
    "file_canon"      string => canonify("${file}");
    "line_to_add"     string => "This is a test line!";
    "symlink_1"       string => "${tmp}/test_symlink1";
    "symlink_1_canon" string => canonify("${symlink_1}");
    "symlink_2"       string => "${tmp}/test_symlink2";
    "symlink_2_canon" string => canonify("${symlink_2}");
    "symlink_3"       string => "${tmp}/test_symlink3";
    "symlink_3_canon" string => canonify("${symlink_3}");
    "symlink_4"       string => "${tmp}/test_symlink4";
    "symlink_4_canon" string => canonify("${symlink_4}");
    "symlink_5"       string => "${tmp}/test_symlink5";
    "symlink_5_canon" string => canonify("${symlink_5}");
    "symlink_6"       string => "${tmp}/test_symlink6";
    "symlink_6_canon" string => canonify("${symlink_6}");

  methods:
    "ph1" usebundle => file_ensure_lines_present("${file}", "${line_to_add}");
    # Theses files will test if the symlink is enforced or not
    "ph2" usebundle => file_ensure_lines_present("${symlink_3}", "${line_to_add}");
    "ph3" usebundle => file_ensure_lines_present("${symlink_6}", "${line_to_add}");
}

#######################################################

bundle agent test
{

  methods:
    "ph1"       usebundle => file_symlink_present_option("${init.file}", "${init.symlink_1}", "false");
    "ph2"       usebundle => file_symlink_present_option("${init.file}", "${init.symlink_2}", "true");
    "ph3"       usebundle => file_symlink_present_option("${init.file}", "${init.symlink_3}", "true");
    "ph4"       usebundle => file_symlink_present("${init.file}", "${init.symlink_4}");
    "ph5"       usebundle => file_symlink_present_force("${init.file}", "${init.symlink_5}");
    "ph6"       usebundle => file_symlink_present_force("${init.file}", "${init.symlink_6}");
}

#######################################################Â²

bundle agent check
{
  classes:
      "ok_symlink1" and => { islink("${init.symlink_1}"), "promise_repaired_file_symlink_present_${init.symlink_1_canon}", "file_symlink_present_${init.symlink_1_canon}_repaired", "file_symlink_present_${init.symlink_1_canon}_ok", "file_symlink_present_${init.symlink_1_canon}_reached" };
      "ok_symlink2" and => { islink("${init.symlink_2}"), "promise_repaired_file_symlink_present_${init.symlink_2_canon}", "file_symlink_present_${init.symlink_2_canon}_repaired", "file_symlink_present_${init.symlink_2_canon}_ok", "file_symlink_present_${init.symlink_2_canon}_reached" };
      "ok_symlink3" and => { islink("${init.symlink_3}"), "promise_repaired_file_symlink_present_${init.symlink_3_canon}", "file_symlink_present_${init.symlink_3_canon}_repaired", "file_symlink_present_${init.symlink_3_canon}_ok", "file_symlink_present_${init.symlink_3_canon}_reached" };
      "ok_symlink4" and => { islink("${init.symlink_4}"), "promise_repaired_file_symlink_present_${init.symlink_4_canon}", "file_symlink_present_${init.symlink_4_canon}_repaired", "file_symlink_present_${init.symlink_4_canon}_ok", "file_symlink_present_${init.symlink_4_canon}_reached" };
      "ok_symlink5" and => { islink("${init.symlink_5}"), "promise_repaired_file_symlink_present_${init.symlink_5_canon}", "file_symlink_present_${init.symlink_5_canon}_repaired", "file_symlink_present_${init.symlink_5_canon}_ok", "file_symlink_present_${init.symlink_5_canon}_reached" };
      "ok_symlink6" and => { islink("${init.symlink_6}"), "promise_repaired_file_symlink_present_${init.symlink_6_canon}", "file_symlink_present_${init.symlink_6_canon}_repaired", "file_symlink_present_${init.symlink_6_canon}_ok", "file_symlink_present_${init.symlink_6_canon}_reached" };
      "ok"          and        => { "ok_symlink1", "ok_symlink2", "ok_symlink3", "ok_symlink4", "ok_symlink5", "ok_symlink6" };

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";

}
