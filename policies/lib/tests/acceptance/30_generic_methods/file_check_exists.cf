#########################################
#
# Test checking if a file exists or not 
# 
#########################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    "tmp"         string => getenv("TEMP", 1024);
    "file"        string => "${tmp}/test";
    "file1"       string => "${tmp}/test1";
    "file_canon"  string => canonify("${file}");
    "file1_canon" string => canonify("${file1}");
    "file_list"   slist => { "${file}", "${file1}" };


  files:
    "${file}"
      create => "true",
      perms  => mog("000", "root", "0");
}

#######################################################

bundle agent test
{
  methods:
    "fce" usebundle => file_check_exists("${init.file_list}");
}

#######################################################

bundle agent check
{
  vars:
    # file should exist
    "file_check_exists_test"  string => "/bin/ls \"${init.file}\"";
    # File shouldn't exist
    "file_check_exists_test1"  string => "/bin/ls \"${init.file1}\"";

  classes:
    "file_check_exists_test_ok"
      expression => returnszero("${file_check_exists_test}", "useshell"),
      ifvarclass => canonify("file_check_exists_${init.file}_reached");
    "file_check_exists_test1_ok"
      expression => returnszero("${file_check_exists_test1}", "useshell"),
      ifvarclass => canonify("file_check_exists_${init.file1}_reached");

    "ok"                   expression => "file_check_exists_test_ok.file_check_exists_${init.file_canon}_ok.!file_check_exists_test1_ok.!file_check_exists_${init.file1_canon}_ok.file_check_exists_${init.file_canon}_reached.file_check_exists_${init.file1_canon}_reached";

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
    !file_check_exists_test_ok::
      "${file} is not present as expected";
    file_check_exists_test1_ok::
      "${file1} is not absent as expected";

    cfengine::
      "Check of ${init.file} is not reached"
        ifvarclass => "!file_check_exists_${init.file_canon}_reached";
      "Check of ${init.file1} is not reached"
        ifvarclass => "!file_check_exists_${init.file1_canon}_reached";

}
