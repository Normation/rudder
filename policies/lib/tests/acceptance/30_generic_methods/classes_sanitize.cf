#######################################################
#
# Test checking if ACLs are present or not
# 
# Apply permissions_posix_acls_absent in enforce mode with recursion on
#         unknown_file1
# Apply permissions_posix_acls_absent in enforce mode without recursion on
#         unknown_file*
# They all should fail since they do not exist
# 
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
      "tmp"       string => getenv("TEMP", 1024);
      "prefix[1]" string => "prefix1";
      "prefix[2]" string => "prefix2";
      "prefix[3]" string => "prefix3";

      "expected_outcome[1]" string => "success";
      "expected_outcome[2]" string => "repaired";
      "expected_outcome[3]" string => "error";

  methods:
      # Init base classes
      "success1"  usebundle => _classes_success("${prefix[1]}");

      "success2"  usebundle => _classes_success("${prefix[2]}");
      "repaired2" usebundle => _classes_repaired("${prefix[2]}");

      "success3"  usebundle => _classes_success("${prefix[3]}");
      "repaired3" usebundle => _classes_repaired("${prefix[3]}");
      "error3"    usebundle => _classes_failure("${prefix[3]}");

      # Init expected classes
      "expected_classes" usebundle => define_expected_classes("${prefix[1]}", "${expected_outcome[1]}", "ph1");
      "expected_classes" usebundle => define_expected_classes("${prefix[2]}", "${expected_outcome[2]}", "ph2");
      "expected_classes" usebundle => define_expected_classes("${prefix[3]}", "${expected_outcome[3]}", "ph3");
}

#######################################################

bundle agent test
{
  methods:
    "ph1" usebundle => _classes_sanitize("${init.prefix[1]}");
    "ph2" usebundle => _classes_sanitize("${init.prefix[2]}");
    "ph3" usebundle => _classes_sanitize("${init.prefix[3]}");
}

#######################################################

bundle agent check
{
  classes:
      "ph1_ok" expression => "${define_expected_classes.report_string_ph1}";
      "ph2_ok" expression => "${define_expected_classes.report_string_ph2}";
      "ph3_ok" expression => "${define_expected_classes.report_string_ph3}";

      "ok"     expression => "ph1_ok.ph2_ok.ph3_ok";

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
}
