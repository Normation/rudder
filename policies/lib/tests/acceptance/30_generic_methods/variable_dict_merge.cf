#######################################################
#
# Create a dict variable by merging two other variables
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:

    "dict1" data => parsejson('{ "key1": "value1", "key2": "value2", "key3": { "keyx": "valuex" }, "key4": [ "valuey" ] }');
    "dict2" data => parsejson('{ "key1": "value1bis", "key4": "value4" }');
    "ref" string => '{
  "key1": "value1bis",
  "key2": "value2",
  "key3": {
    "keyx": "valuex"
  },
  "key4": "value4"
}';
    # CFEngine 3.6 has different output
    "ref2" string => '{
  "key2": "value2",
  "key3": {
    "keyx": "valuex"
  },
  "key1": "value1bis",
  "key4": "value4"
}';

}

#######################################################

bundle agent test
{
  methods:
    "ph3" usebundle => variable_dict_merge("prefix", "var3", "init.dict1", "init.dict2");
    "ph4" usebundle => variable_dict_merge("prefix", "var4", "init.undef", "init.dict2");
    "ph5" usebundle => variable_dict_merge("prefix", "var5", "init.dict1", "init.undef");
    "ph6" usebundle => variable_dict_merge("prefix", "var6", "init.undef", "init.undef");
}

#######################################################

bundle agent check
{
  vars:
    "result3" string => storejson("prefix.var3");

  classes:
   
    "ok_class_3" expression => "variable_dict_merge_var3_kept.!variable_dict_merge_var3_repaired.!variable_dict_merge_var3_error"; 
    "ok_class_4" expression => "!variable_dict_merge_var4_kept.!variable_dict_merge_var4_repaired.variable_dict_merge_var4_error"; 
    "ok_class_5" expression => "!variable_dict_merge_var5_kept.!variable_dict_merge_var5_repaired.variable_dict_merge_var5_error"; 
    "ok_class_6" expression => "!variable_dict_merge_var6_kept.!variable_dict_merge_var6_repaired.variable_dict_merge_var6_error"; 
    "ok_value_3" expression => strcmp("${result3}", "${init.ref}");
    "ok_value_3" expression => strcmp("${result3}", "${init.ref2}");
    "ok_value_4" not => isvariable("prefix.var4");
    "ok_value_5" not => isvariable("prefix.var5");
    "ok_value_6" not => isvariable("prefix.var6");

    "ok_3" expression => "ok_class_3.ok_value_3";
    "ok_4" expression => "ok_class_4.ok_value_4";
    "ok_5" expression => "ok_class_5.ok_value_5";
    "ok_6" expression => "ok_class_6.ok_value_6";

    "ok"  expression => "ok_3.ok_4.ok_5.ok_6";

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
}
