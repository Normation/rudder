#######################################################
#
# Create a read a json
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    "tmp" string => getenv("TEMP", 1024);
}

#######################################################

bundle agent test
{
  methods:
    "ph1" usebundle => variable_dict_from_osquery("prefix", "var1", "select cpu_logical_cores from system_info;");
}

#######################################################

bundle agent check
{
  classes:
    "has_osquery" expression => isexecutable("/usr/bin/osqueryi");
    "ok_1" expression => strcmp("${prefix.var1[0][cpu_logical_cores]}", "${sys.cpus}");
    "ok_1_class" expression => "variable_dict_from_osquery_var1_kept.!variable_dict_from_osquery_var1_repaired.!variable_dict_from_osquery_var1_error";
    "ok"  expression => "ok_1.ok_1_class";

  reports:
    ok|!has_osquery::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
}
