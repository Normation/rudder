#######################################################
#
# Test checking if ACLs are present or not
# 
# Create: acl_absent_test/sub_dir1/file1
#         acl_absent_test/sub_dir2/file1
#         acl_absent_test/file1
#
# Set ACLs on every file and dir except acl_absent_test/sub_dir1/file1
# Apply permissions_posix_acls_absent in audit mode without recursion on
#         acl_absent_test/sub_dir1
#         acl_absent_test/sub_dir2
#         acl_absent_test/file1
#         unknown_file
#         acl_absent_test/*
# They all should fail since they have ACls set
# 
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
      "tmp"   string => getenv("TEMP", 1024);
      "user"  string => "bin";

      "files[1]" string => "acl_absent_test/sub_dir1/.";
      "files[2]" string => "acl_absent_test/sub_dir1/file1";
      "files[3]" string => "acl_absent_test/file1";
      "files[4]" string => "acl_absent_test/sub_dir2/.";
      "files[5]" string => "acl_absent_test/sub_dir2/file1";
      "files[6]" string => "unknown_file";
      "files[7]" string => "acl_absent_test/*";

      "indices" slist => { "1", "2", "3", "4", "5", "6", "7" };
      "create_indices" slist => { "1", "2", "3", "4", "5" };
      "effective_indices" slist => { "1", "3", "4", "6", "7" };

      "files_canon[${indices}]" string => canonify("${files[${indices}]}");

      "expected_old_class_prefix[${indices}]" string => canonify("permissions_posix_acls_absent_${tmp}/${files[${indices}]}");
      "expected_class_prefix[${indices}]"     string => canonify("permissions_posix_acls_absent_${tmp}/${files[${indices}]}_false");

  classes:
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";

    pass2::
      # Do not put ACLs on the sub file to check if it detects correctly the acls in sub files
      "acls_set_1" expression => returnszero("${paths.setfacl} -m u:${user}:rx ${tmp}/${files[1]}", "useshell"),
        scope => "namespace";
      "acls_set_2" expression => returnszero("${paths.setfacl} -b ${tmp}/${files[2]}", "useshell"),
        scope => "namespace";
      "acls_set_3" expression => returnszero("${paths.setfacl} -m u:${user}:rx ${tmp}/${files[3]}", "useshell"),
        scope => "namespace";
      "acls_set_4" expression => returnszero("${paths.setfacl} -m u:${user}:rx ${tmp}/${files[4]}", "useshell"),
        scope => "namespace";
      "acls_set_5" expression => returnszero("${paths.setfacl} -m u:${user}:rx ${tmp}/${files[5]}", "useshell"),
        scope => "namespace";


  files:
    # Do not create the unknown_file
    any::
      "${tmp}/${files[${create_indices}]}"
        create => "true",
        perms  => mog("555", "root", "0");
}

#######################################################

bundle agent test
{
  vars:
    "args${init.effective_indices}" slist => {"${init.tmp}/${init.files[${init.effective_indices}]}", "false"};

  methods:
    "ph1" usebundle => apply_gm("permissions_posix_acls_absent", @{args1}, "error", "ph1", "audit");
    "ph3" usebundle => apply_gm("permissions_posix_acls_absent", @{args3}, "error", "ph3", "audit");
    "ph4" usebundle => apply_gm("permissions_posix_acls_absent", @{args4}, "error", "ph4", "audit");
    "ph6" usebundle => apply_gm("permissions_posix_acls_absent", @{args6}, "error", "ph6", "audit");
    "ph7" usebundle => apply_gm("permissions_posix_acls_absent", @{args7}, "error", "ph7", "audit");
}

#######################################################

bundle agent check
{
  vars:
     "getfacl_output[${init.create_indices}]" string => execresult("${paths.getfacl} --skip-base ${init.tmp}/${init.files[${init.create_indices}]}", "useshell"),
       ifvarclass => "acls_set_${init.create_indices}";

  classes:
     "classes_ok" expression => "ph1_ok.ph3_ok.ph4_ok.ph6_ok.ph7_ok";

     # We want the output to be not empty except on 2
     # For the regex entry, it is checked if all others files are already ok
     "cleanup_1"          not => strcmp("", "${getfacl_output[1]}");
     "cleanup_2"   expression => strcmp("", "${getfacl_output[2]}");
     "cleanup_3"          not => strcmp("", "${getfacl_output[3]}");
     "cleanup_4"          not => strcmp("", "${getfacl_output[4]}");
     "cleanup_5"          not => strcmp("", "${getfacl_output[5]}");
     # No cleanup check on unknown file
     "all_cleanup" expression => "cleanup_1.cleanup_2.cleanup_3.cleanup_4.cleanup_5";

     "ok"          expression => "all_cleanup.classes_ok";

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
    any::
      "Unexpected ACLs change on ${init.tmp}/${init.files[${init.create_indices}]}"
      ifvarclass => "!cleanup_${init.create_indices}";
}
