#######################################################
#
# Compute and format a math expression into a string variable
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    "tmp"         string => getenv("TEMP", 1024);
    "three"       string => "3";
}

#######################################################

bundle agent test
{
  methods:
    
    "ph1" usebundle => variable_string_from_math_expression("prefix", "var1", "${init.three}*(2.0+3.0)", "%d");
    "ph2" usebundle => variable_string_from_math_expression("prefix", "var2", "${init.three}*(2.0+4.0)", "%x");
}

#######################################################

bundle agent check
{
  classes:
    
    "ok_1" expression => "variable_string_from_math_expression_var1_kept.!variable_string_from_math_expression_var1_repaired.!variable_string_from_math_expression_var1_error";
    "ok_2" expression => "variable_string_from_math_expression_var2_kept.!variable_string_from_math_expression_var2_repaired.!variable_string_from_math_expression_var2_error";
    "ok_var1" expression => strcmp("${prefix.var1}", "15");
    "ok_var2" expression => strcmp("${prefix.var2}", "12");

    "ok"  expression => "ok_1.ok_var1.ok_2.ok_var2";

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
}
