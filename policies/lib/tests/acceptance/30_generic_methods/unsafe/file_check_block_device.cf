#########################################
#
# Test checking if a block device or not
#
#########################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    "tmp"            string => getenv("TEMP", 1024);
    "file"           string => "${tmp}/test";
    "file_canon"     string => canonify("${file}");

    "block_device"        string => "${tmp}/block_device";
    "block_device_canon"  string => canonify("${block_device}");

    "file_list"       slist => { "${file}", "${block_device}" };
    solaris::
      "mknod"          string => "/usr/sbin/mknod";
    debian::
      "mknod"          string => "/bin/mknod";
    !solaris.!debian::
      "mknod"          string => "/usr/bin/mknod";

  files:
    "${file}"
      create => "true";

  commands:
    "${mknod}"
      args => "\"${block_device}\" b 7 0", # /dev/loop0
      if => "solaris";

    "${mknod}"
      args => "-m 640 \"${block_device}\" b 7 0", # /dev/loop0
      if => "!solaris";

}

#######################################################

bundle agent test
{
  methods:
    "fce" usebundle => file_check_block_device("${init.file_list}");
}

#######################################################

bundle agent check
{
  vars:
    # Check file type
    "test_file_type"        string => "/usr/bin/file -b \"${init.file}\"";

    # Check block_device type
    "test_block_device_type"     string => "/usr/bin/file -b \"${init.block_device}\"";

  classes:
    "test_file_is_block_device"
      expression => regcmp("block special.*", execresult("${test_file_type}", "noshell") ),
      ifvarclass => "file_check_block_device_${init.file_canon}_reached";

    "test_block_device_is_block_device"
      expression => regcmp("block special.*", execresult("${test_block_device_type}", "noshell") ),
      ifvarclass => "file_check_block_device_${init.block_device_canon}_reached";

    "ok"   expression => "test_block_device_is_block_device.file_check_block_device_${init.block_device_canon}_ok.!test_file_is_block_device.!file_check_block_device_${init.file_canon}_ok.file_check_block_device_${init.file_canon}_reached";

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
    !test_block_device_is_block_device::
      "${init.block_device} is not a block_device as expected. It is '${test_block_device_type}'";
    test_file_is_block_device::
      "${init.file} is a block_device, not as expected. It is '${test_file_type}'";

    cfengine::
      "Check of ${init.file} is not reached"
        ifvarclass => "!file_check_block_device_${init.file_canon}_reached";
      "Check of ${init.block_device} is not reached"
        ifvarclass => "!file_check_block_device_${init.block_device_canon}_reached";

}
