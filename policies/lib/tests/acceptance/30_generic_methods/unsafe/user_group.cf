#######################################################
#
# Test setting user secondary group
# Works with users rudder_{i}
# cleaned in post execution
# 
#######################################################

bundle common acc_path
{
  vars:
      "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
      # REPAIR
      "user[1]"           string => "rudder_1";
      "group[1]"          string => "ruddergroup_1";
      "expected_group[1]" string => "ruddergroup_1";
      "init_group[1]"     string => "";      # init group for user
      "create_group[1]"   string => "false";  # precreate group, yes or no
      "create_user[1]"    string => "true";  # precreate user, yes or no
      "mode[1]"           string => "enforce";
      "status[1]"         string => "repaired";

      "user[2]"           string => "rudder_2";
      "group[2]"          string => "ruddergroup_2";
      "expected_group[2]" string => "ruddergroup_1 ruddergroup_2";
      "init_group[2]"     string => "ruddergroup_1";     # init group for user
      "create_group[2]"   string => "true";  # precreate group, yes or no
      "create_user[2]"    string => "true";  # precreate user, yes or no
      "mode[2]"           string => "enforce";
      "status[2]"         string => "repaired";

      "user[2bis]"           string => "rudder_2";
      "group[2bis]"          string => "ruddergroup_2bis";
      "expected_group[2bis]" string => "ruddergroup_1 ruddergroup_2 ruddergroup_2bis";
      "init_group[2bis]"     string => "";
      "create_group[2bis]"   string => "false"; 
      "create_user[2bis]"    string => "false"; 
      "mode[2bis]"           string => "enforce";
      "status[2bis]"         string => "repaired";
      
      # SUCCESS
      "user[3]"           string => "rudder_3";
      "group[3]"          string => "ruddergroup_3";
      "expected_group[3]" string => "ruddergroup_3";
      "init_group[3]"     string => "ruddergroup_3";     # init group for user
      "create_group[3]"   string => "true";  # precreate group, yes or no
      "create_user[3]"    string => "true";  # precreate user, yes or no
      "mode[3]"           string => "enforce";
      "status[3]"         string => "success";
      
      "user[4]"           string => "rudder_4";
      "group[4]"          string => "ruddergroup_4";
      "expected_group[4]" string => "ruddergroup_4 ruddergroup_1";
      "init_group[4]"     string => "ruddergroup_4,ruddergroup_1";     # init group for user
      "create_group[4]"   string => "true";  # precreate group, yes or no
      "create_user[4]"    string => "true";  # precreate user, yes or no
      "mode[4]"           string => "enforce";
      "status[4]"         string => "success";
      
      # ERROR
      "user[5]"           string => "rudder_5";
      "group[5]"          string => "ruddergroup_5";
      "expected_group[5]" string => "ruddergroup_5";
      "init_group[5]"     string => "";     # init group for user
      "create_group[5]"   string => "false";  # precreate group, yes or no
      "create_user[5]"    string => "false";  # user doesn't exist
      "mode[5]"           string => "enforce";
      "status[5]"         string => "error";

      "user[6]"           string => "rudder_6";
      "group[6]"          string => "ruddergroup_none";
      "expected_group[6]" string => "ruddergroup_none";
      "init_group[6]"     string => "";     # init group for user
      "create_group[6]"   string => "false";  # group don't exist
      "create_user[6]"    string => "true";  # user  exists
      "mode[6]"           string => "enforce";
      "status[6]"         string => "error";

      # Audit
      "user[7]"           string => "rudder_7";
      "group[7]"          string => "ruddergroup_7";
      "expected_group[7]" string => "ruddergroup_7";
      "init_group[7]"     string => "ruddergroup_7";     # init group for user
      "create_group[7]"   string => "true";  # group exists
      "create_user[7]"    string => "true";  # user  exists
      "mode[7]"           string => "audit";
      "status[7]"         string => "success";

      "user[8]"           string => "rudder_8";
      "group[8]"          string => "ruddergroup_8";
      "expected_group[8]" string => "ruddergroup_8";
      "init_group[8]"     string => "";     # init group for user
      "create_group[8]"   string => "false";  # group exists
      "create_user[8]"    string => "true";  # user  exists
      "mode[8]"           string => "audit";
      "status[8]"         string => "error";
      
      "indices" slist => {1, 2, "2bis", 3, 4, 5, 6, 7, 8};
      
  classes:
      # define create class
      "create_user_${indices}"  expression => strcmp("${create_user[${indices}]}", "true");
      "create_group_${indices}" expression => strcmp("${create_group[${indices}]}", "true");
      
  commands:
      # create groups
      "${paths.groupadd} ruddergroup_${indices}";
      
      # create user
      "${paths.useradd} ${user[${indices}]}"
        if => "create_user_${indices}";
        
      "${paths.usermod} -a -G ${init_group[${indices}]} ${user[${indices}]}"
        if => "create_user_${indices}.create_group_${indices}";
        
}

#######################################################

bundle agent test
{
  vars:
      "args${init.indices}" slist => { "${init.user[${init.indices}]}", "${init.group[${init.indices}]}" };
  classes:
      "pass2" expression => "pass1";
      "pass1" expression => "any";

  methods:
    pass1.!pass2::
    #REPAIRED
      "ph1" usebundle => apply_gm("user_group", @{args1}, "${init.status[1]}", "ph1", "${init.mode[1]}" );
      "ph2" usebundle => apply_gm("user_group", @{args2}, "${init.status[2]}", "ph2", "${init.mode[2]}" );
      "ph2bis" usebundle => apply_gm("user_group", @{args2bis}, "${init.status[2bis]}", "ph2bis", "${init.mode[2bis]}" );
    # SUCCESS
      "ph3" usebundle => apply_gm("user_group", @{args3}, "${init.status[3]}", "ph3", "${init.mode[3]}" );
      "ph4" usebundle => apply_gm("user_group", @{args4}, "${init.status[4]}", "ph4", "${init.mode[4]}" );
    # ERROR
      "ph5" usebundle => apply_gm("user_group", @{args5}, "${init.status[5]}", "ph5", "${init.mode[5]}" );
      "ph6" usebundle => apply_gm("user_group", @{args6}, "${init.status[6]}", "ph6", "${init.mode[6]}" );
    # AUDIT
      "ph7" usebundle => apply_gm("user_group", @{args7}, "${init.status[7]}", "ph7", "${init.mode[7]}" );
      "ph8" usebundle => apply_gm("user_group", @{args8}, "${init.status[8]}", "ph8", "${init.mode[8]}" );
}


#######################################################

bundle agent check
{
  vars:
    pass1::
      "user_group[${init.indices}]" string => execresult("${ncf_paths.path[id]} -Gn ${init.user[${init.indices}]}", "useshell");


  classes:
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";
      
      # checking mode only for enforce mode
      "execute_${init.indices}" expression => strcmp("${init.mode[${init.indices}]}", "enforce");
      "result_nok"                     not => strcmp("${user_group[${init.indices}]}", "${init.expected_group[${init.indices}]}"),
                                        if => "execute_${init.indices}";

      # classes_ok is just a placeholder. What we really want is find the not ok
      "classes_not_ok"  expression => or("classes_ok", "!ph${init.indices}_ok");
      "ok"              expression => "!classes_not_ok.!result_nok";

  commands:
    pass3::
      "${paths.userdel} ${init.user[${init.indices}]}";
      "${paths.groupdel} ruddergroup_${init.indices}";

  reports:
    pass3::
      "Test for user_group nb ${init.indices} FAILED"
        ifvarclass => "!ph${init.indices}_ok";

    pass3.ok::
      "$(this.promise_filename) Pass";
    pass3.!ok::
      "$(this.promise_filename) FAIL";
}

#######################################################
