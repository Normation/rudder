#######################################################
#
# Test checking user creation
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    "user"        string => "user1";
    "description" string => "the user";
    "home"        string => "/tmp/userhome";
    "group"       string => "bin";
    "shell"       string => "/bin/sh";
    "locked"      string => "false";
}

#######################################################

bundle agent test
{
  methods:
    "ph1" usebundle => user_create("${init.user}", "${init.description}", "${init.home}", "${init.group}", "${init.shell}", "${init.locked}");
}

#######################################################

bundle agent check
{
  vars:
    pass1::
      "user_line" string => execresult("${paths.path[grep]} '^${init.user}:' /etc/passwd", "useshell");

  classes:
    pass1::
      "user1_ok" expression => regcmp("user1:x:\d+:\d+:the user:/tmp/userhome:/bin/sh", "${user_line}");

      "ph1_ok" expression => "!user_create_${init.user}_kept.user_create_${init.user}_repaired.!user_create_${init.user}_error";

      "ok" expression => "user1_ok.ph1_ok";

    any::
      "pass1" expression => "any";

  commands:
    pass1::
      "/usr/sbin/userdel ${init.user}" handle => "h1";

  reports:
    pass1.ok::
      "$(this.promise_filename) Pass";
    pass1.!ok::
      "$(this.promise_filename) FAIL";
    pass1.user1_ok::
      "user1_ok";
    pass1.ph1_ok::
      "ph1_ok";
}
