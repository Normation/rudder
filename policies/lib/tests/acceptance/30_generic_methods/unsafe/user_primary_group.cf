
#######################################################
#
# Test checking user_primary_group
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    # Enforce mode
    "user[1]"          string => "user1";
    "primary_group[1]" string => "ncf_test_group1";
    "status[1]"        string => "repaired";
    "mode[1]"          string => "enforce";

    "user[2]"          string => "user2";
    "primary_group[2]" string => "ncf_test_group2";
    "status[2]"        string => "success";
    "mode[2]"          string => "enforce";

    "user[3]"          string => "user3";
    "primary_group[3]" string => "anonexistentgroup";
    "status[3]"        string => "error";
    "mode[3]"          string => "enforce";

    "user[4]"          string => "userthatdonotexist";
    "primary_group[4]" string => "ncf_test_group1";
    "status[4]"        string => "error";
    "mode[4]"          string => "enforce";

    # Audit mode
    "user[5]"          string => "user5";
    "primary_group[5]" string => "ncf_test_group1";
    "status[5]"        string => "error";
    "mode[5]"          string => "audit";

    "user[6]"          string => "user6";
    "primary_group[6]" string => "ncf_test_group1";
    "status[6]"        string => "success";
    "mode[6]"          string => "audit";

    "user[7]"          string => "user7";
    "primary_group[7]" string => "anonexistentgroup";
    "status[7]"        string => "error";
    "mode[7]"          string => "audit";


    "indices" slist => getindices("user");

    pass2::
      "line3"   string => execresult("${paths.path[grep]} '^${user[3]}:' /etc/passwd", "useshell");
      "line5"   string => execresult("${paths.path[grep]} '^${user[5]}:' /etc/passwd", "useshell");
      "line6"   string => execresult("${paths.path[grep]} '^${user[6]}:' /etc/passwd", "useshell");
      "line7"   string => execresult("${paths.path[grep]} '^${user[7]}:' /etc/passwd", "useshell");

  classes:
      "pass2" expression => "pass1";
      "pass1" expression => "any";

  methods:
      "user_present" usebundle => user_present("${user[1]}");
      "user_present" usebundle => user_present("${user[2]}");
      "user_present" usebundle => user_present("${user[3]}");
      "user_present" usebundle => user_present("${user[5]}");
      "user_present" usebundle => user_present("${user[6]}");
      "user_present" usebundle => user_present("${user[7]}");

  commands:
      "${paths.groupadd} ${primary_group[1]}";
      "${paths.groupadd} ${primary_group[2]}";

      "${paths.usermod} -g ${init.primary_group[2]} ${init.user[2]}";
      "${paths.usermod} -g ${init.primary_group[6]} ${init.user[6]}";
}

#######################################################

bundle agent test
{
  vars:
    "args${init.indices}" slist => { "${init.user[${init.indices}]}", "${init.primary_group[${init.indices}]}" };

  methods:
      "ph1" usebundle => apply_gm("user_primary_group", @{args1},  "${init.status[1]}",  "ph1",  "${init.mode[1]}");
      "ph2" usebundle => apply_gm("user_primary_group", @{args2},  "${init.status[2]}",  "ph2",  "${init.mode[2]}");
      "ph3" usebundle => apply_gm("user_primary_group", @{args3},  "${init.status[3]}",  "ph3",  "${init.mode[3]}");
      "ph4" usebundle => apply_gm("user_primary_group", @{args4},  "${init.status[4]}",  "ph4",  "${init.mode[4]}");

      "ph5" usebundle => apply_gm("user_primary_group", @{args5},  "${init.status[5]}",  "ph5",  "${init.mode[5]}");
      "ph6" usebundle => apply_gm("user_primary_group", @{args6},  "${init.status[6]}",  "ph6",  "${init.mode[6]}");
      "ph7" usebundle => apply_gm("user_primary_group", @{args7},  "${init.status[7]}",  "ph7",  "${init.mode[7]}");

}

#######################################################

bundle agent check
{
  vars:
    pass1::
      "gid1"       int => getgid("${init.primary_group[1]}");
      "gid2"       int => getgid("${init.primary_group[2]}");
      "uid${init.indices}" int => getuid("${init.user[${init.indices}]}");

      "user_line1" string => execresult("${paths.path[grep]} '^${init.user[1]}:' /etc/passwd", "useshell");
      "user_line2" string => execresult("${paths.path[grep]} '^${init.user[2]}:' /etc/passwd", "useshell");
      "user_line3" string => execresult("${paths.path[grep]} '^${init.user[3]}:' /etc/passwd", "useshell");
      "user_line4" string => execresult("${paths.path[grep]} '^${init.user[4]}:' /etc/passwd", "useshell");
      "user_line5" string => execresult("${paths.path[grep]} '^${init.user[5]}:' /etc/passwd", "useshell");
      "user_line6" string => execresult("${paths.path[grep]} '^${init.user[6]}:' /etc/passwd", "useshell");
      "user_line7" string => execresult("${paths.path[grep]} '^${init.user[7]}:' /etc/passwd", "useshell");

  classes:
    pass1::
      "user1_ok"   expression => regcmp("(${init.user[1]}):x:${uid1}:${gid1}::\/home\/\1:.*", "${user_line1}");
      "user2_ok"   expression => regcmp("${init.user[2]}:x:${uid2}:${gid2}.*", "${user_line2}");
      "user3_ok"   expression => strcmp("${init.line3}", "${user_line3}");
      "user4_ok"   expression => regcmp("", "${user_line4}");
      "user5_ok"   expression => regcmp("${init.line5}", "${user_line5}");
      "user6_ok"   expression => regcmp("${init.line6}", "${user_line6}");
      "user7_ok"   expression => regcmp("${init.line7}", "${user_line7}");

      "users_ok"   expression => "user1_ok.user2_ok.user3_ok.user4_ok.user5_ok.user6_ok.user7_ok";
      "classes_ok" expression => "ph1_ok.ph2_ok.ph3_ok.ph4_ok.ph5_ok.ph6_ok.ph7_ok";
      "ok"         expression => "users_ok.classes_ok";

    any::
      "pass2"      expression => "pass1";
      "pass1"      expression => "any";

  commands:
    pass2::
      "${paths.userdel}  ${init.user[${init.indices}]}" handle => "deluser${init.indices}";
      "${paths.groupdel} ${init.user[${init.indices}]}" handle => "delgroup${init.indices}";
      "${paths.groupdel} ${init.primary_group[1]}" handle => "del1";
      "${paths.groupdel} ${init.primary_group[2]}" handle => "del2";

  reports:
    pass2.ok::
      "$(this.promise_filename) Pass";
    pass2.!ok::
      "$(this.promise_filename) FAIL";
    pass2::
      "user${init.indices}"
        ifvarclass => "user${init.indices}_ok";
}

