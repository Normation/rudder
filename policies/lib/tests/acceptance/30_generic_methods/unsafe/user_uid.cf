#######################################################
#
# Test checking user_uid
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    "user1" string => "user1";
    "user2" string => "user2";
    "user3" string => "user3";
}

#######################################################

bundle agent test
{
  vars:
    "uid1b" string => "242424";
    pass3::
      "uid1"  int    => getuid("${init.user1}");
      "uid2"  int    => getuid("${init.user2}");

  classes:
    any::
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";

  methods:
    pass1::
      "ph1" usebundle => user_present("${init.user1}");
      "ph2" usebundle => user_present("${init.user2}");
    pass3::
      "ph3" usebundle => user_uid("${init.user3}", "${uid2}");
      "ph4" usebundle => user_uid("${init.user2}", "${uid1}");
      "ph5" usebundle => user_uid("${init.user1}", "${uid1b}");

}

#######################################################

bundle agent check
{
  vars:
    pass1::
      "user_line1" string => execresult("${paths.path[grep]} '^${init.user1}:' /etc/passwd", "useshell");
      "user_line2" string => execresult("${paths.path[grep]} '^${init.user2}:' /etc/passwd", "useshell");
      "user_line3" string => execresult("${paths.path[grep]} '^${init.user3}:' /etc/passwd", "useshell");

  classes:
    any::
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";

    pass2::
      "user1_ok" expression  => regcmp("^(${init.user1}):x:${test.uid1b}:([0-9]+)::\/home\/\1:.*", "${user_line1}");
      "user2_ok" expression  => regcmp("^(${init.user2}):x:${test.uid2}:([0-9]+)::\/home\/\1:.*", "${user_line2}");
      "user3_ok" expression  => strcmp("", "${user_line3}");

      "ph1_ok" expression => "!user_present_${init.user1}_kept.user_present_${init.user1}_repaired.!user_present_${init.user1}_error";
      "ph2_ok" expression => "!user_present_${init.user2}_kept.user_present_${init.user2}_repaired.!user_present_${init.user2}_error";
      "ph3_ok" expression => "!user_uid_${init.user3}_kept.!user_uid_${init.user3}_repaired.user_uid_${init.user3}_error";
      "ph4_ok" expression => "!user_uid_${init.user2}_kept.!user_uid_${init.user2}_repaired.user_uid_${init.user2}_error";
      "ph5_ok" expression => "!user_uid_${init.user1}_kept.user_uid_${init.user1}_repaired.!user_uid_${init.user1}_error";

      "ok" expression => "user1_ok.user2_ok.user3_ok.ph1_ok.ph2_ok.ph3_ok.ph4_ok.ph5_ok";
    

  commands:
    pass3::
      "/usr/sbin/userdel ${init.user1}" handle => "h1";
      "/usr/sbin/userdel ${init.user2}" handle => "h2";
      "/usr/sbin/userdel ${init.user3}" handle => "h3";

  reports:
    pass3.ok::
      "$(this.promise_filename) Pass";
    pass3.!ok::
      "$(this.promise_filename) FAIL";
    pass3.user1_ok::
      "user1_ok";
    pass3.user2_ok::
      "user2_ok";
    pass3.user3_ok::
      "user3_ok";
    pass3.ph1_ok::
      "ph1_ok";
    pass3.ph2_ok::
      "ph2_ok";
    pass3.ph3_ok::
      "ph3_ok";
    pass3.ph4_ok::
      "ph4_ok";
    pass3.ph5_ok::
      "ph5_ok";
}

