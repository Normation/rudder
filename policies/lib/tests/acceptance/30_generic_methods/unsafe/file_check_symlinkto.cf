#########################################
#
# Test checking if a file is a symlink to a file or not 
# 
#########################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    "tmp"            string => getenv("TEMP", 1024);
    "file"           string => "${tmp}/test";

    "symlink_good_name"     string => "${tmp}/symlink_good";
    "symlink_good_target"   string => "${file}";
    "symlink_good_canon"    string => canonify("${symlink_good_name}");

    "symlink_bad_name"      string => "${tmp}/symlink_bad";
    "symlink_bad_target"    string => "/dev/null";
    "symlink_bad_canon"     string => canonify("${symlink_bad_name}");

    "symlink_list"           slist => { "${symlink_good_name}", "${symlink_bad_name}" };

  files:
    "${file}"
      create => "true";

    "${symlink_good_name}"
      link_from => ln_s("${symlink_good_target}");

    "${symlink_bad_name}"
      link_from => ln_s("${symlink_bad_target}");

}

#######################################################

bundle agent test
{
  methods:
    "fce" usebundle => file_check_symlinkto("${init.symlink_list}", "${init.file}");
}

#######################################################

bundle agent check
{
  vars:
    # Check symlink_good target
    "test_good_target"       string => "/usr/bin/file -b \"${init.symlink_good_name}\"";

    # Check symlink type
    "test_bad_target"        string => "/usr/bin/file -b \"${init.symlink_bad_name}\"";

  classes:
    "symlink_good_is_ok"
      expression => regcmp("symbolic link to `*${init.symlink_good_target}'*", execresult("${test_good_target}", "noshell") ),
      ifvarclass => "file_check_symlinkto_${init.symlink_good_canon}_reached";

    "symlink_bad_is_ok"
      expression => regcmp("symbolic link to `*${init.symlink_good_target}'*",  execresult("${test_bad_target}", "noshell") ),
      ifvarclass => "file_check_symlinkto_${init.symlink_bad_canon}_reached";

    "ok"   expression => "symlink_good_is_ok.file_check_symlinkto_${init.symlink_good_canon}_ok.!symlink_bad_is_ok.!file_check_symlinkto_${init.symlink_bad_canon}_ok.file_check_symlinkto_${init.symlink_bad_canon}_reached";

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
    !symlink_good_is_ok::
      "${init.symlink_good_name} is a symlink not pointing to where expected";
    symlink_bad_is_ok::
      "${init.symlink_bad_name} is a symlink pointing to where not expected.";

    cfengine::
      "Check of ${init.symlink_good_name} is not reached"
        ifvarclass => "!file_check_symlinkto_${init.symlink_good_canon}_reached";
      "Check of ${init.symlink_bad_name} is not reached"
        ifvarclass => "!file_check_symlinkto_${init.symlink_bad_canon}_reached";

}
