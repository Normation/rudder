#########################################
#
# Test checking if a file is a regular file or not
# 
#########################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    "tmp"            string => getenv("TEMP", 1024);
    "file"           string => "${tmp}/test";
    "file_canon"     string => canonify("${file}");

    "symlink"        string => "${tmp}/symlink";
    "symlink_canon"  string => canonify("${symlink}");

    "file_list"       slist => { "${file}", "${symlink}" };

  files:
    "${file}"
      create => "true";

    "${symlink}"
      link_from => ln_s("${file}");
}

#######################################################

bundle agent test
{
  methods:
    "fce" usebundle => file_check_regular("${init.file_list}");
}

#######################################################

bundle agent check
{
  vars:
    # Check file type
    "test_file_type"        string => "/usr/bin/file -b \"${init.file}\"";

    # Check symlink type
    "test_symlink_type"     string => "/usr/bin/file -b \"${init.symlink}\"";

  classes:
    "test_file_is_regular"
      expression => strcmp("empty", execresult("${test_file_type}", "noshell") ),
      ifvarclass => "file_check_regular_${init.file_canon}_reached";

    "test_symlink_is_regular"
      expression => regcmp("empty", execresult("${test_symlink_type}", "noshell") ),
      ifvarclass => "file_check_regular_${init.symlink_canon}_reached";

    "ok"   expression => "test_file_is_regular.file_check_regular_${init.file_canon}_ok.!test_symlink_is_regular.!file_check_regular_${init.symlink_canon}_ok.file_check_regular_${init.symlink_canon}_reached";

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
    test_symlink_is_regular::
      "${init.symlink} is a regular, not as expected.";
    !test_file_is_regular::
      "${init.file} is not a regular as expected.";

    cfengine::
      "Check of ${init.file} is not reached"
        ifvarclass => "!file_check_regular_${init.file_canon}_reached";
      "Check of ${init.symlink} is not reached"
        ifvarclass => "!file_check_regular_${init.symlink_canon}_reached";

}
