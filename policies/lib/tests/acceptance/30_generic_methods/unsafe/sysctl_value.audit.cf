#######################################################
#
# Test sysctl value setting in audit mode
# All values are put in 00_rudder.conf file and it ought to be
# cleaned in post execution
# 
#######################################################


bundle common acc_path
{
  vars:
      "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

body agent control {
      default_repository => "/tmp/modified-files";
}

#######################################################

bundle agent init
{
  vars:
      "tmp"                        string => getenv("TEMP", 1024);

    # Store initial values
      "exp1" string => execresult("${paths.sysctl} vm.swappiness > ${tmp}/backup.conf", "useshell");
      "exp2" string => execresult("${paths.sysctl} vm.dirty_ratio >> ${tmp}/backup.conf", "useshell");
      "exp3" string => execresult("${paths.sysctl} vm.lowmem_reserve_ratio >> ${tmp}/backup.conf", "useshell");
      "exp4" string => execresult("${paths.sysctl} vm.oom_dump_tasks >> ${tmp}/backup.conf", "useshell");
      "exp5" string => execresult("${paths.sysctl} vm.stat_interval >> ${tmp}/backup.conf", "useshell");


      "key[1]"       string => "vm.swappiness";
      "value[1]"     string => execresult("${paths.sysctl} -n vm.swappiness", "useshell");
      "expected[1]"  string => "${value[1]}";
      "filename[1]"  string => "00_rudder";
      "option[1]"    string => "default";
      "mode[1]"      string => "audit";       # mode, "enforce" or "audit"
      "status[1]"    string => "success";     # expected status, "repaired", "success" or "error"
      "execute[1]"   string => "true";        # Tell if an execution is needed

      "key[2]"       string => "vm.dirty_ratio";
      "value[2]"     string => "aaaa";
      "expected[2]"  string => "aaaa";
      "filename[2]"  string => "00_rudder";
      "option[2]"    string => "default";
      "mode[2]"      string => "audit";
      "status[2]"    string => "error";
      "execute[2]"   string => "true";

      "key[3]"       string => "vm.lowmem_reserve_ratio";
      "value[3]"     string => execresult("${paths.sysctl} -n vm.lowmem_reserve_ratio", "useshell");
      "expected[3]"  string => "${value[3]}";
      "filename[3]"  string => "00_rudder";
      "option[3]"    string => "min";
      "mode[3]"      string => "audit";
      "status[3]"    string => "success";
      "execute[3]"   string => "true";

      "key[4]"       string => "vm.oom_dump_tasks";
      "value[4]"     string => "99999"; # usually this is 1
      "expected[4]"  string => execresult("${paths.sysctl} -n vm.oom_dump_tasks", "useshell");
      "filename[4]"  string => "00_rudder";
      "option[4]"    string => "max";
      "mode[4]"      string => "audit";
      "status[4]"    string => "success";
      "execute[4]"   string => "true";

      "key[5]"       string => "vm.stat_interval";
      "value[5]"     string => "0"; # default is 1
      "expected[5]"  string => execresult("${paths.sysctl} -n vm.stat_interval", "useshell");
      "filename[5]"  string => "00_rudder";
      "option[5]"    string => "min";
      "mode[5]"      string => "audit";
      "status[5]"    string => "success";
      "execute[5]"   string => "true";

      "key[6]"       string => "vm.oom_dump_tasks";
      "value[6]"     string => "999";
      "expected[6]"  string => execresult("${paths.sysctl} -n vm.oom_dump_tasks", "useshell");
      "filename[6]"  string => "00_rudder";
      "option[6]"    string => "min";
      "mode[6]"      string => "audit";
      "status[6]"    string => "error";
      "execute[6]"   string => "true";

      "indices" slist => getindices("key");

  classes:
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";
      "create_${indices}" expression => strcmp("${create[${indices}]}", "true");

  # need to store existing values
  commands:

}
#######################################################

bundle agent test
{
  vars:
      "args${init.indices}" slist => { "${init.key[${init.indices}]}", "${init.value[${init.indices}]}", "${init.filename[${init.indices}]}", "${init.option[${init.indices}]}" };
  classes:
      "pass2" expression => "pass1";
      "pass1" expression => "any";

  methods:
    pass1.!pass2::
      "ph1" usebundle => apply_gm("sysctl_value", @{args1}, "${init.status[1]}", "ph1", "${init.mode[1]}" );
      "ph2" usebundle => apply_gm("sysctl_value", @{args2}, "${init.status[2]}", "ph2", "${init.mode[2]}" );
      "ph3" usebundle => apply_gm("sysctl_value", @{args3}, "${init.status[3]}", "ph3", "${init.mode[3]}" );
      "ph4" usebundle => apply_gm("sysctl_value", @{args4}, "${init.status[4]}", "ph4", "${init.mode[4]}" );
      "ph5" usebundle => apply_gm("sysctl_value", @{args5}, "${init.status[5]}", "ph5", "${init.mode[5]}" );
      "ph6" usebundle => apply_gm("sysctl_value", @{args6}, "${init.status[6]}", "ph6", "${init.mode[6]}" );

}

#######################################################

bundle agent check
{
  vars:
    pass1::
      "sysctl_output[${init.indices}]" string => execresult("${paths.sysctl} -n ${init.key[${init.indices}]}", "useshell");


  classes:
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";



      "execute_${init.indices}" expression => strcmp("${init.execute[${init.indices}]}", "true");
      "result_nok"                     not => strcmp("${sysctl_output[${init.indices}]}", "${init.expected[${init.indices}]}"),
                                        if => "execute_${init.indices}";

      # classes_ok is just a placeholder. What we really want is find the not ok
      "classes_not_ok"  expression => or("classes_ok", "!ph${init.indices}_ok"),
                                if => "execute_${init.indices}";
      "ok"              expression => "!classes_not_ok.!result_nok";

  commands:
    pass3::
      "/bin/rm -rf /etc/sysctl.d/00_rudder.conf";
      # restore old values
      "${paths.sysctl} -p ${init.tmp}/backup.conf";

  reports:
    pass3::
      "Test for sysctl nb ${init.indices} FAILED"
        ifvarclass => "!ph${init.indices}_ok";

    pass3.ok::
      "$(this.promise_filename) Pass";
    pass3.!ok::
      "$(this.promise_filename) FAIL";
}
