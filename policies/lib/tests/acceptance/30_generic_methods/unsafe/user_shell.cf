
#######################################################
#
# Test checking user_shell
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    "user1"       string => "user1";
    "user2"       string => "user2";
    "shell2"       string => "/bin/zsh";
}

#######################################################

bundle agent test
{
  methods:
    "ph1" usebundle => user_shell("${init.user1}", "${init.shell2}");
    "ph2" usebundle => user_present("${init.user2}");
    "ph3" usebundle => user_shell("${init.user2}", "${init.shell2}");
}

#######################################################

bundle agent check
{
  vars:
    pass1::
      "user_line1" string => execresult("${paths.path[grep]} '^${init.user1}:' /etc/passwd", "useshell");
      "user_line2" string => execresult("${paths.path[grep]} '^${init.user2}:' /etc/passwd", "useshell");

  classes:
    pass1::
      "user1_ok"            expression  => strcmp("", "${user_line1}");
      "user2_ok"            expression  => regcmp("^(${init.user2}):x:([0-9]+):([0-9]+)::\/home\/\1:(${init.shell2}).*", "${user_line2}");

      "ph1_ok" expression => "!user_shell_${init.user1}_kept.!user_shell_${init.user1}_repaired.user_shell_${init.user1}_error";
      "ph2_ok" expression => "!user_present_${init.user2}_kept.user_present_${init.user2}_repaired.!user_present_${init.user2}_error";
      "ph3_ok" expression => "!user_shell_${init.user2}_kept.user_shell_${init.user2}_repaired.!user_shell_${init.user2}_error";

      "ok" expression => "user1_ok.user2_ok.ph1_ok.ph2_ok.ph3_ok";
    
    any::
      "pass2" expression => "pass1";
      "pass1" expression => "any";

  commands:
    pass2::
      "/usr/sbin/userdel ${init.user1}" handle => "h1";
      "/usr/sbin/userdel ${init.user2}" handle => "h2";

  reports:
    pass2.ok::
      "$(this.promise_filename) Pass";
    pass2.!ok::
      "$(this.promise_filename) FAIL";
    pass2.user1_ok::
      "user1_ok";
    pass2.user2_ok::
      "user2_ok";
    pass2.ph1_ok::
      "ph1_ok";
    pass2.ph2_ok::
      "ph2_ok";
    pass2.ph3_ok::
      "ph3_ok";
}
