#######################################################
#
# Test checking that a package is installed, and make
# sure that even if the package is upgradable, is still
# reports as installed (not repaired!)
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("$(this.promise_filename)") };
      version => "1.0";
      # Do not cache returnszero results
      cache_system_functions => false;
}

#######################################################

bundle agent init
{
  vars:
    "package_name" string => "rudder-techniques";
    "c_package_name" string => canonify("${package_name}");

    debian::
      "package_info_cmd" string => "/usr/bin/dpkg -l ${init.package_name}";
    rhel::
      "package_info_cmd" string => "/bin/rpm -q ${init.package_name}";

    debian_7::
      "repo_file_1" string => "/etc/apt/sources.list.d/ncf-tests1.list";
      "repo_file_2" string => "/etc/apt/sources.list.d/ncf-tests2.list";
    centos_6::
      "repo_file_1" string => "/etc/yum.repos.d/ncf-tests1.repo";
      "repo_file_2" string => "/etc/yum.repos.d/ncf-tests2.repo";

    # Do this once the methods below have been run
    pass_two::
      "package_info" string => execresult("${package_info_cmd}", "noshell");

  classes:
    "pass_two" expression => "any";

  methods:
    # First set up repos to download an *old* version of the test package
    any::
      "create repo file 1"   usebundle => file_create("${init.repo_file_1}");
    debian_7::
      "remove package"       usebundle => command_execution("$(debian_knowledge.call_apt_get) purge -y ${init.package_name}");
      "add repo key"         usebundle => command_execution("$(debian_knowledge.apt_prefix) /usr/bin/apt-key adv --recv-keys --keyserver keyserver.ubuntu.com 474A19E8");
      "set up repo"          usebundle => file_ensure_lines_present("${init.repo_file_1}", "deb http://www.rudder-project.org/apt-stable/ wheezy main");
      "update package list"  usebundle => command_execution("$(debian_knowledge.call_apt_get) update");
      "install test package" usebundle => command_execution("$(debian_knowledge.call_apt_get) -y install ${init.package_name}");
    centos_6::
      "remove package"       usebundle => command_execution("/bin/rpm -e ${init.package_name}");
      "set up repo"          usebundle => file_ensure_lines_present("${init.repo_file_1}", "[ncf-tests]${const.n}name=ncf-test${const.n}baseurl=http://www.rudder-project.org/rpm-stable/RHEL_6/${const.n}enabled=1${const.n}gpgcheck=1${const.n}gpgcheck=http://www.rudder-project.org/rpm-stable/RHEL_6/repodata/repomd.xml.key");
      "update package list"  usebundle => command_execution("${redhat_knowledge.yum_options} clean all");
      "install test package" usebundle => command_execution("${redhat_knowledge.yum_options} -y install ${init.package_name}");

    any::
      "clean up repo file 1" usebundle => file_remove("${init.repo_file_1}");

      # Replace repo with one containing a newer version of the test package
      "create repo file 2"   usebundle => file_create("${init.repo_file_2}");

    debian_7::
      "update repo to use"   usebundle => file_ensure_lines_present("${init.repo_file_2}", "deb http://www.rudder-project.org/apt-nightly/ wheezy main");
      "update packages"      usebundle => command_execution("$(debian_knowledge.call_aptitude) update");
    centos_6::
      "set up repo"          usebundle => file_ensure_lines_present("${init.repo_file_2}", "[ncf-tests]${const.n}name=ncf-test${const.n}baseurl=http://www.rudder-project.org/rpm-nightly/RHEL_6/${const.n}enabled=1${const.n}gpgcheck=1${const.n}gpgcheck=http://www.rudder-project.org/rpm-nightly/RHEL_6/repodata/repomd.xml.key");
      "update package list"  usebundle => command_execution("/usr/bin/yum ${redhat_knowledge.yum_options} check-update");

    # Nuke CFEngine's cache file to force it to run "dpkg -l" or the rpm equivalent again
    any::
      "remove the packages cache" usebundle => file_remove("${sys.workdir}/state/software_packages.csv");

}

#######################################################

bundle agent test
{

  methods:
      "test it"                   usebundle => package_check_installed("${init.package_name}");

}

#######################################################

bundle agent check
{
  vars:
      "suffix" slist => { "ok", "not_ok", "repaired", "kept", "error", "reached" };

      # Read in info about the package now to confirm it hasn't changed during the test
      "package_info"
        string     => execresult("${init.package_info_cmd}", "noshell"),
        ifvarclass => canonify("package_check_installed_${init.package_name}_reached");

  classes:
      # Make sure the package is actually installed
      "package_installed_ok"
        expression => returnszero("${init.package_info_cmd}", "noshell");

      # Compare the package info we got now to what we had before running the test, to make sure this didn't change anything
      "package_info_ok" expression => strcmp("${init.package_info}", "${package_info}");


      "ok" expression => "package_installed_ok.package_info_ok.package_check_installed_${init.c_package_name}_ok.package_check_installed_${init.c_package_name}_reached.!package_check_installed_${init.c_package_name}_not_ok.!package_check_installed_${init.c_package_name}_repaired";

  methods:
      "clean up repo file 1" usebundle => file_remove("${init.repo_file_1}");
      "clean repo file 2"    usebundle => file_remove("${init.repo_file_2}");

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
    cfengine::
      "class package_install_${init.c_package_name}_${suffix} defined" ifvarclass => "package_check_installed_${init.c_package_name}_${suffix}";
      "class package_check_installed_${init.c_package_name}_${suffix} defined" ifvarclass => "package_check_installed_${init.c_package_name}_${suffix}";
}
