#########################################
#
# Test checking if a file is a socket or not 
# 
#########################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    "tmp"           string => getenv("TEMP", 1024);
    "file"          string => "${tmp}/test";
    "file_canon"    string => canonify("${file}");

    "socket"        string => execresult("/bin/readlink -f /dev/log", "noshell"); # this should always point to a socket
    "socket_canon"  string => canonify("${socket}");

    "file_list"      slist => { "${file}", "${socket}" };

  files:
    "${file}"
      create => "true";

}

#######################################################

bundle agent test
{
  methods:
    "fce" usebundle => file_check_socket("${init.file_list}");
}

#######################################################

bundle agent check
{
  vars:
    # Check file type
    "test_file_type"       string => "/usr/bin/file -b \"${init.file}\"";

    # Check socket type
    "test_socket_type"     string => "/usr/bin/file -b \"${init.socket}\"";

  classes:
    "test_file_is_socket"
      expression => strcmp("socket", execresult("${test_file_type}", "noshell") ),
      ifvarclass => "file_check_socket_${init.file_canon}_reached";

    "test_socket_is_socket"
      expression => strcmp("socket", execresult("${test_socket_type}", "noshell") ),
      ifvarclass => "file_check_socket_${init.socket_canon}_reached";

    "ok"   expression => "test_socket_is_socket.file_check_socket_${init.socket_canon}_ok.!test_file_is_socket.!file_check_socket_${init.file_canon}_ok.file_check_socket_${init.file_canon}_reached";

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
    !test_socket_is_socket::
      "${init.socket} is not a socket as expected. It is '${test_socket_type}'";
    test_file_is_socket::
      "${init.file} is a socket, not as expected. It is '${test_file_type}'";

    cfengine::
      "Check of ${init.file} is not reached"
        ifvarclass => "!file_check_socket_${init.file_canon}_reached";
      "Check of ${init.socket} is not reached"
        ifvarclass => "!file_check_socket_${init.socket_canon}_reached";

}
