#######################################################
#
# Test if cron is stopped and if no, start it
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    debian|suse::
      "service_name"  string => "cron";
    redhat::
      "service_name"  string => "crond";
    aix::
      "service_name"  string => "syslogd";
    any::
      "unknown_service_name" string => "unknown_service_name";

  methods:
      "testinfra" usebundle => execute_testinfra("${init.service_name}_stopped.py", "service_already_stopped", "0");
    service_already_stopped::
      "any" usebundle => define_expected_classes("service_stopped_${service_name}", "success", "1");
    !service_already_stopped::
      "any" usebundle => define_expected_classes("service_stopped_${service_name}", "repaired", "1");
    any::
      "any" usebundle => define_expected_classes("service_stopped_${unknown_service_name}", "success", "2");
}

#######################################################

bundle agent test
{
  methods:
      "ph1" usebundle => service_stopped("${init.service_name}");
      "ph2" usebundle => service_stopped("${init.unknown_service_name}");
      "testinfra" usebundle => execute_testinfra("${init.service_name}_stopped.py", "service_stopped", "1");
}

#######################################################

bundle agent check
{
  classes:
    "service_${init.service_name}_ok"         expression => "${define_expected_classes.report_string_1}";
    "service_${init.unknown_service_name}_ok" expression => "${define_expected_classes.report_string_2}";

    "services_ok" expression => "service_${init.service_name}_ok.service_${init.unknown_service_name}_ok";
    "ok" expression => "services_ok.service_stopped";

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
}
