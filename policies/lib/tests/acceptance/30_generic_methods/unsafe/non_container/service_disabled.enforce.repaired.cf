#######################################################
#
# Disable cron at boot, also try with an unknown service to test error case
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
     redhat::
       "service_name"  string => "crond";
     !redhat.!ubuntu::
       "service_name"  string => "cron";
     ubuntu::
       "service_name"  string => "ntp";

  classes:
    redhat|suse::
      "enabled" expression => returnszero("chkconfig ${service_name} on", "useshell");
    debian::
      "enabled" expression => returnszero("update-rc.d ${service_name} enable", "useshell");

  methods:
      "any" usebundle => define_expected_classes("service_disabled_${service_name}", "repaired", "1");
}

#######################################################

bundle agent test
{
  methods:
    "ph1" usebundle => service_disabled("${init.service_name}");
    "testinfra" usebundle => execute_testinfra("${init.service_name}_disabled.py", "service_now_disabled", "0");
}

#######################################################

bundle agent check
{
  classes:
    "success_ok" expression => "${define_expected_classes.report_string_1}";
    "ok" expression => "success_ok.service_now_disabled";

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
}
