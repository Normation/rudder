#######################################################
#
# Test if cron is started at boot
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    redhat::
      "service_name"  string => "crond";
    !redhat.!ubuntu::
      "service_name"  string => "cron";
    ubuntu::
      "service_name"  string => "ntp";
    any::
      "unknown_service_name"  string => "unknown";

  classes:
    redhat|suse::
      "enabled" expression => returnszero("chkconfig ${service_name} off", "useshell");
    debian::
      "enabled" expression => returnszero("update-rc.d ${service_name} disable", "useshell");

  methods:
    "any" usebundle => define_expected_classes("service_check_started_at_boot_${service_name}", "error", "1");
    "any" usebundle => define_expected_classes("service_check_started_at_boot_${unknown_service_name}", "error", "2");
}

#######################################################

bundle agent test
{
  methods:
    "enable"  usebundle => set_dry_run_mode("true");
    "ph1"     usebundle => service_check_started_at_boot("${init.service_name}");
    "ph2"     usebundle => service_check_started_at_boot("${init.unknown_service_name}");
    "disable" usebundle => set_dry_run_mode("false");
}

#######################################################

bundle agent check
{
  classes:
    "ok_1" expression => "${define_expected_classes.report_string_1}";
    "ok_2" expression => "${define_expected_classes.report_string_2}";

    "ok"   expression => "ok_1.ok_2";

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
}
