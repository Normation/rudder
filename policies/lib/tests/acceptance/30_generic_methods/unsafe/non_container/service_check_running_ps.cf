#######################################################
#
# Test if cron is started using ps
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    !ubuntu.!redhat::
      "service_regex_1"            string => "/usr/sbin/cron";
    ubuntu::
      "service_regex_1"            string => "cron";
    redhat::
      "service_regex_1"            string => "crond";
    any::
      "service_regex_2"            string => "thisisadummyservice";
      "canonified_service_regex_1" string => canonify("${service_regex_1}");
      "canonified_service_regex_2" string => canonify("${service_regex_2}");
}

#######################################################

bundle agent test
{
  methods:
    "ph1" usebundle => service_check_running_ps("${init.service_regex_1}");
    "ph2" usebundle => service_check_running_ps("${init.service_regex_2}");
}

#######################################################

bundle agent check
{
  classes:
    "ok_success_1"  expression => "(promise_kept_service_check_running_${init.canonified_service_regex_1}.service_check_running_${init.canonified_service_regex_1}_kept.service_check_running_${init.canonified_service_regex_1}_ok.service_check_running_${init.canonified_service_regex_1}_not_repaired.service_check_running_${init.canonified_service_regex_1}_reached)";
    "ok_repaired_1" expression => "!(promise_repaired_service_check_running_${init.canonified_service_regex_1}|service_check_running_${init.canonified_service_regex_1}_repaired)";
    "ok_error_1"    expression => "!(service_check_running_${init.canonified_service_regex_1}_not_kept|repair_failed_service_check_running_${init.canonified_service_regex_1}|service_check_running_${init.canonified_service_regex_1}_failed|service_check_running_${init.canonified_service_regex_1}_not_ok)";
    "ok_success_2"  expression => "!(promise_kept_service_check_running_${init.canonified_service_regex_2}|service_check_running_${init.canonified_service_regex_2}_kept|service_check_running_${init.canonified_service_regex_2}_ok)";
    "ok_repaired_2" expression => "!(promise_repaired_service_check_running_${init.canonified_service_regex_2}|service_check_running_${init.canonified_service_regex_2}_repaired)";
    "ok_error_2"    expression => "repair_failed_service_check_running_${init.canonified_service_regex_2}.service_check_running_${init.canonified_service_regex_2}_failed.service_check_running_${init.canonified_service_regex_2}_not_ok.service_check_running_${init.canonified_service_regex_2}_not_kept";
    "ok"            and        => { "ok_success_1", "ok_repaired_1", "ok_error_1", "ok_success_2", "ok_repaired_2", "ok_error_2" };

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
}
