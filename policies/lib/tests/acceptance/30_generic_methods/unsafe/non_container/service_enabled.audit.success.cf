#######################################################
#
# Disable cron at boot, also try with an unknown service to test error case
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
     redhat::
       "service_name"  string => "crond";
     !redhat.!ubuntu::
       "service_name"  string => "cron";
     ubuntu::
       "service_name"  string => "ntp";

  classes:
    redhat|suse::
      "enabled" expression => returnszero("chkconfig ${service_name} on", "useshell");
    debian::
      "enabled" expression => returnszero("update-rc.d ${service_name} enable", "useshell");

  methods:
      "any" usebundle => define_expected_classes("service_enabled_${service_name}", "success", "1");
}

#######################################################

bundle agent test
{
  methods:
      "enable"  usebundle => set_dry_run_mode("true");
      "ph1"     usebundle => service_enabled("${init.service_name}");
      "disable" usebundle => set_dry_run_mode("false");

      "testinfra" usebundle => execute_testinfra("${init.service_name}_enabled.py", "service_still_enabled", "0");
}

#######################################################
bundle agent check
{
  classes:
      "service_${init.service_name}_ok" expression => "${define_expected_classes.report_string_1}";

      "ok" expression => "service_${init.service_name}_ok.service_still_enabled";

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
}
