#######################################################
#
# Test checking if a file and folder can be copied
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    "tmp"                      string => getenv("TEMP", 1024);
    "source_file_1"            string => "${tmp}/source_file_1";
    "source_folder"            string => "${tmp}/source_folder";
    "source_file_2"            string => "${source_folder}/file_2";
    "destination_file_1"       string => "${tmp}/destination_file_1";
    "destination_folder"       string => "${tmp}/destination_folder";
    "destination_file_2"       string => "${destination_folder}/file_2";
    "destination_file_canon_1" string => canonify("${destination_file_1}");
    "destination_folder_canon" string => canonify("${destination_folder}");
    "destination_file_canon_2" string => canonify("${destination_file_2}");
    "folder_recursion"         string => "inf";

    "mode"                     string => "644";
    "owner"                    string => "root";
    "group"                    string => "root";

  files:
    "${source_file_1}"
      create => "true",
      perms  => mog("${mode}", "${owner}", "${group}");

    "${source_file_2}"
      create => "true",
      perms  => mog("${mode}", "${owner}", "${group}");

}

#######################################################

bundle agent test
{
  methods:
    "copy_file" usebundle => file_copy_from_local_source("${init.source_file_1}", "${init.destination_file_1}");
    "copy_file" usebundle => file_copy_from_local_source_recursion("${init.source_folder}", "${init.destination_folder}", "${init.folder_recursion}");
}

#######################################################

bundle agent check
{

  classes:
    "file_1_exists_ok" expression => fileexists("${init.destination_file_1}");
    "folder_exists_ok" expression => fileexists("${init.destination_folder}");
    "file_2_exists_ok" expression => fileexists("${init.destination_file_2}");
    "file_isdir_ok"    not        => isdir("${init.source_file_1}");
    "folder_isdir_ok"  expression => isdir("${init.source_folder}");
    "ok_file"          and        => { "file_1_exists_ok", "file_isdir_ok" };
    "ok_folder"        and        => { "folder_exists_ok", "folder_isdir_ok", "file_2_exists_ok" };

    "ok"               and        => { "ok_file", "ok_folder" };

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
}
