#######################################################
#
# Test checking if a key-value pair is present in a section file
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################
bundle agent init
{
  vars:
    "tmp"             string => getenv("TEMP", 1024);
    
    
  
    ## REPAIRED
    # ensure that a line is really added into the right section
    # with lines already present.
    "file[0]"     string => "${tmp}/test0.ini";
    "name[0]"     string => "name1";
    "value[0]"    string => "value1";
    "section[0]"  string => "section_test1";
    "status[0]"   string => "repaired";
    "initial[0]"  string => "[section_test1]
[section_test2]";
    "expected[0]" string => "[section_test1]
${name[0]}=${value[0]}
[section_test2]";

    #  ensure that if the section does not exist, it will be created
    "file[1]"     string => "${tmp}/test1.ini";
    "name[1]"     string => "name1";
    "value[1]"    string => "value1";
    "section[1]"  string => "section_test1";
    "status[1]"   string => "repaired";
    "initial[1]"  string => "[section_test2]";
    "expected[1]" string => "[section_test1]
${name[1]}=${value[1]}
[section_test2]";


    # ensure that if the value is modified if necessary
    "file[2]"     string => "${tmp}/test2.ini";
    "name[2]"     string => "name2";
    "value[2]"    string => "value2";
    "section[2]"  string => "section_test2";
    "status[2]"   string => "repaired";
    "initial[2]"  string => "[section_test2]
name2=value";
    "expected[2]" string => "[section_test2]
${name[2]}=${value[2]}";

    # ensure that if the value is modified if necessary
    # but only in the selected region
    "file[3]"     string => "${tmp}/test3.ini";
    "name[3]"     string => "name3";
    "value[3]"    string => "key?value3";
    "section[3]"  string => "section_test3";
    "status[3]"   string => "repaired";
    "initial[3]"  string => "[section_test3]
${name[3]}=key?value
[section_dummy]
${name[3]}=value";
    "expected[3]" string => "[section_test3]
${name[3]}=${value[3]}
[section_dummy]
${name[3]}=value";

    # ensure that if the value is modified if necessary
    # but only in the selected region
    # with = sign in value
    "file[4]"     string => "${tmp}/test4.ini";
    "name[4]"     string => "name4";
    "value[4]"    string => "key=value4";
    "section[4]"  string => "section_test4";
    "status[4]"   string => "repaired";
    "initial[4]"  string => "[section_test4]
${name[4]}=key=value
[section_dummy]
${name[4]}=key";
    "expected[4]" string => "[section_test4]
${name[4]}=${value[4]}
[section_dummy]
${name[4]}=key";

    # KEPT
    # ensure that if the value is NOT modified
    # but only in the selected region
    # with = sign in value
    "file[5]"     string => "${tmp}/test5.ini";
    "name[5]"     string => "name5";
    "value[5]"    string => "http://mirrorlist.centos.org/?release=$releasever&arch=$basearch&repo=BaseOS&infra=$infra";
    "section[5]"  string => "section_test5";
    "status[5]"   string => "success";
    "initial[5]"  string => "[section_test5]
${name[5]}=${value[5]}
[section_dummy]
${name[5]}=key";
    "expected[5]" string => "${initial[5]}";

    # Repaired
    # ensure that if the value is uncommented
    # but only in the selected region
    # with = sign in value
    "file[6]"     string => "${tmp}/test6.ini";
    "name[6]"     string => "name6";
    "value[6]"    string => "http://mirrorlist.centos.org/?release=$releasever&arch=$basearch&repo=BaseOS&infra=$infra";
    "section[6]"  string => "section_test6";
    "status[6]"   string => "repaired";
    "initial[6]"  string => "[section_test6]
#${name[6]}=${value[6]}
[section_dummy]
${name[6]}=key";
    "expected[6]" string => "[section_test6]
${name[6]}=${value[6]}
[section_dummy]
${name[6]}=key";

    # ensure that if the key is uncommented
    # and value corrected but only in the selected region
    # with = sign in value
    "file[7]"     string => "${tmp}/test7.ini";
    "name[7]"     string => "name7";
    "value[7]"    string => "http://mirrorlist.centos.org/?release=$releasever&arch=$basearch&repo=BaseOS&infra=$infra";
    "section[7]"  string => "section_test7";
    "status[7]"   string => "repaired";
    "initial[7]"  string => "[section_test7]
#${name[7]}=bla=bli=blu
[section_dummy]
${name[7]}=key";
    "expected[7]" string => "[section_test7]
${name[7]}=${value[7]}
[section_dummy]
${name[7]}=key";

    # audit
    # file is compliant
    "file[8]"     string => "${tmp}/test8.ini";
    "name[8]"     string => "name8";
    "value[8]"    string => "http://mirrorlist.centos.org/?release=$releasever&arch=$basearch&repo=BaseOS&infra=$infra";
    "section[8]"  string => "section_test8";
    "status[8]"   string => "success";
    "initial[8]"  string => "[section_test8]
${name[8]}=${value[8]}
[section_dummy]
${name[8]}=key";
    "expected[8]" string => "${initial[8]}";

    # file is not compliant, value is not there
    "file[9]"     string => "${tmp}/test9.ini";
    "name[9]"     string => "name9";
    "value[9]"    string => "two";
    "section[9]"  string => "section_test9";
    "status[9]"   string => "error";
    "initial[9]"  string => "[section_test9]
${name[9]}=one
[section_dummy]
${name[9]}=key";
    "expected[9]" string => "${initial[9]}";
    
    # Repaired
    # create a file if not existent. Unfortunately, it will have an empty line
    "file[10]"     string => "${tmp}/test10.ini";
    "name[10]"     string => "name10";
    "value[10]"    string => "value10";
    "section[10]"  string => "section_test10";
    "status[10]"   string => "repaired";
    "initial[10]"  string => "";
    "expected[10]" string => "[section_test10]

${name[10]}=${value[10]}";

  "indices"     slist => getindices("status");

  files:
    "${file[${indices}]}"
      create => "true",
      edit_line => insert_lines("${initial[${indices}]}"),
      edit_defaults => empty,
      unless => strcmp("${indices}", "10");
}

#######################################################

bundle agent test
{
  vars:
    "args${init.indices}" slist => { "${init.file[${init.indices}]}", "${init.section[${init.indices}]}", "${init.name[${init.indices}]}", "${init.value[${init.indices}]}"};

  methods:
    # Enforce
    "ph0" usebundle  => apply_gm("file_key_value_present_in_ini_section", @{args0}, "${init.status[0]}", "ph0", "enforce" );
    "ph1" usebundle  => apply_gm("file_key_value_present_in_ini_section", @{args1}, "${init.status[1]}", "ph1", "enforce" );
    "ph2" usebundle  => apply_gm("file_key_value_present_in_ini_section", @{args2}, "${init.status[2]}", "ph2", "enforce" );
    "ph3" usebundle  => apply_gm("file_key_value_present_in_ini_section", @{args3}, "${init.status[3]}", "ph3", "enforce" );
    "ph4" usebundle  => apply_gm("file_key_value_present_in_ini_section", @{args4}, "${init.status[4]}", "ph4", "enforce" );
    "ph5" usebundle  => apply_gm("file_key_value_present_in_ini_section", @{args5}, "${init.status[5]}", "ph5", "enforce" );
    "ph6" usebundle  => apply_gm("file_key_value_present_in_ini_section", @{args6}, "${init.status[6]}", "ph6", "enforce" );
    "ph7" usebundle  => apply_gm("file_key_value_present_in_ini_section", @{args7}, "${init.status[7]}", "ph7", "enforce" );
    "ph8" usebundle  => apply_gm("file_key_value_present_in_ini_section", @{args8}, "${init.status[8]}", "ph8", "audit" );
    "ph9" usebundle  => apply_gm("file_key_value_present_in_ini_section", @{args9}, "${init.status[9]}", "ph9", "audit" );
    "ph10" usebundle  => apply_gm("file_key_value_present_in_ini_section", @{args10}, "${init.status[10]}", "ph10", "enforce" );
}

#######################################################

bundle agent check
{
  vars:
    pass1::
      "indices" slist => { @{init.indices} };
      
      # function readfile adds an extra trailing newline if there is no trailing newline, too inconsistent
      "content[${indices}]" string => execresult("${paths.cat} ${init.file[${indices}]}", "noshell");

  classes:
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";

    pass2::
      # file 10 is non existent
      "content_ok_${indices}" expression => and(
                                            strcmp("${content[${indices}]}", "${init.expected[${indices}]}"),
                                            fileexists("${init.file[${indices}]}")
                                          );


      "content_not_ok" expression => "!content_ok_${indices}";
      "classes_ok"     expression => "ph0_ok.ph1_ok.ph2_ok.ph3_ok.ph4_ok.ph5_ok.ph6_ok.ph7_ok.ph8_ok.ph9_ok.ph10_ok";
      "ok"             expression => "!content_not_ok.classes_ok";


  reports:
    pass3::
      "###########################
ERROR test ${indices} in
${init.file[${indices}]}
EXPECTED:
${init.expected[${indices}]}
---------------------------
FOUND:
${content[${indices}]}
###########################"
         ifvarclass => "!content_ok_${indices}";

    pass3.ok::
      "$(this.promise_filename) Pass";
    pass3.!ok::
      "$(this.promise_filename) FAIL";
}
