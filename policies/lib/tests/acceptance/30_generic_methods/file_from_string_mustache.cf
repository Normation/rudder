#######################################################
#
# Test checking if a file can be generated from a local template
#
#######################################################
# @agent_version >=3.7


bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    "tmp"                      string => getenv("TEMP", 1024);
    "source_template_1"        string => "sys.host is: {{{vars.sys.host}}}";
    "destination_file_1"       string => "${tmp}/destination_test_1";
    "destination_file_canon_1" string => canonify("${destination_file_1}");

}

#######################################################

bundle agent test
{
  methods:
    "ph1" usebundle => file_from_string_mustache("${init.source_template_1}", "${init.destination_file_1}");
}

#######################################################

bundle agent check
{
  vars:
    "file_length_check_1" string => "${paths.path[test]} `${paths.path[cat]} ${init.destination_file_1} | wc -l` = '1'";
    "file_content_check_1" string => "${paths.path[cat]} ${init.destination_file_1} | ${ncf_paths.path[head]} -n1 | ${paths.path[grep]} '^sys.host is: ${sys.host}$'";

  classes:
    # By default, should create the file if it doesn't exist
    "file_exists_1"      expression => fileexists("${init.destination_file_1}");
    "file_length_ok_1"
      expression => returnszero("${file_length_check_1}", "useshell"),
      ifvarclass => canonify("file_from_string_mustache_${init.destination_file_1}_reached");
    "file_content_ok_1"
      expression => returnszero("${file_content_check_1}", "useshell"),
      ifvarclass => canonify("file_from_string_mustache_${init.destination_file_1}_reached");

    "ok_1"  expression => "file_exists_1.file_length_ok_1.file_content_ok_1.file_from_string_mustache_${init.destination_file_canon_1}_ok.!file_from_string_mustache_${init.destination_file_canon_1}_error";

    "ok" expression => "ok_1";

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
    !file_exists_1::
      "File ${init.destination_file_1} didn't appear to exist";
    !file_length_ok_1::
      "There was not exactly one line in ${init.destination_file_1}";
    !file_content_ok_1::
      "The file content in ${init.destination_file_1} was not exactly \"sys.host is: ${sys.host}\"";
}
