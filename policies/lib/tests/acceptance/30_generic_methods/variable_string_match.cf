#######################################################
#
# Exit with a specific code
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    "tmp"               string => getenv("TEMP", 1024);

    # Enforce
    "content[0]"       string => "cat";
    "variable_name[0]" string => "my_prefix.variable0";
    "regex[0]"         string => "c.*t";
    "status[0]"        string => "success";
    "mode[0]"          string => "enforce";

    "content[1]"       string => "";
    "variable_name[1]" string => "my_prefix.variable1";
    "regex[1]"         string => ".*";
    "status[1]"        string => "success";
    "mode[1]"          string => "enforce";

    "content[2]"       string => "";
    "variable_name[2]" string => "my_prefix.variable1";
    "regex[2]"         string => ".+";
    "status[2]"        string => "error";
    "mode[2]"          string => "enforce";

    "content[3]"       string => "cat
dog
and other animals";
    "variable_name[3]" string => "my_prefix.variable3";
    "regex[3]"         string => "[\s\S]+";
    "status[3]"        string => "success";
    "mode[3]"          string => "enforce";

    # \N is any char except newlines, while . is any char without exception
    "content[4]"       string => "cat
dog
and other animals";
    "variable_name[4]" string => "my_prefix.variable4";
    "regex[4]"         string => "[^\n]+[\n]dog.*";
    "status[4]"        string => "success";
    "mode[4]"          string => "enforce";

    "variable_name[5]" string => "my_prefix.undefined";
    "regex[5]"         string => ".*";
    "status[5]"        string => "error";
    "mode[5]"          string => "enforce";

    "content[6]"       string => "cat";
    "variable_name[6]" string => "my_prefix.variable6";
    "regex[6]"         string => "non matching regex .*";
    "status[6]"        string => "error";
    "mode[6]"          string => "enforce";

    # Audit
    "content[7]"       string => "cat";
    "variable_name[7]" string => "my_prefix.variable7";
    "regex[7]"         string => "c.*t";
    "status[7]"        string => "success";
    "mode[7]"          string => "audit";

    "content[8]"       string => "";
    "variable_name[8]" string => "my_prefix.variable8";
    "regex[8]"         string => ".*";
    "status[8]"        string => "success";
    "mode[8]"          string => "audit";

    "content[9]"       string => "";
    "variable_name[9]" string => "my_prefix.variable9";
    "regex[9]"         string => ".+";
    "status[9]"        string => "error";
    "mode[9]"          string => "audit";

    "content[10]"       string => "cat
dog
and other animals";
    "variable_name[10]" string => "my_prefix.variable10";
    "regex[10]"         string => "[\s\S]+";
    "status[10]"        string => "success";
    "mode[10]"          string => "audit";

    # \N is any char except newlines, while . is any char without exception
    "content[11]"       string => "cat
dog
and other animals";
    "variable_name[11]" string => "my_prefix.variable11";
    "regex[11]"         string => "[^\n]+[\n]dog.*";
    "status[11]"        string => "success";
    "mode[11]"          string => "audit";

    "variable_name[12]" string => "my_prefix.undefined12";
    "regex[12]"         string => ".*";
    "status[12]"        string => "error";
    "mode[12]"          string => "audit";

    "content[13]"       string => "cat";
    "variable_name[13]" string => "my_prefix.variable13";
    "regex[13]"         string => "non matching regex .*";
    "status[13]"        string => "error";
    "mode[13]"          string => "audit";

    "indices" slist => getindices("variable_name");

  methods:
    # undefined one (test nb 5) will not be defined since content[5] does not exist
    "method_call_${indices}" usebundle => variable_string("my_prefix", "variable${indices}", "${content[${indices}]}");

}

#######################################################

bundle agent test
{
  vars:
    "args${init.indices}" slist => { "${init.variable_name[${init.indices}]}", "${init.regex[${init.indices}]}" };

  methods:
    # Enforce
    "ph0"  usebundle => apply_gm("variable_string_match",  @{args0},  "${init.status[0]}",  "ph0",  "${init.mode[0]}");
    "ph1"  usebundle => apply_gm("variable_string_match",  @{args1},  "${init.status[1]}",  "ph1",  "${init.mode[1]}");
    "ph2"  usebundle => apply_gm("variable_string_match",  @{args2},  "${init.status[2]}",  "ph2",  "${init.mode[2]}");
    "ph3"  usebundle => apply_gm("variable_string_match",  @{args3},  "${init.status[3]}",  "ph3",  "${init.mode[3]}");
    "ph4"  usebundle => apply_gm("variable_string_match",  @{args4},  "${init.status[4]}",  "ph4",  "${init.mode[4]}");
    "ph5"  usebundle => apply_gm("variable_string_match",  @{args5},  "${init.status[5]}",  "ph5",  "${init.mode[5]}");
    "ph6"  usebundle => apply_gm("variable_string_match",  @{args6},  "${init.status[6]}",  "ph6",  "${init.mode[6]}");

    # Audit
    "ph7"  usebundle => apply_gm("variable_string_match",  @{args7},  "${init.status[7]}",  "ph7",  "${init.mode[7]}");
    "ph8"  usebundle => apply_gm("variable_string_match",  @{args8},  "${init.status[8]}",  "ph8",  "${init.mode[8]}");
    "ph9"  usebundle => apply_gm("variable_string_match",  @{args9},  "${init.status[9]}",  "ph9",  "${init.mode[9]}");
    "ph10" usebundle => apply_gm("variable_string_match", @{args10}, "${init.status[10]}", "ph10", "${init.mode[10]}");
    "ph11" usebundle => apply_gm("variable_string_match", @{args11}, "${init.status[11]}", "ph11", "${init.mode[11]}");
    "ph12" usebundle => apply_gm("variable_string_match", @{args12}, "${init.status[12]}", "ph12", "${init.mode[12]}");
    "ph13" usebundle => apply_gm("variable_string_match", @{args13}, "${init.status[13]}", "ph13", "${init.mode[13]}");

}

#######################################################

bundle agent check
{
  classes:
    "classes_ok"        expression => "ph0_ok.ph1_ok.ph2_ok.ph3_ok.ph4_ok.ph5_ok.ph6_ok.ph7_ok.ph8_ok.ph8_ok.ph9_ok.ph10_ok.ph11_ok.ph12_ok";

    "ok"                expression => "classes_ok";

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
}
