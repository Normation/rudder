#######################################################
#
# Test checking if ACLs are present or not
# 
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
      "tmp"                        string => getenv("TEMP", 1024);

     # REPAIRED
     ## recursive
      "files[1]"     string => "file1";         # args of the GM
      "recursive[1]" string => "true";          # \\
      "user[1]"      string => "bin";           # \\
      "ace[1]"       string => "+rwx";          # \\
      "create[1]"    string => "true";          # if "true", the file will be created at init
      "initial[1]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:r", "group:bin:r", "all:r" };
      "exp_lines[1]"  slist => { "user::rwx", "group::r-x", "user:bin:rwx", "group:bin:r--", "other::r--" };
      # -> list of regex that must match the output of getfacl on the file at the en of the test
      "mode[1]"      string => "enforce";       # mode, "enforce" or "audit"
      "status[1]"    string => "repaired";      # expected status, "repaired", "success" or "error"
      "execute[1]"   string => "true";          # Tell if an execution is needed

      "files[2]"     string => "file2";
      "recursive[2]" string => "true";
      "user[2]"      string => "bin";
      "ace[2]"       string => "=rw";
      "create[2]"    string => "true";
      "initial[2]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:r", "group:bin:r", "all:r" };
      "exp_lines[2]"  slist => { "user::rwx", "group::r-x", "user:bin:rw-", "group:bin:r--", "other::r--" };
      "mode[2]"      string => "enforce";
      "status[2]"    string => "repaired";
      "execute[2]"   string => "true";

      "files[3]"     string => "file3";
      "recursive[3]" string => "true";
      "user[3]"      string => "bin";
      "ace[3]"       string => "-rw";
      "create[3]"    string => "true";
      "initial[3]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:r", "group:bin:r", "all:r" };
      "exp_lines[3]"  slist => { "user::rwx", "group::r-x", "user:bin:---", "group:bin:r--", "other::r--" };
      "mode[3]"      string => "enforce";
      "status[3]"    string => "repaired";
      "execute[3]"   string => "true";

      "files[4]"     string => "file4/.";
      "recursive[4]" string => "true";
      "user[4]"      string => "bin";
      "ace[4]"       string => "-rw";
      "create[4]"    string => "true";
      "initial[4]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:-rwx", "group:bin:r", "all:rx" };
      "exp_lines[4]"  slist => { "user::rwx", "group::r-x", "user:bin:---", "group:bin:r--", "other::r-x" };
      "mode[4]"      string => "enforce";
      "status[4]"    string => "repaired";
      "execute[4]"   string => "true";

      "files[5]"     string => "file4/1/2/3/4/5/subfile1";
      "create[5]"    string => "true";
      "initial[5]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:r", "group:bin:r", "all:r" };
      "exp_lines[5]"  slist => { "user::rwx", "group::r-x", "user:bin:---", "group:bin:r--", "other::r--" };

      "files[6]"     string => "file6/.";
      "recursive[6]" string => "true";
      "user[6]"      string => "bin";
      "ace[6]"       string => "-rw";
      "create[6]"    string => "true";
      "initial[6]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:rwx", "group:bin:r", "all:rx" };
      "exp_lines[6]"  slist => { "user::rwx", "group::r-x", "user:bin:--x", "group:bin:r--", "other::r-x" };
      "mode[6]"      string => "enforce";
      "status[6]"    string => "repaired";
      "execute[6]"   string => "true";

      # non-recursive
      "files[7]"     string => "file7";
      "recursive[7]" string => "false";
      "user[7]"      string => "bin";
      "ace[7]"       string => "+rwx";
      "create[7]"    string => "true";
      "initial[7]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:r", "group:bin:r", "all:r" };
      "exp_lines[7]"  slist => { "user::rwx", "group::r-x", "user:bin:rwx", "group:bin:r--", "other::r--" };
      "mode[7]"      string => "enforce";
      "status[7]"    string => "repaired";
      "execute[7]"   string => "true";

      "files[8]"     string => "file8";
      "recursive[8]" string => "false";
      "user[8]"      string => "bin";
      "ace[8]"       string => "=rw";
      "create[8]"    string => "true";
      "initial[8]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:r", "group:bin:r", "all:r" };
      "exp_lines[8]"  slist => { "user::rwx", "group::r-x", "user:bin:rw-", "group:bin:r--", "other::r--" };
      "mode[8]"      string => "enforce";
      "status[8]"    string => "repaired";
      "execute[8]"   string => "true";

      "files[9]"     string => "file9";
      "recursive[9]" string => "false";
      "user[9]"      string => "bin";
      "ace[9]"       string => "-rw";
      "create[9]"    string => "true";
      "initial[9]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:r", "group:bin:r", "all:r" };
      "exp_lines[9]"  slist => { "user::rwx", "group::r-x", "user:bin:---", "group:bin:r--", "other::r--" };
      "mode[9]"      string => "enforce";
      "status[9]"    string => "repaired";
      "execute[9]"   string => "true";

      "files[10]"     string => "file10/.";
      "recursive[10]" string => "false";
      "user[10]"      string => "bin";
      "ace[10]"       string => "-rw";
      "create[10]"    string => "true";
      "initial[10]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:+rwx", "group:bin:r", "all:rx" };
      "exp_lines[10]"  slist => { "user::rwx", "group::r-x", "user:bin:--x", "group:bin:r--", "other::r-x" };
      "mode[10]"      string => "enforce";
      "status[10]"    string => "repaired";
      "execute[10]"   string => "true";

      "files[11]"     string => "file10/1/2/3/4/5/subfile1";
      "create[11]"    string => "true";
      "initial[11]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:r", "group:bin:r", "all:r" };
      "exp_lines[11]"  slist => { "user::rwx", "group::r-x", "user:bin:r--", "group:bin:r--", "other::r--" };

      "files[12]"     string => "file12/.";
      "recursive[12]" string => "false";
      "user[12]"      string => "bin";
      "ace[12]"       string => "-rw";
      "create[12]"    string => "true";
      "initial[12]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:rwx", "group:bin:r", "all:rx" };
      "exp_lines[12]"  slist => { "user::rwx", "group::r-x", "user:bin:--x", "group:bin:r--", "other::r-x" };
      "mode[12]"      string => "enforce";
      "status[12]"    string => "repaired";
      "execute[12]"   string => "true";

     # SUCCESS
      "files[13]"     string => "file13";
      "recursive[13]" string => "true";
      "user[13]"      string => "bin";
      "ace[13]"       string => "+rwx";
      "create[13]"    string => "true";
      "initial[13]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:rwx", "group:bin:r", "all:r" };
      "exp_lines[13]"  slist => { "user::rwx", "group::r-x", "user:bin:rwx", "group:bin:r--", "other::r--" };
      "mode[13]"      string => "enforce";
      "status[13]"    string => "success";
      "execute[13]"   string => "true";


      "files[14]"     string => "file14";
      "recursive[14]" string => "true";
      "user[14]"      string => "bin";
      "ace[14]"       string => "-rw";
      "create[14]"    string => "true";
      "initial[14]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:x", "group:bin:r", "all:r" };
      "exp_lines[14]"  slist => { "user::rwx", "group::r-x", "user:bin:--x", "group:bin:r--", "other::r--" };
      "mode[14]"      string => "enforce";
      "status[14]"    string => "success";
      "execute[14]"   string => "true";

      "files[15_bis]"     string => "file15/1/2/3/4/5/subfile1";
      "create[15_bis]"    string => "true";
      "initial[15_bis]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:x", "group:bin:r", "all:r" };
      "exp_lines[15_bis]"  slist => { "user::rwx", "group::r-x", "user:bin:--x", "group:bin:r--", "other::r--" };

      "files[15]"     string => "file15/.";
      "recursive[15]" string => "true";
      "user[15]"      string => "bin";
      "ace[15]"       string => "-rw";
      "create[15]"    string => "true";
      "initial[15]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:-rwx", "group:bin:r", "all:rx" };
      "exp_lines[15]"  slist => { "user::rwx", "group::r-x", "user:bin:---", "group:bin:r", "other::r-x" };
      "mode[15]"      string => "enforce";
      "status[15]"    string => "success";
      "execute[15]"   string => "true";


      "files[17]"     string => "file17/.";
      "recursive[17]" string => "true";
      "user[17]"      string => "bin";
      "ace[17]"       string => "-rw";
      "create[17]"    string => "true";
      "initial[17]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:x", "group:bin:r", "all:rx" };
      "exp_lines[17]"  slist => { "user::rwx", "group::r-x", "user:bin:--x", "group:bin:r--", "other::r-x" };
      "mode[17]"      string => "enforce";
      "status[17]"    string => "success";
      "execute[17]"   string => "true";

      # non-recursive
      "files[18]"     string => "file18";
      "recursive[18]" string => "false";
      "user[18]"      string => "*";
      "ace[18]"       string => "+rwx";
      "create[18]"    string => "true";
      "initial[18]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:r", "group:bin:r", "all:r" };
      "exp_lines[18]"  slist => { "user::rwx", "group::r-x", "user:bin:r--", "group:bin:r--", "other::r--" };
      "mode[18]"      string => "enforce";
      "status[18]"    string => "success";
      "execute[18]"   string => "true";

      "files[19]"     string => "file19";
      "recursive[19]" string => "false";
      "user[19]"      string => "bin";
      "ace[19]"       string => "=rw";
      "create[19]"    string => "true";
      "initial[19]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:rw", "group:bin:r", "all:r" };
      "exp_lines[19]"  slist => { "user::rwx", "group::r-x", "user:bin:rw", "group:bin:r", "other::r" };
      "mode[19]"      string => "enforce";
      "status[19]"    string => "success";
      "execute[19]"   string => "true";

      "files[20]"     string => "file20";
      "recursive[20]" string => "false";
      "user[20]"      string => "bin";
      "ace[20]"       string => "-rw";
      "create[20]"    string => "true";
      "initial[20]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:-rwx", "group:bin:r", "all:r" };
      "exp_lines[20]"  slist => { "user::rwx", "group::r-x", "user:bin:---", "group:bin:r--", "other::r--" };
      "mode[20]"      string => "enforce";
      "status[20]"    string => "success";
      "execute[20]"   string => "true";

      "files[21]"     string => "file21/.";
      "recursive[21]" string => "false";
      "user[21]"      string => "bin";
      "ace[21]"       string => "-rw";
      "create[21]"    string => "true";
      "initial[21]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:x", "group:bin:r", "all:rx" };
      "exp_lines[21]"  slist => { "user::rwx", "group::r-x", "user:bin:--x", "group:bin:r--", "other::r-x" };
      "mode[21]"      string => "enforce";
      "status[21]"    string => "success";
      "execute[21]"   string => "true";

      "files[22]"     string => "file21/1/2/3/4/5/subfile1";
      "create[22]"    string => "true";
      "initial[22]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:rw", "group:bin:r", "all:r" };
      "exp_lines[22]"  slist => { "user::rwx", "group::r-x", "user:bin:rw-", "group:bin:r--", "other::r--" };

      "files[23]"     string => "file23/.";
      "recursive[23]" string => "false";
      "user[23]"      string => "bin";
      "ace[23]"       string => "-rw";
      "create[23]"    string => "true";
      "initial[23]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:-rwx", "group:bin:r", "all:rx" };
      "exp_lines[23]"  slist => { "user::rwx", "group::r-x", "user:bin:---", "group:bin:r--", "other::r-x" };
      "mode[23]"      string => "enforce";
      "status[23]"    string => "success";
      "execute[23]"   string => "true";

      "files[24]"     string => "file24";
      "recursive[24]" string => "true";
      "user[24]"      string => "bin";
      "ace[24]"       string => "=rw";
      "create[24]"    string => "true";
      "initial[24]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:rw", "group:bin:r", "all:r" };
      "exp_lines[24]"  slist => { "user::rwx", "group::r-x", "user:bin:rw-", "group:bin:r--", "other::r--" };
      "mode[24]"      string => "enforce";
      "status[24]"    string => "success";
      "execute[24]"   string => "true";

     # ERROR
      "files[25]"     string => "fileThatDoesNotExist";
      "recursive[25]" string => "false";
      "user[25]"      string => "bin";
      "ace[25]"       string => "-rw";
      "create[25]"    string => "false";
      "mode[25]"      string => "enforce";
      "status[25]"    string => "error";
      "execute[25]"   string => "true";

      "files[26]"     string => "fileThatDoesNotExist2";
      "recursive[26]" string => "true";
      "user[26]"      string => "bin";
      "ace[26]"       string => "-rw";
      "create[26]"    string => "false";
      "mode[26]"      string => "enforce";
      "status[26]"    string => "error";
      "execute[26]"   string => "true";

      "files[27]"     string => "file27";
      "recursive[27]" string => "false";
      "user[27]"      string => "aUserThatDoesNotExist";
      "ace[27]"       string => "-rw";
      "create[27]"    string => "true";
      "initial[27]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:rwx", "group:bin:r", "all:rx" };
      "exp_lines[27]"  slist => { "user::rwx", "group::r-x", "user:bin:rwx", "group:bin:r--", "other::r-x" };
      "mode[27]"      string => "enforce";
      "status[27]"    string => "error";
      "execute[27]"   string => "true";

    # AUDIT SUCCESS
     # Copy of success enforce part
      "files[28]"     string => "file28";
      "recursive[28]" string => "true";
      "user[28]"      string => "bin";
      "ace[28]"       string => "+rwx";
      "create[28]"    string => "true";
      "initial[28]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:rwx", "group:bin:r", "all:r" };
      "exp_lines[28]"  slist => { "user::rwx", "group::r-x", "user:bin:rwx", "group:bin:r--", "other::r--" };
      "mode[28]"      string => "enforce";
      "status[28]"    string => "success";
      "execute[28]"   string => "true";


      "files[29]"     string => "file29";
      "recursive[29]" string => "true";
      "user[29]"      string => "bin";
      "ace[29]"       string => "-rw";
      "create[29]"    string => "true";
      "initial[29]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:x", "group:bin:r", "all:r" };
      "exp_lines[29]"  slist => { "user::rwx", "group::r-x", "user:bin:--x", "group:bin:r--", "other::r--" };
      "mode[29]"      string => "enforce";
      "status[29]"    string => "success";
      "execute[29]"   string => "true";

      "files[30_bis]"     string => "file30/1/2/3/4/5/subfile1";
      "create[30_bis]"    string => "true";
      "initial[30_bis]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:x", "group:bin:r", "all:r" };
      "exp_lines[30_bis]"  slist => { "user::rwx", "group::r-x", "user:bin:--x", "group:bin:r--", "other::r--" };

      "files[30]"     string => "file30/.";
      "recursive[30]" string => "true";
      "user[30]"      string => "bin";
      "ace[30]"       string => "-rw";
      "create[30]"    string => "true";
      "initial[30]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:-rwx", "group:bin:r", "all:rx" };
      "exp_lines[30]"  slist => { "user::rwx", "group::r-x", "user:bin:---", "group:bin:r", "other::r-x" };
      "mode[30]"      string => "enforce";
      "status[30]"    string => "success";
      "execute[30]"   string => "true";


      "files[32]"     string => "file32/.";
      "recursive[32]" string => "true";
      "user[32]"      string => "bin";
      "ace[32]"       string => "-rw";
      "create[32]"    string => "true";
      "initial[32]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:x", "group:bin:r", "all:rx" };
      "exp_lines[32]"  slist => { "user::rwx", "group::r-x", "user:bin:--x", "group:bin:r--", "other::r-x" };
      "mode[32]"      string => "enforce";
      "status[32]"    string => "success";
      "execute[32]"   string => "true";

      # non-recursive
      "files[33]"     string => "file33";
      "recursive[33]" string => "false";
      "user[33]"      string => "*";
      "ace[33]"       string => "+rwx";
      "create[33]"    string => "true";
      "initial[33]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:r", "group:bin:r", "all:r" };
      "exp_lines[33]"  slist => { "user::rwx", "group::r-x", "user:bin:r--", "group:bin:r--", "other::r--" };
      "mode[33]"      string => "enforce";
      "status[33]"    string => "success";
      "execute[33]"   string => "true";

      "files[34]"     string => "file34";
      "recursive[34]" string => "false";
      "user[34]"      string => "bin";
      "ace[34]"       string => "=rw";
      "create[34]"    string => "true";
      "initial[34]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:rw", "group:bin:r", "all:r" };
      "exp_lines[34]"  slist => { "user::rwx", "group::r-x", "user:bin:rw", "group:bin:r", "other::r" };
      "mode[34]"      string => "enforce";
      "status[34]"    string => "success";
      "execute[34]"   string => "true";

      "files[35]"     string => "file35";
      "recursive[35]" string => "false";
      "user[35]"      string => "bin";
      "ace[35]"       string => "-rw";
      "create[35]"    string => "true";
      "initial[35]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:-rwx", "group:bin:r", "all:r" };
      "exp_lines[35]"  slist => { "user::rwx", "group::r-x", "user:bin:---", "group:bin:r--", "other::r--" };
      "mode[35]"      string => "enforce";
      "status[35]"    string => "success";
      "execute[35]"   string => "true";

      "files[36]"     string => "file36/.";
      "recursive[36]" string => "false";
      "user[36]"      string => "bin";
      "ace[36]"       string => "-rw";
      "create[36]"    string => "true";
      "initial[36]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:x", "group:bin:r", "all:rx" };
      "exp_lines[36]"  slist => { "user::rwx", "group::r-x", "user:bin:--x", "group:bin:r--", "other::r-x" };
      "mode[36]"      string => "enforce";
      "status[36]"    string => "success";
      "execute[36]"   string => "true";

      "files[37]"     string => "file36/1/2/3/4/5/subfile1";
      "create[37]"    string => "true";
      "initial[37]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:rw", "group:bin:r", "all:r" };
      "exp_lines[37]"  slist => { "user::rwx", "group::r-x", "user:bin:rw-", "group:bin:r--", "other::r--" };

      "files[38]"     string => "file38/.";
      "recursive[38]" string => "false";
      "user[38]"      string => "bin";
      "ace[38]"       string => "-rw";
      "create[38]"    string => "true";
      "initial[38]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:-rwx", "group:bin:r", "all:rx" };
      "exp_lines[38]"  slist => { "user::rwx", "group::r-x", "user:bin:---", "group:bin:r--", "other::r-x" };
      "mode[38]"      string => "enforce";
      "status[38]"    string => "success";
      "execute[38]"   string => "true";

      "files[39]"     string => "file39";
      "recursive[39]" string => "true";
      "user[39]"      string => "bin";
      "ace[39]"       string => "=rw";
      "create[39]"    string => "true";
      "initial[39]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:rw", "group:bin:r", "all:r" };
      "exp_lines[39]"  slist => { "user::rwx", "group::r-x", "user:bin:rw-", "group:bin:r--", "other::r--" };
      "mode[39]"      string => "enforce";
      "status[39]"    string => "success";
      "execute[39]"   string => "true";

    # AUDIT ERROR
     ## recursive
      "files[40]"     string => "file40";
      "recursive[40]" string => "true";
      "user[40]"      string => "bin";
      "ace[40]"       string => "+rwx";
      "create[40]"    string => "true";
      "initial[40]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:r", "group:bin:r", "all:r" };
      "exp_lines[40]"  slist => { "user::rwx", "group::r-x", "user:bin:r--", "group:bin:r--", "other::r--" };
      "mode[40]"      string => "audit";
      "status[40]"    string => "error";
      "execute[40]"   string => "true";

      "files[41]"     string => "file41";
      "recursive[41]" string => "true";
      "user[41]"      string => "bin";
      "ace[41]"       string => "=rw";
      "create[41]"    string => "true";
      "initial[41]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:r", "group:bin:r", "all:r" };
      "exp_lines[41]"  slist => { "user::rwx", "group::r-x", "user:bin:r--", "group:bin:r--", "other::r--" };
      "mode[41]"      string => "audit";
      "status[41]"    string => "error";
      "execute[41]"   string => "true";

      "files[42]"     string => "file42";
      "recursive[42]" string => "true";
      "user[42]"      string => "bin";
      "ace[42]"       string => "-rw";
      "create[42]"    string => "true";
      "initial[42]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:r", "group:bin:r", "all:r" };
      "exp_lines[42]"    slist => { "user::rwx", "group::r-x", "user:bin:r--", "group:bin:r--", "other::r--" };
      "mode[42]"      string => "audit";
      "status[42]"    string => "error";
      "execute[42]"   string => "true";

      "files[43]"     string => "file43/.";
      "recursive[43]" string => "true";
      "user[43]"      string => "bin";
      "ace[43]"       string => "-rw";
      "create[43]"    string => "true";
      "initial[43]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:-rwx", "group:bin:r", "all:rx" };
      "exp_lines[43]"  slist => { "user::rwx", "group::r-x", "user:bin:---", "group:bin:r", "other::r-x" };
      "mode[43]"      string => "audit";
      "status[43]"    string => "error";
      "execute[43]"   string => "true";

      "files[44]"     string => "file43/1/2/3/4/5/subfile1";
      "create[44]"    string => "true";
      "initial[44]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:r", "group:bin:r", "all:r" };
      "exp_lines[44]"  slist => { "user::rwx", "group::r-x", "user:bin:r--", "group:bin:r--", "other::r--" };

      "files[45]"     string => "file45/.";
      "recursive[45]" string => "true";
      "user[45]"      string => "bin";
      "ace[45]"       string => "-rw";
      "create[45]"    string => "true";
      "initial[45]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:rwx", "group:bin:r", "all:rx" };
      "exp_lines[45]"  slist => { "user::rwx", "group::r-x", "user:bin:rwx", "group:bin:r--", "other::r-x" };
      "mode[45]"      string => "audit";
      "status[45]"    string => "error";
      "execute[45]"   string => "true";

      # non-recursive
      "files[46]"     string => "file46";
      "recursive[46]" string => "false";
      "user[46]"      string => "bin";
      "ace[46]"       string => "+rwx";
      "create[46]"    string => "true";
      "initial[46]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:r", "group:bin:r", "all:r" };
      "exp_lines[46]"  slist => { "user::rwx", "group::r-x", "user:bin:r--", "group:bin:r--", "other::r--" };
      "mode[46]"      string => "audit";
      "status[46]"    string => "error";
      "execute[46]"   string => "true";

      "files[47]"     string => "file47";
      "recursive[47]" string => "false";
      "user[47]"      string => "bin";
      "ace[47]"       string => "=rw";
      "create[47]"    string => "true";
      "initial[47]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:r", "group:bin:r", "all:r" };
      "exp_lines[47]"  slist => { "user::rwx", "group::r-x", "user:bin:r", "group:bin:r", "other::r" };
      "mode[47]"      string => "audit";
      "status[47]"    string => "error";
      "execute[47]"   string => "true";

      "files[48]"     string => "file48";
      "recursive[48]" string => "false";
      "user[48]"      string => "bin";
      "ace[48]"       string => "-rw";
      "create[48]"    string => "true";
      "initial[48]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:r", "group:bin:r", "all:r" };
      "exp_lines[48]"  slist => { "user::rwx", "group::r-x", "user:bin:r--", "group:bin:r--", "other::r--" };
      "mode[48]"      string => "audit";
      "status[48]"    string => "error";
      "execute[48]"   string => "true";

      "files[49]"     string => "file49/.";
      "recursive[49]" string => "false";
      "user[49]"      string => "bin";
      "ace[49]"       string => "-rw";
      "create[49]"    string => "true";
      "initial[49]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:+rwx", "group:bin:r", "all:rx" };
      "exp_lines[49]"  slist => { "user::rwx", "group::r-x", "user:bin:rwx", "group:bin:r--", "other::r-x" };
      "mode[49]"      string => "audit";
      "status[49]"    string => "error";
      "execute[49]"   string => "true";

      "files[50]"     string => "file49/1/2/3/4/5/subfile1";
      "create[50]"    string => "true";
      "initial[50]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:r", "group:bin:r", "all:r" };
      "exp_lines[50]"  slist => { "user::rwx", "group::r-x", "user:bin:r--", "group:bin:r--", "other::r--" };

      "files[51]"     string => "file51/.";
      "recursive[51]" string => "false";
      "user[51]"      string => "bin";
      "ace[51]"       string => "-rw";
      "create[51]"    string => "true";
      "initial[51]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:rwx", "group:bin:r", "all:rx" };
      "exp_lines[51]"  slist => { "user::rwx", "group::r-x", "user:bin:rwx", "group:bin:r--", "other::r-x" };
      "mode[51]"      string => "audit";
      "status[51]"    string => "error";
      "execute[51]"   string => "true";

      # As in the error tests
      "files[52]"     string => "fileThatDoesNotExist52";
      "recursive[52]" string => "false";
      "user[52]"      string => "bin";
      "ace[52]"       string => "-rw";
      "create[52]"    string => "false";
      "mode[52]"      string => "audit";
      "status[52]"    string => "error";
      "execute[52]"   string => "true";

      "files[53]"     string => "fileThatDoesNotExist53";
      "recursive[53]" string => "true";
      "user[53]"      string => "bin";
      "ace[53]"       string => "-rw";
      "create[53]"    string => "false";
      "mode[53]"      string => "audit";
      "status[53]"    string => "error";
      "execute[53]"   string => "true";

      "files[54]"     string => "file54";
      "recursive[54]" string => "false";
      "user[54]"      string => "aUserThatDoesNotExist";
      "ace[54]"       string => "+r";
      "create[54]"    string => "true";
      "initial[54]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:rwx", "group:bin:r", "all:rx" };
      "exp_lines[54]"  slist => { "user::rwx", "group::r-x", "user:bin:rwx", "group:bin:r--", "other::r-x" };
      "mode[54]"      string => "audit";
      "status[54]"    string => "error";
      "execute[54]"   string => "true";

    # REGEX entry test
      "files[55]"     string => "rfile55";
      "create[55]"    string => "true";
      "initial[55]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:r", "group:bin:r", "all:r" };
      "exp_lines[55]"  slist => { "user::rwx", "group::r-x", "user:bin:---", "group:bin:r--", "other::r--" };
      "execute[55]"   string => "false";

      "files[56]"     string => "rfile56/.";
      "create[56]"    string => "true";
      "initial[56]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:-rwx", "group:bin:r", "all:rx" };
      "exp_lines[56]"  slist => { "user::rwx", "group::r-x", "user:bin:---", "group:bin:r--", "other::r-x" };
      "execute[56]"   string => "false";

      "files[57]"     string => "rfile4/1/2/3/4/5/subfile1";
      "create[57]"    string => "true";
      "initial[57]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:r", "group:bin:r", "all:r" };
      "exp_lines[57]"  slist => { "user::rwx", "group::r-x", "user:bin:---", "group:bin:r--", "other::r--" };

      "files[58]"     string => "rfile*";
      "recursive[58]" string => "true";
      "user[58]"      string => "bin";
      "ace[58]"       string => "-rwx";
      "create[58]"    string => "false";
      "mode[58]"      string => "enforce";
      "status[58]"    string => "repaired";
      "execute[58]"   string => "true";

      "indices" slist => getindices("files");
      # Needed for succes + recursive
      "indices_recursive" slist => { "15", "30" };

      "printable_lines[${indices}]" string => join("${const.endl}", "exp_lines[${indices}]");

  classes:
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";
      "create_${indices}" expression => strcmp("${create[${indices}]}", "true");

  files:
      "${tmp}/${files[${indices}]}"
        create => "true",
        ifvarclass => "create_${indices}",
        acl => access_generic("@{initial[${indices}]}");

      pass3::
        "${tmp}/${files[${indices_recursive}]}"
        create => "true",
        depth_search => recurse_with_base("3"),
        acl => access_generic("@{initial[${indices_recursive}]}");
}

#######################################################

bundle agent test
{
  vars:
      "args${init.indices}" slist => { "${init.tmp}/${init.files[${init.indices}]}", "${init.recursive[${init.indices}]}", "${init.user[${init.indices}]}", "${init.ace[${init.indices}]}" };

  classes:
    "pass2" expression => "pass1";
    "pass1" expression => "any";
  methods:
    pass1.!pass2::
    #REPAIRED
      "ph1" usebundle => apply_gm("permissions_user_acl_present", @{args1}, "${init.status[1]}", "ph1", "${init.mode[1]}" );
      "ph2" usebundle => apply_gm("permissions_user_acl_present", @{args2}, "${init.status[2]}", "ph2", "${init.mode[2]}" );
      "ph3" usebundle => apply_gm("permissions_user_acl_present", @{args3}, "${init.status[3]}", "ph3", "${init.mode[3]}" );
      "ph4" usebundle => apply_gm("permissions_user_acl_present", @{args4}, "${init.status[4]}", "ph4", "${init.mode[4]}" );
      # Do not execute 5
      "ph6" usebundle => apply_gm("permissions_user_acl_present", @{args6}, "${init.status[6]}", "ph6", "${init.mode[6]}" );
      "ph7" usebundle => apply_gm("permissions_user_acl_present", @{args7}, "${init.status[7]}", "ph7", "${init.mode[7]}" );
      "ph8" usebundle => apply_gm("permissions_user_acl_present", @{args8}, "${init.status[8]}", "ph8", "${init.mode[8]}" );
      "ph9" usebundle => apply_gm("permissions_user_acl_present", @{args9}, "${init.status[9]}", "ph9", "${init.mode[9]}" );
      "ph10" usebundle => apply_gm("permissions_user_acl_present", @{args10}, "${init.status[10]}", "ph10", "${init.mode[10]}" );
      # Do not execute 11
      "ph12" usebundle => apply_gm("permissions_user_acl_present", @{args12}, "${init.status[12]}", "ph12", "${init.mode[12]}" );
    #SUCCESS
      "ph13" usebundle => apply_gm("permissions_user_acl_present", @{args13}, "${init.status[13]}", "ph13", "${init.mode[13]}" );
      "ph14" usebundle => apply_gm("permissions_user_acl_present", @{args14}, "${init.status[14]}", "ph14", "${init.mode[14]}" );
      "ph15" usebundle => apply_gm("permissions_user_acl_present", @{args15}, "${init.status[15]}", "ph15", "${init.mode[15]}" );
      # Do not execute 16
      "ph17" usebundle => apply_gm("permissions_user_acl_present", @{args17}, "${init.status[17]}", "ph17", "${init.mode[17]}" );
      "ph18" usebundle => apply_gm("permissions_user_acl_present", @{args18}, "${init.status[18]}", "ph18", "${init.mode[18]}" );
      "ph19" usebundle => apply_gm("permissions_user_acl_present", @{args19}, "${init.status[19]}", "ph19", "${init.mode[19]}" );
      "ph20" usebundle => apply_gm("permissions_user_acl_present", @{args20}, "${init.status[20]}", "ph20", "${init.mode[20]}" );
      "ph21" usebundle => apply_gm("permissions_user_acl_present", @{args21}, "${init.status[21]}", "ph21", "${init.mode[21]}" );
      # Do not execute 22
      "ph23" usebundle => apply_gm("permissions_user_acl_present", @{args23}, "${init.status[23]}", "ph23", "${init.mode[23]}" );
      "ph24" usebundle => apply_gm("permissions_user_acl_present", @{args24}, "${init.status[24]}", "ph24", "${init.mode[24]}" );
    #ERROR
      "ph25" usebundle => apply_gm("permissions_user_acl_present", @{args25}, "${init.status[25]}", "ph25", "${init.mode[25]}" );
      "ph26" usebundle => apply_gm("permissions_user_acl_present", @{args26}, "${init.status[26]}", "ph26", "${init.mode[26]}" );
      "ph27" usebundle => apply_gm("permissions_user_acl_present", @{args27}, "${init.status[27]}", "ph27", "${init.mode[27]}" );
    #AUDIT SUCCESS
      "ph28" usebundle => apply_gm("permissions_user_acl_present", @{args28}, "${init.status[28]}", "ph28", "${init.mode[28]}" );
      "ph29" usebundle => apply_gm("permissions_user_acl_present", @{args29}, "${init.status[29]}", "ph29", "${init.mode[29]}" );
      "ph30" usebundle => apply_gm("permissions_user_acl_present", @{args30}, "${init.status[30]}", "ph30", "${init.mode[30]}" );
      # Do not execute 31
      "ph32" usebundle => apply_gm("permissions_user_acl_present", @{args32}, "${init.status[32]}", "ph32", "${init.mode[32]}" );
      "ph33" usebundle => apply_gm("permissions_user_acl_present", @{args33}, "${init.status[33]}", "ph33", "${init.mode[33]}" );
      "ph34" usebundle => apply_gm("permissions_user_acl_present", @{args34}, "${init.status[34]}", "ph34", "${init.mode[34]}" );
      "ph35" usebundle => apply_gm("permissions_user_acl_present", @{args35}, "${init.status[35]}", "ph35", "${init.mode[35]}" );
      "ph36" usebundle => apply_gm("permissions_user_acl_present", @{args36}, "${init.status[36]}", "ph36", "${init.mode[36]}" );
      # Do not execute 37
      "ph38" usebundle => apply_gm("permissions_user_acl_present", @{args38}, "${init.status[38]}", "ph38", "${init.mode[38]}" );
      "ph39" usebundle => apply_gm("permissions_user_acl_present", @{args39}, "${init.status[39]}", "ph39", "${init.mode[39]}" );
    #AUDIT ERROR
     ## Copy of the repaired
      "ph40" usebundle => apply_gm("permissions_user_acl_present", @{args40}, "${init.status[40]}", "ph40", "${init.mode[40]}" );
      "ph41" usebundle => apply_gm("permissions_user_acl_present", @{args41}, "${init.status[41]}", "ph41", "${init.mode[41]}" );
      "ph42" usebundle => apply_gm("permissions_user_acl_present", @{args42}, "${init.status[42]}", "ph42", "${init.mode[42]}" );
      "ph43" usebundle => apply_gm("permissions_user_acl_present", @{args43}, "${init.status[43]}", "ph43", "${init.mode[43]}" );
      # Do not execute 44
      "ph45" usebundle => apply_gm("permissions_user_acl_present", @{args45}, "${init.status[45]}", "ph45", "${init.mode[45]}" );
      "ph46" usebundle => apply_gm("permissions_user_acl_present", @{args46}, "${init.status[46]}", "ph46", "${init.mode[46]}" );
      "ph47" usebundle => apply_gm("permissions_user_acl_present", @{args47}, "${init.status[47]}", "ph47", "${init.mode[47]}" );
      "ph48" usebundle => apply_gm("permissions_user_acl_present", @{args48}, "${init.status[48]}", "ph48", "${init.mode[48]}" );
      "ph49" usebundle => apply_gm("permissions_user_acl_present", @{args49}, "${init.status[49]}", "ph49", "${init.mode[49]}" );
      # Do not execute 40
      "ph51" usebundle => apply_gm("permissions_user_acl_present", @{args51}, "${init.status[51]}", "ph51", "${init.mode[51]}" );
     ## Copy of the error
      "ph52" usebundle => apply_gm("permissions_user_acl_present", @{args52}, "${init.status[52]}", "ph52", "${init.mode[52]}" );
      "ph53" usebundle => apply_gm("permissions_user_acl_present", @{args53}, "${init.status[53]}", "ph53", "${init.mode[53]}" );
      "ph54" usebundle => apply_gm("permissions_user_acl_present", @{args54}, "${init.status[54]}", "ph54", "${init.mode[54]}" );

    # REGEX entry test
      # Do not execute 55, 56, 57
      "ph58" usebundle => apply_gm("permissions_user_acl_present", @{args58}, "${init.status[58]}", "ph58", "${init.mode[58]}" );
     
}

#######################################################

bundle agent check
{
  vars:
    pass1::
      "getfacl_output[${init.indices}]" string => execresult("${paths.getfacl} ${init.tmp}/${init.files[${init.indices}]}", "useshell");

  classes:
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";

      "create_${init.indices}"  expression => strcmp("${init.create[${init.indices}]}", "true");
      "execute_${init.indices}" expression => strcmp("${init.execute[${init.indices}]}", "true");
    pass3::
      "lines_matches_failed_${init.indices}" not => regcmp(".*${init.exp_lines[${init.indices}]}.*","${getfacl_output[${init.indices}]}"),
        ifvarclass => "create_${init.indices}";

      "lines_not_ok" expression => "lines_matches_failed_${init.indices}";

      "classes_not_ok"  expression => or("classes_ok", "!ph${init.indices}_ok"),
        ifvarclass => "execute_${init.indices}";
      "ok"          expression => "!classes_not_ok.!lines_not_ok";

  reports:
    pass3::
      "Test for file nb ${init.indices} FAILED"
        ifvarclass => "!ph${init.indices}_ok.execute_${init.indices}";

      "####################${const.endl}Missing at least one of the following lines:${const.endl}${init.printable_lines[${init.indices}]} ${const.endl}in the following output: ${const.endl}${getfacl_output[${init.indices}]}${const.endl}   ####################"
        ifvarclass => "lines_matches_failed_${init.indices}";
    pass3.ok::
      "$(this.promise_filename) Pass";
    pass3.!ok::
      "$(this.promise_filename) FAIL";
}
