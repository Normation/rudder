#######################################################
#
# Test checking if a text block is present in a file
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    "tmp"            string => getenv("TEMP", 1024);
    "reference_file" string => "${tmp}/reference";
    "file"           string => "${tmp}/test";
    "file_canon"     string => canonify("${file}");
    "block_to_add"   string => "This is a test block
with multiple lines.";

  commands:
    "/bin/echo"
      args    => "\"${block_to_add}\" > \"${reference_file}\"",
      contain => in_shell;
}

#######################################################

bundle agent test
{
  methods:
    "ph1" usebundle => file_block_present("${init.file}", "${init.block_to_add}");
}

#######################################################

bundle agent check
{
  vars:
    "line_exists_test" string => "/usr/bin/diff \"${init.reference_file}\" \"${init.file}\"";

  classes:
    # By default, file_block_present should create the file if it doesn't exist
    "file_exists"  expression => fileexists("${init.file}");
    "block_exists"
      expression => returnszero("${line_exists_test}", "noshell"),
      ifvarclass => canonify("file_block_present_${init.file}_reached");

    "ok"           expression => "file_exists.block_exists.file_block_present_${init.file_canon}_ok.!file_block_present_${init.file_canon}_error";

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
    !file_exists::
      "fileexists returns false for file ${init.file}";
    !line_exists::
      "diff command doesn't return 0 for command: ${line_exists_test}";
}
