#######################################################
#
# Exit with a specific code
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    "tmp"               string => getenv("TEMP", 1024);

    # Enforce
    "variable_name[0]"  string => "my_prefix.variable0";
    "value[0]"          string => "c.*t";
    "expected_value[0]" string => "c\.\*t";
    "status[0]"         string => "success";
    "mode[0]"           string => "enforce";

    "variable_name[1]"  string => "my_prefix.variable1";
    "value[1]"          string => "cat";
    "expected_value[1]" string => "cat";
    "status[1]"         string => "success";
    "mode[1]"           string => "enforce";

    "variable_name[2]"  string => "my_prefix.variable_that_does_not_exist2";
    "status[2]"         string => "error";
    "mode[2]"           string => "enforce";

    # Audit
    "variable_name[3]"  string => "my_prefix.variable3";
    "value[3]"          string => "c.*t";
    "expected_value[3]" string => "c\.\*t";
    "status[3]"         string => "success";
    "mode[3]"           string => "audit";

    "variable_name[4]"  string => "my_prefix.variable4";
    "value[4]"          string => "cat";
    "expected_value[4]" string => "cat";
    "status[4]"         string => "success";
    "mode[4]"           string => "audit";

    "variable_name[5]"  string => "my_prefix.variable_that_does_not_exist5";
    "status[5]"         string => "error";
    "mode[5]"           string => "audit";

    "indices" slist => getindices("variable_name");

  methods:
    "method_call_${indices}" usebundle => variable_string("my_prefix", "variable${indices}", "${value[${indices}]}");

}

#######################################################

bundle agent test
{
  vars:
    "args${init.indices}" slist => { "${init.variable_name[${init.indices}]}" };

  methods:
    # Enforce
    "ph0"  usebundle => apply_gm("variable_string_escaped",  @{args0},  "${init.status[0]}",  "ph0",  "${init.mode[0]}");
    "ph1"  usebundle => apply_gm("variable_string_escaped",  @{args1},  "${init.status[1]}",  "ph1",  "${init.mode[1]}");
    "ph2"  usebundle => apply_gm("variable_string_escaped",  @{args2},  "${init.status[2]}",  "ph2",  "${init.mode[2]}");
    # Audit
    "ph3"  usebundle => apply_gm("variable_string_escaped",  @{args3},  "${init.status[3]}",  "ph3",  "${init.mode[3]}");
    "ph4"  usebundle => apply_gm("variable_string_escaped",  @{args4},  "${init.status[4]}",  "ph4",  "${init.mode[4]}");
    "ph5"  usebundle => apply_gm("variable_string_escaped",  @{args5},  "${init.status[5]}",  "ph5",  "${init.mode[5]}");


}

#######################################################

bundle agent check
{
  classes:
    "values_not_ok" expression => or("values_not_ok", strcmp("${${init.variable_name[${init.indices}]}}", "${init.expected_value[${init.indices}]}"));
    "classes_ok"    expression => "ph0_ok.ph1_ok.ph2_ok.ph3_ok.ph4_ok.ph5_ok";

    "ok"            expression => "classes_ok";

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";

}
