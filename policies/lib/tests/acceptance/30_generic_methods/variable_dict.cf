#######################################################
#
# Create a dict variable
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
}

#######################################################

bundle agent test
{
  vars:
    "dict1" string => '{ "key1": "value1", "key2": "value2", "key3": { "keyx": "valuex" }, "key4": [ "valuey" ] }';
    "dict2" string => '"string"';
    "dict3" string => 'invalid';

  methods:
    "ph1" usebundle => variable_dict("prefix", "var1", "${dict1}");
    "ph2" usebundle => variable_dict("prefix", "var2", "${dict2}");
    "ph3" usebundle => variable_dict("prefix", "var3", "${dict3}");
}

#######################################################

bundle agent check
{
  classes:
    
    "ok_1" expression => "variable_dict_var1_kept.!variable_dict_var1_repaired.!variable_dict_var1_error";
    "ok_2" expression => "!variable_dict_var2_kept.!variable_dict_var2_repaired.variable_dict_var2_error";
    "ok_3" expression => "!variable_dict_var3_kept.!variable_dict_var3_repaired.variable_dict_var3_error";
    "ok_key1" expression => strcmp("${prefix.var1[key1]}", "value1");
    "ok_key2" expression => strcmp("${prefix.var1[key2]}", "value2");
    "ok_key3" expression => strcmp("${prefix.var1[key3][keyx]}", "valuex");
    "ok_key4" expression => strcmp("${prefix.var1[key4][0]}", "valuey");

    "ok"  expression => "ok_1.ok_2.ok_3.ok_key1.ok_key2.ok_key3.ok_key4";

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
}
