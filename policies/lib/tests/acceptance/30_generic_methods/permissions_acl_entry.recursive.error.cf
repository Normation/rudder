#######################################################
#
# Test checking if ACLs are present or not
# 
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
      "tmp"                        string => getenv("TEMP", 1024);
      "initial_acls_files"         slist => { "user:*:rwx", "group:*:rx", "user:bin:r", "group:bin:r", "all:r", "mask:rx" };
      "expected_lines_files"       slist => { "user::rwx", "group::r-x", "user:bin:r--", "group:bin:r--", "other::r--", "mask::r-x" };
      # Cfengine tends to minimize the mask when editing an ACL, do not force it here otherwise it will be recalculated
      # at execution when calling the GM below and we will never have error outcomes.

      "files[1]" string => "file1";
      "user[1]"  string => "*:rwxyz";
      "group[1]" string => "";
      "other[1]" string => "r";

      "files[2]" string => "file2";
      "user[2]"  string => "unknow_user:rx";
      "group[2]" string => "";
      "other[2]" string => "r";

      "files[3]" string => "unknow_file";
      "user[3]"  string => "";
      "group[3]" string => "";
      "other[3]" string => "r";

      "files[4]" string => "file*";
      "user[4]"  string => "*:yz";
      "group[4]" string => "";
      "other[4]" string => "r";

      "files[5]" string => "non_matching*regex";
      "user[5]"  string => "*:";
      "group[5]" string => "";
      "other[5]" string => "r";

      "indices" slist => getindices("files");
      # Do not create 3 and 4
      "create_indices" slist => { "1", "2" };
      "lines[${indices}]" slist => { @{expected_lines_files} };
      "lines[${create_indices}]" slist => { @{expected_lines_files} };

      "printable_lines[${indices}]" string => join("${const.endl}", "lines[${indices}]");
      "canonified_lines[${indices}]" string => canonify("${lines[${indices}]}");

  files:
      "${tmp}/${files[${create_indices}]}"
        create => "true",
        acl    => access_generic("@{initial_acls_files}");

}

#######################################################

bundle agent test
{
  vars:
      "args${init.indices}" slist => { "${init.tmp}/${init.files[${init.indices}]}", "true", "${init.user[${init.indices}]}", "${init.group[${init.indices}]}", "${init.other[${init.indices}]}" };

  methods:
      "ph1" usebundle => apply_gm("permissions_acl_entry", @{args1}, "error", "ph1", "enforce" );
      "ph2" usebundle => apply_gm("permissions_acl_entry", @{args2}, "error", "ph2", "enforce" );
      "ph3" usebundle => apply_gm("permissions_acl_entry", @{args3}, "error", "ph3", "enforce" );
      "ph4" usebundle => apply_gm("permissions_acl_entry", @{args4}, "error", "ph4", "enforce" );
      "ph5" usebundle => apply_gm("permissions_acl_entry", @{args5}, "error", "ph5", "enforce" );
}

#######################################################

bundle agent check
{
  vars:
    pass1::
      "getfacl_output[${init.indices}]" string => execresult("${paths.getfacl} ${init.tmp}/${init.files[${init.indices}]}", "useshell");

  classes:
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";

    pass3::
      "lines_matches_${init.create_indices}_${init.canonified_lines[${init.create_indices}]}" not => regcmp(".*${init.lines[${init.create_indices}]}.*","${getfacl_output[${init.create_indices}]}");
      "lines_${init.create_indices}_ok" expression => "lines_matches_${init.create_indices}_${init.canonified_lines[${init.create_indices}]}";
      "lines_not_ok" expression => "lines_${init.create_indices}_ok";

      
      "classes_ok"  expression => "ph1_ok.ph2_ok.ph3_ok.ph4_ok.ph5_ok";
      "ok"          expression => "classes_ok.!lines_not_ok";

  reports:
    pass3::
      "####################${const.endl}Missing at least one of the following lines:${const.endl}${init.printable_lines[${init.indices}]} ${const.endl}in the following output: ${const.endl}${getfacl_output[${init.indices}]}${const.endl}   ####################"
        ifvarclass => "lines_matches_${init.indices}_${init.canonified_lines[${init.indices}]}";
    pass3.ok::
      "$(this.promise_filename) Pass";
    pass3.!ok::
      "$(this.promise_filename) FAIL";
}
