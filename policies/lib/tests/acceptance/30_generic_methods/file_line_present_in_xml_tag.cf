#######################################################
#
# Test checking if a line is present in a XML file
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################
bundle agent init
{
  vars:
    "tmp"             string => getenv("TEMP", 1024);
    "file"            string => "${tmp}/test.xml";
    "file_canon"      string => canonify("${file}");
    "tag"             string => "tag";

    "invalid_tag"     string => "NOTAG";
    "invalid_content" string => "NOCONTENT";
    "invalid_file"    string => "${tmp}/invalid.xml";
    "invalid_file_canon" string => canonify("${invalid_file}");

    "line"            string => "content";

    "reference_file"  string => "${tmp}/ref.xml";
    "base_text"       string => "<tag>
</tag>";
    "reference"       string => "<tag>
${line}
</tag>";

  commands:
    "/bin/echo"
      args    => "\"${reference}\" > \"${reference_file}\"",
      contain => in_shell;

   "/bin/echo"
      args    => "\"${base_text}\" > \"${file}\"",
      contain => in_shell;

    "/bin/echo"
      args    => "\"${reference}\" > \"${invalid_file}\"",
      contain => in_shell;



}

#######################################################

bundle agent test
{
  methods:
    "ph1" usebundle => file_line_present_in_xml_tag("${init.file}", "${init.tag}", "${init.line}");
    "ph2" usebundle => file_line_present_in_xml_tag("${init.invalid_file}", "${init.invalid_tag}", "${init.invalid_content}");

}

#######################################################

bundle agent check
{
  vars:
    "line_exists_test" string => "/usr/bin/diff \"${init.reference_file}\" \"${init.file}\"";
    "no_change_test"   string => "/usr/bin/diff \"${init.reference_file}\" \"${init.invalid_file}\"";

  classes:
    "line_exists"
       expression => returnszero("${line_exists_test}", "noshell"),
       ifvarclass => canonify("file_line_present_in_xml_tag_${init.file}_reached");

    "no_change" 
       expression => returnszero("${no_change_test}", "noshell"),
       ifvarclass => canonify("file_line_present_in_xml_tag_${init.invalid_file}_reached");

    "valid_tag_change"   expression => "file_line_present_in_xml_tag_${init.file_canon}_ok.!file_line_present_in_xml_tag_${init.file_canon}_not_ok";
    "invalid_tag_change" expression => "file_line_present_in_xml_tag_${init.invalid_file_canon}_not_ok";

    "ok"          expression => "line_exists.no_change.valid_tag_change.invalid_tag_change";

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
    !line_exists::
      "diff command doesn't return 0 for command: ${line_exists_test}";

    !no_change::
      "diff command doesn't return 0 for command: ${no_change_test}";
    !valid_tag_change::
      "The classes defined by edition of ${init.file} are invalid";
    !invalid_tag_change::
      "The classes defined by edition of ${init.invalid_file} are invalid";
}

