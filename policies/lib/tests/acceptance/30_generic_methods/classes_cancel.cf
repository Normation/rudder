#######################################################
#
# This will check that result classes are canceled
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("$(this.promise_filename)") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    "tmp"         string => getenv("TEMP", 1024);
    "file"        string => "${tmp}/test";
    "file_canon"  string => canonify("${file}");
}

#######################################################

bundle agent test
{

  methods:
    "ph1" usebundle => file_ensure_lines_present("${init.file}", "sample two"); # should get repaired
    "ph2"  usebundle => _classes_cancel("file_ensure_lines_present_${init.file_canon}");

}

#######################################################

bundle agent check
{
  classes:
      "ok"          expression => "!file_ensure_lines_present_${init.file_canon}_reached";

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
}
