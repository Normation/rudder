#########################################
#
# Test checking if a directory exists or not 
# 
#########################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    "tmp"              string => getenv("TEMP", 1024);
    "directory"        string => "${tmp}/test";
    "directory1"       string => "${tmp}/test1";
    "directory_canon"  string => canonify("${directory}");
    "directory1_canon" string => canonify("${directory1}");
    "directory_list"    slist => { "${directory}", "${directory1}" };


  files:
    "${directory}/."
      create => "true";
}

#######################################################

bundle agent test
{
  methods:
    "fce" usebundle => directory_check_exists("${init.directory_list}");
}

#######################################################

bundle agent check
{
  vars:
    # dir should exist
    "directory_check_exists_test"  string => "/bin/ls \"${init.directory}\"";
    # dir shouldn't exist
    "directory_check_exists_test1" string => "/bin/ls \"${init.directory1}\"";

  classes:
    "directory_check_exists_test_ok"
      expression => returnszero("${directory_check_exists_test}", "useshell"),
      ifvarclass => canonify("directory_check_exists_${init.directory}_reached");
    "directory_check_exists_test1_ok"
      expression => returnszero("${directory_check_exists_test1}", "useshell"),
      ifvarclass => canonify("directory_check_exists_${init.directory1}_reached");

    "ok"                   expression => "directory_check_exists_test_ok.directory_check_exists_${init.directory_canon}_ok.!directory_check_exists_test1_ok.!directory_check_exists_${init.directory1_canon}_ok.directory_check_exists_${init.directory_canon}_reached.directory_check_exists_${init.directory1_canon}_reached";

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
    !directory_check_exists_test_ok::
      "${init.directory} is not present as expected";
    directory_check_exists_test1_ok::
      "${init.directory1} is not absent as expected";

    cfengine::
      "Check of ${init.directory} is not reached"
        ifvarclass => "!directory_check_exists_${init.directory_canon}_reached";
      "Check of ${init.directory1} is not reached"
        ifvarclass => "!directory_check_exists_${init.directory1_canon}_reached";

}
