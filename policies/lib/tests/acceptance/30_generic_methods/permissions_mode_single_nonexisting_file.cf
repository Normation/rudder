#######################################################
#
# Test checking if using permissions methods on a non existent file causes an error
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    "tmp"        string => getenv("TEMP", 1024);
    "file"       string => "${tmp}/testthatshouldneverexist";
    "file_canon" string => canonify("${file}");
    "mode"       string => "640";
    "owner"      string => "bin";
    "group"      string => "bin";

  files:
    "${file}"
      delete => tidy;

}

#######################################################

bundle agent test
{
  methods:
    "ph1" usebundle => permissions("${init.file}", "${init.mode}", "${init.owner}", "${init.group}");
}

#######################################################

bundle agent check
{

  classes:
    # Make sure the file still doesn't exist - we don't want CFEngine creating it or this test getting confused
    "permissions_test_exists"
      expression => fileexists("${init.file}");

    "ok"                   expression => "!permissions_test_exists.permissions_${init.file_canon}_reached.permissions_${init.file_canon}_error.!permissions_${init.file_canon}_ok.!permissions_${init.file_canon}_repaired";

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";

}
