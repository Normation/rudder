#########################################
#
# Test checking if a file is hardlinked to an other or not 
# 
#########################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    "tmp"            string => getenv("TEMP", 1024);

    "file"           string => "${tmp}/test";
    "file_canon"     string => canonify("${file}");

    "file2"          string => "${tmp}/test2";
    "file2_canon"    string => canonify("${file2}");

    "hardlink"        string => "${tmp}/hardlink";
    "hardlink_canon"  string => canonify("${hardlink}");

    "file_list"       slist => { "${file}", "${hardlink}" };

  files:
    "${file}"
      create => "true";

    "${file2}"
      create => "true";

    "${hardlink}"
      link_from => linkfrom("${file}", "hardlink");

}

#######################################################

bundle agent test
{
  methods:
    "positive"  usebundle => file_check_hardlink("${init.file}",  "${init.hardlink}");
    "negative"  usebundle => file_check_hardlink("${init.file2}", "${init.hardlink}");
}

#######################################################

bundle agent check
{
  vars:
    # Check file type
    "test_file_devino"        string => "/usr/bin/stat -c %d:%i \"${init.file}\"";
    "test_file2_devino"       string => "/usr/bin/stat -c %d:%i \"${init.file2}\"";

    # Check hardlink type
    "test_hardlink_devino"    string => "/usr/bin/stat -c %d:%i \"${init.hardlink}\"";

  classes:
    "test_hardlink_is_hardlink"
      expression => strcmp( execresult("${test_file_devino}", "noshell"), execresult("${test_hardlink_devino}", "noshell") ),
      ifvarclass => "file_check_hardlink_${init.file_canon}_reached";

    "test_file_is_hardlink"
      expression => strcmp( execresult("${test_file2_devino}", "noshell"), execresult("${test_hardlink_devino}", "noshell") ),
      ifvarclass => "file_check_hardlink_${init.file2_canon}_reached";

    "ok"   expression => "test_hardlink_is_hardlink.file_check_hardlink_${init.file_canon}_ok.!test_file_is_hardlink.!file_check_hardlink_${init.file2_canon}_ok.file_check_hardlink_${init.file2_canon}_reached";

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
    !test_hardlink_is_hardlink::
      "${init.file} and ${init.hardlink} are not a hardlinked as expected. ";
    test_file_is_hardlink::
      "${init.file2} and ${init.hardlink} are hardlinks, not as expected.'";

    cfengine::
      "Check of ${init.file} is not reached"
        ifvarclass => "!file_check_hardlink_${init.file_canon}_reached";
      "Check of ${init.hardlink} is not reached"
        ifvarclass => "!file_check_hardlink_${init.hardlink_canon}_reached";

}
