#######################################################
#
# Test checking if ACLs are absent or not.
# 
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
      "tmp"                        string => getenv("TEMP", 1024);

     # REPAIRED
     ## recursive
      "files[1]"      string => "file1";         # args of the GM
      "recursive[1]"  string => "true";          # \\
      "group[1]"       string => "bin";          # \\
      "create[1]"     string => "true";          # if "true", the file will be created at init
      "initial[1]"     slist => { "user:*:rwx", "group:*:rx", "user:bin:r", "group:bin:r", "all:r" };
      "exp_lines[1]"   slist => { "user::rwx", "group::r-x", "user:bin:r--", "other::r--" };
      "unexp_lines[1]" slist => { "group:bin*" };
      # -> list of regex that {must|must not} match the output of getfacl on the file at the en of the test
      "mode[1]"       string => "enforce";       # mode, "enforce" or "audit"
      "status[1]"     string => "repaired";      # expected status, "repaired", "success" or "error"
      "execute[1]"    string => "true";          # Tell if an execution is needed

      "files[2]"      string => "file2/.";
      "recursive[2]"  string => "true";
      "group[2]"       string => "bin";
      "create[2]"     string => "true";
      "initial[2]"     slist => { "user:*:rwx", "group:*:rx", "group:bin:r", "all:rx" };
      "exp_lines[2]"   slist => { "user::rwx", "group::r-x", "other::r-x" };
      "unexp_lines[2]" slist => { "group:bin*" };
      "mode[2]"       string => "enforce";
      "status[2]"     string => "repaired";
      "execute[2]"    string => "true";

      "files[3]"      string => "file2/subfile1";
      "create[3]"     string => "true";
      "initial[3]"     slist => { "user:*:rwx", "group:*:rx", "user:bin:r", "group:bin:r", "all:r" };
      "exp_lines[3]"   slist => { "user::rwx", "group::r-x", "user:bin:r--", "other::r--" };
      "unexp_lines[3]" slist => { "group:bin*" };

      "files[4]"      string => "file4/.";
      "recursive[4]"  string => "true";
      "group[4]"       string => "bin";
      "create[4]"     string => "true";
      "initial[4]"     slist => { "user:*:rwx", "group:*:rx", "user:bin:rwx", "group:bin:r", "all:rx" };
      "exp_lines[4]"   slist => { "user::rwx", "group::r-x", "user:bin:rwx", "other::r-x" };
      "unexp_lines[4]" slist => { "group:bin*" };
      "mode[4]"       string => "enforce";
      "status[4]"     string => "repaired";
      "execute[4]"    string => "true";

      # non-recursive
      "files[5]"      string => "file5";
      "recursive[5]"  string => "false";
      "group[5]"       string => "bin";
      "create[5]"     string => "true"; 
      "initial[5]"     slist => { "user:*:rwx", "group:*:rx", "user:bin:r", "group:bin:r", "all:r" };
      "exp_lines[5]"   slist => { "user::rwx", "group::r-x", "user:bin:r--", "other::r--" };
      "unexp_lines[5]" slist => { "group:bin*" };
      "mode[5]"       string => "enforce";
      "status[5]"     string => "repaired";
      "execute[5]"    string => "true";

      "files[6]"      string => "file6/.";
      "recursive[6]"  string => "false";
      "group[6]"       string => "bin";
      "create[6]"     string => "true";
      "initial[6]"     slist => { "user:*:rwx", "group:*:rx", "user:bin:+rwx", "group:bin:r", "all:rx" };
      "exp_lines[6]"   slist => { "user::rwx", "group::r-x", "user:bin:rwx", "other::r-x" };
      "unexp_lines[6]" slist => { "group:bin*" };
      "mode[6]"       string => "enforce";
      "status[6]"     string => "repaired";
      "execute[6]"    string => "true";

      "files[7]"     string => "file6/subfile1";
      "create[7]"    string => "true";
      "initial[7]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:r", "group:bin:r", "all:r" };
      "exp_lines[7]"  slist => { "user::rwx", "group::r-x", "user:bin:r--", "group:bin:r--", "other::r--" };

      "files[8]"      string => "file8/.";
      "recursive[8]"  string => "false";
      "group[8]"       string => "bin";
      "create[8]"     string => "true";
      "initial[8]"     slist => { "user:*:rwx", "group:*:rx", "user:bin:rwx", "group:bin:r", "all:rx" };
      "exp_lines[8]"   slist => { "user::rwx", "group::r-x", "user:bin:rwx", "other::r-x" };
      "unexp_lines[8]" slist => { "group:bin*" };
      "mode[8]"       string => "enforce";
      "status[8]"     string => "repaired";
      "execute[8]"    string => "true";

     # SUCCESS
      "files[9]"      string => "file9";
      "recursive[9]"  string => "true";
      "group[9]"       string => "bin";
      "create[9]"     string => "true";
      "initial[9]"     slist => { "user:*:rwx", "group:*:rx", "user:bin:r", "all:r" };
      "exp_lines[9]"   slist => { "user::rwx", "group::r-x", "user:bin:r--", "other::r--" };
      "unexp_lines[9]" slist => { "group:bin*" };
      "mode[9]"       string => "enforce";
      "status[9]"     string => "success";
      "execute[9]"    string => "true";

      "files[10]"      string => "file10/.";
      "recursive[10]"  string => "true";
      "group[10]"       string => "bin";
      "create[10]"     string => "true";
      "initial[10]"     slist => { "user:*:rwx", "group:*:rx", "user:bin:r", "all:r" };
      "exp_lines[10]"   slist => { "user::rwx", "group::r-x", "user:bin:r--", "other::r--" };
      "unexp_lines[10]" slist => { "group:bin*" };
      "mode[10]"       string => "enforce";
      "status[10]"     string => "success";
      "execute[10]"    string => "true";

      # non-recursive
      "files[11]"      string => "file11/.";
      "recursive[11]"  string => "false";
      "group[11]"       string => "bin";
      "create[11]"     string => "true";
      "initial[11]"     slist => { "user:*:rwx", "group:*:rx", "user:bin:r", "all:rx" };
      "exp_lines[11]"   slist => { "user::rwx", "group::r-x", "user:bin:r--", "other::r-x" };
      "unexp_lines[11]" slist => { "group:bin*" };
      "mode[11]"       string => "enforce";
      "status[11]"     string => "success";
      "execute[11]"    string => "true";

      "files[12]"     string => "file11/subfile1";
      "create[12]"    string => "true";
      "initial[12]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:r", "group:bin:r", "all:r" };
      "exp_lines[12]"  slist => { "user::rwx", "group::r-x", "user:bin:r--", "group:bin:r--", "other::r--" };

      "files[13]"      string => "file13";
      "recursive[13]"  string => "false";
      "group[13]"       string => "aGroupThatDoesNotExist";
      "create[13]"     string => "true";
      "initial[13]"     slist => { "user:*:rwx", "group:*:rx", "user:bin:rwx", "group:bin:r", "all:rx" };
      "exp_lines[13]"   slist => { "user::rwx", "group::r-x", "user:bin:rwx", "group:bin:r--", "other::r-x" };
      "unexp_lines[13]" slist => { "group:aGroupThatDoesNotExist*" };
      "mode[13]"       string => "enforce";
      "status[13]"     string => "success";
      "execute[13]"    string => "true";

     # ERROR
      "files[14]"     string => "fileThatDoesNotExist";
      "recursive[14]" string => "false";
      "group[14]"      string => "bin";
      "create[14]"    string => "false";
      "mode[14]"      string => "enforce";
      "status[14]"    string => "error";
      "execute[14]"   string => "true";

      "files[15]"     string => "fileThatDoesNotExist2";
      "recursive[15]" string => "true";
      "group[15]"      string => "bin";
      "create[15]"    string => "false";
      "mode[15]"      string => "enforce";
      "status[15]"    string => "error";
      "execute[15]"   string => "true";

    # AUDIT SUCCESS
     # Copy of success enforce part
      "files[16]"      string => "file16";
      "recursive[16]"  string => "true";
      "group[16]"       string => "bin";
      "create[16]"     string => "true";
      "initial[16]"     slist => { "user:*:rwx", "group:*:rx", "user:bin:r", "all:r" };
      "exp_lines[16]"   slist => { "user::rwx", "group::r-x", "user:bin:r--", "other::r--" };
      "unexp_lines[16]" slist => { "group:bin*" };
      "mode[16]"       string => "audit";
      "status[16]"     string => "success";
      "execute[16]"    string => "true";

      "files[17]"      string => "file17/.";
      "recursive[17]"  string => "true";
      "group[17]"       string => "bin";
      "create[17]"     string => "true";
      "initial[17]"     slist => { "user:*:rwx", "group:*:rx", "user:bin:r", "all:r" };
      "exp_lines[17]"   slist => { "user::rwx", "group::r-x", "user:bin:r--", "other::r--" };
      "unexp_lines[17]" slist => { "group:bin*" };
      "mode[17]"       string => "audit";
      "status[17]"     string => "success";
      "execute[17]"    string => "true";

      # non-recursive
      "files[18]"      string => "file18/.";
      "recursive[18]"  string => "false";
      "group[18]"       string => "bin";
      "create[18]"     string => "true";
      "initial[18]"     slist => { "user:*:rwx", "group:*:rx", "user:bin:r", "all:rx" };
      "exp_lines[18]"   slist => { "user::rwx", "group::r-x", "user:bin:r--", "other::r-x" };
      "unexp_lines[18]" slist => { "group:bin*" };
      "mode[18]"       string => "audit";
      "status[18]"     string => "success";
      "execute[18]"    string => "true";

      "files[19]"     string => "file18/subfile1";
      "create[19]"    string => "true";
      "initial[19]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:r", "group:bin:r", "all:r" };
      "exp_lines[19]"  slist => { "user::rwx", "group::r-x", "user:bin:r--", "group:bin:r--", "other::r--" };

      "files[20]"      string => "file20";
      "recursive[20]"  string => "false";
      "group[20]"       string => "aGroupThatDoesNotExist";
      "create[20]"     string => "true";
      "initial[20]"     slist => { "user:*:rwx", "group:*:rx", "user:bin:rwx", "group:bin:r", "all:rx" };
      "exp_lines[20]"   slist => { "user::rwx", "group::r-x", "user:bin:rwx", "group:bin:r--", "other::r-x" };
      "unexp_lines[20]" slist => { "user:aGroupThatDoesNotExist*" };
      "mode[20]"       string => "audit";
      "status[20]"     string => "success";
      "execute[20]"    string => "true";

    # AUDIT ERROR
      # As in the repaired tests
      "files[21]"      string => "file21/.";
      "recursive[21]"  string => "true";
      "group[21]"       string => "bin";
      "create[21]"     string => "true";
      "initial[21]"     slist => { "user:*:rwx", "group:*:rx", "user:bin:r", "all:rx" };
      "exp_lines[21]"   slist => { "user::rwx", "group::r-x", "user:bin:r--", "other::r-x" };
      "unexp_lines[21]" slist => { "group:bin*" };
      "mode[21]"       string => "audit";
      "status[21]"     string => "error";
      "execute[21]"    string => "true";

      "files[22]"      string => "file21/subfile1";
      "create[22]"     string => "true";
      "initial[22]"     slist => { "user:*:rwx", "group:*:rx", "user:bin:r", "group:bin:r", "all:r" };
      "exp_lines[22]"   slist => { "user::rwx", "group::r-x", "user:bin:r", "group:bin:r--", "other::r--" };

      "files[23]"      string => "file23/.";
      "recursive[23]"  string => "true";
      "group[23]"       string => "bin";
      "create[23]"     string => "true";
      "initial[23]"     slist => { "user:*:rwx", "group:*:rx", "user:bin:rwx", "group:bin:r", "all:rx" };
      "exp_lines[23]"   slist => { "user::rwx", "group::r-x", "user:bin:rwx", "group:bin:r--", "other::r-x" };
      "mode[23]"       string => "audit";
      "status[23]"     string => "error";
      "execute[23]"    string => "true";

      # non-recursive
      "files[24]"      string => "file24";
      "recursive[24]"  string => "false";
      "group[24]"       string => "bin";
      "create[24]"     string => "true"; 
      "initial[24]"     slist => { "user:*:rwx", "group:*:rx", "user:bin:r", "group:bin:r", "all:r" };
      "exp_lines[24]"   slist => { "user::rwx", "group::r-x", "user:bin:r", "group:bin:r--", "other::r--" };
      "mode[24]"       string => "audit";
      "status[24]"     string => "error";
      "execute[24]"    string => "true";

      "files[25]"      string => "file25/.";
      "recursive[25]"  string => "false";
      "group[25]"       string => "bin";
      "create[25]"     string => "true";
      "initial[25]"     slist => { "user:*:rwx", "group:*:rx", "user:bin:+rwx", "group:bin:r", "all:rx" };
      "exp_lines[25]"   slist => { "user::rwx", "group::r-x", "user:bin:rwx", "group:bin:r--", "other::r-x" };
      "mode[25]"       string => "audit";
      "status[25]"     string => "error";
      "execute[25]"    string => "true";

      "files[26]"     string => "file6/subfile1";
      "create[26]"    string => "true";
      "initial[26]"    slist => { "user:*:rwx", "group:*:rx", "user:bin:r", "all:r" };
      "exp_lines[26]"  slist => { "user::rwx", "group::r-x", "user:bin:r--", "other::r--" };

      "files[27]"      string => "file27/.";
      "recursive[27]"  string => "false";
      "group[27]"       string => "bin";
      "create[27]"     string => "true";
      "initial[27]"     slist => { "user:*:rwx", "group:*:rx", "user:bin:rwx", "group:bin:r", "all:rx" };
      "exp_lines[27]"   slist => { "user::rwx", "group::r-x", "user:bin:rwx", "group:bin:r--", "other::r-x" };
      "mode[27]"       string => "audit";
      "status[27]"     string => "error";
      "execute[27]"    string => "true";

      # As in the error tests
      "files[28]"     string => "fileThatDoesNotExist28";
      "recursive[28]" string => "false";
      "group[28]"      string => "bin";
      "create[28]"    string => "false";
      "mode[28]"      string => "enforce";
      "status[28]"    string => "error";
      "execute[28]"   string => "true";

      "files[29]"     string => "fileThatDoesNotExist29";
      "recursive[29]" string => "true";
      "group[29]"      string => "bin";
      "create[29]"    string => "false";
      "mode[29]"      string => "enforce";
      "status[29]"    string => "error";
      "execute[29]"   string => "true";


    # REGEX entry test
      "files[30]"      string => "rfile30";
      "create[30]"     string => "true";
      "initial[30]"     slist => { "user:*:rwx", "group:*:rx", "user:bin:r", "group:bin:r", "all:r" };
      "exp_lines[30]"   slist => { "user::rwx", "group::r-x", "user:bin:r--", "other::r--" };
      "unexp_lines[30]" slist => { "group:bin*" };
      "execute[30]"    string => "false";

      "files[31]"      string => "rfile31/.";
      "create[31]"     string => "true";
      "initial[31]"     slist => { "user:*:rwx", "group:*:rx", "user:bin:-rwx", "group:bin:r", "all:rx" };
      "exp_lines[31]"   slist => { "user::rwx", "group::r-x", "user:bin:---", "other::r-x" };
      "unexp_lines[31]" slist => { "group:bin*" };
      "execute[31]"    string => "false";

      "files[32]"      string => "rfile32/subfile1";
      "create[32]"     string => "true";
      "initial[32]"     slist => { "user:*:rwx", "group:*:rx", "user:bin:r", "group:bin:r", "all:r" };
      "exp_lines[32]"   slist => { "user::rwx", "group::r-x", "user:bin:r--", "other::r--" };
      "unexp_lines[32]" slist => { "group:bin*" };

      "files[33]"      string => "rfile*";
      "recursive[33]"  string => "true";
      "group[33]"       string => "bin";
      "create[33]"     string => "false";
      "mode[33]"       string => "enforce";
      "status[33]"     string => "repaired";
      "execute[33]"    string => "true";

      "indices" slist => getindices("files");

      "printable_lines[${indices}]" string => join("${const.endl}", "exp_lines[${indices}]");
      "printable_unexpected_lines[${indices}]" string => join("${const.endl}", "unexp_lines[${indices}]");

  classes:
      "create_${indices}" expression => strcmp("${create[${indices}]}", "true");

  files:
      "${tmp}/${files[${indices}]}"
        create => "true",
        ifvarclass => "create_${indices}",
        acl => access_generic("@{initial[${indices}]}");
}

#######################################################

bundle agent test
{
  vars:
      "args${init.indices}" slist => { "${init.tmp}/${init.files[${init.indices}]}", "${init.recursive[${init.indices}]}", "${init.group[${init.indices}]}"};

  classes:
    "pass2" expression => "pass1";
    "pass1" expression => "any";
  methods:
    pass1.!pass2::
    #REPAIRED
      "ph1" usebundle => apply_gm("permissions_group_acl_absent", @{args1}, "${init.status[1]}", "ph1", "${init.mode[1]}" );
      "ph2" usebundle => apply_gm("permissions_group_acl_absent", @{args2}, "${init.status[2]}", "ph2", "${init.mode[2]}" );
      # Do not execute 3
      "ph4" usebundle => apply_gm("permissions_group_acl_absent", @{args4}, "${init.status[4]}", "ph4", "${init.mode[4]}" );
      "ph5" usebundle => apply_gm("permissions_group_acl_absent", @{args5}, "${init.status[5]}", "ph5", "${init.mode[5]}" );
      "ph6" usebundle => apply_gm("permissions_group_acl_absent", @{args6}, "${init.status[6]}", "ph6", "${init.mode[6]}" );
      # Do not execute 7
      "ph8" usebundle => apply_gm("permissions_group_acl_absent", @{args8}, "${init.status[8]}", "ph8", "${init.mode[8]}" );
    #SUCCESS
      "ph9" usebundle => apply_gm("permissions_group_acl_absent", @{args9}, "${init.status[9]}", "ph9", "${init.mode[9]}" );
      "ph10" usebundle => apply_gm("permissions_group_acl_absent", @{args10}, "${init.status[10]}", "ph10", "${init.mode[10]}" );
      "ph11" usebundle => apply_gm("permissions_group_acl_absent", @{args11}, "${init.status[11]}", "ph11", "${init.mode[11]}" );
      # Do not execute 12
      "ph13" usebundle => apply_gm("permissions_group_acl_absent", @{args13}, "${init.status[13]}", "ph13", "${init.mode[13]}" );
    #ERROR
      "ph14" usebundle => apply_gm("permissions_group_acl_absent", @{args14}, "${init.status[14]}", "ph14", "${init.mode[14]}" );
      "ph15" usebundle => apply_gm("permissions_group_acl_absent", @{args15}, "${init.status[15]}", "ph15", "${init.mode[15]}" );
    #AUDIT SUCCESS
      "ph16" usebundle => apply_gm("permissions_group_acl_absent", @{args16}, "${init.status[16]}", "ph16", "${init.mode[16]}" );
      "ph17" usebundle => apply_gm("permissions_group_acl_absent", @{args17}, "${init.status[17]}", "ph17", "${init.mode[17]}" );
      "ph18" usebundle => apply_gm("permissions_group_acl_absent", @{args18}, "${init.status[18]}", "ph18", "${init.mode[18]}" );
      # Do not execute 19
      "ph20" usebundle => apply_gm("permissions_group_acl_absent", @{args20}, "${init.status[20]}", "ph20", "${init.mode[20]}" );
    #AUDIT ERROR
      "ph21" usebundle => apply_gm("permissions_group_acl_absent", @{args21}, "${init.status[21]}", "ph21", "${init.mode[21]}" );
      # Do not execute 22
      "ph23" usebundle => apply_gm("permissions_group_acl_absent", @{args23}, "${init.status[23]}", "ph23", "${init.mode[23]}" );
      "ph24" usebundle => apply_gm("permissions_group_acl_absent", @{args24}, "${init.status[24]}", "ph24", "${init.mode[24]}" );
      "ph25" usebundle => apply_gm("permissions_group_acl_absent", @{args25}, "${init.status[25]}", "ph25", "${init.mode[25]}" );
      # Do not execute 26
      "ph27" usebundle => apply_gm("permissions_group_acl_absent", @{args27}, "${init.status[27]}", "ph27", "${init.mode[27]}" );
      "ph28" usebundle => apply_gm("permissions_group_acl_absent", @{args28}, "${init.status[28]}", "ph28", "${init.mode[28]}" );
      "ph29" usebundle => apply_gm("permissions_group_acl_absent", @{args29}, "${init.status[29]}", "ph29", "${init.mode[29]}" );
    # REGEX entry test
      "ph33" usebundle => apply_gm("permissions_group_acl_absent", @{args33}, "${init.status[33]}", "ph33", "${init.mode[33]}" );
     
}

#######################################################

bundle agent check
{
  vars:
    pass1::
      "getfacl_output[${init.indices}]" string => execresult("${paths.getfacl} ${init.tmp}/${init.files[${init.indices}]}", "useshell");

  classes:
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";

      "create_${init.indices}"  expression => strcmp("${init.create[${init.indices}]}", "true");
      "execute_${init.indices}" expression => strcmp("${init.execute[${init.indices}]}", "true");
    pass3::
      "expected_matches_failed_${init.indices}" not => regcmp(".*${init.exp_lines[${init.indices}]}.*","${getfacl_output[${init.indices}]}"),
        ifvarclass => "create_${init.indices}";

      "unexpected_matches_failed_${init.indices}" expression => regcmp(".*${init.unexp_lines[${init.indices}]}.*","${getfacl_output[${init.indices}]}"),
        ifvarclass => "create_${init.indices}";

      "lines_not_ok" expression => or("expected_matches_failed_${init.indices}", "unexpected_matches_failed_${init.indices}");

      "classes_not_ok"  expression => or("classes_ok", "!ph${init.indices}_ok"),
        ifvarclass => "execute_${init.indices}";
      "ok"          expression => "!classes_not_ok.!lines_not_ok";

  reports:
    pass3::
      "Test for file nb ${init.indices} FAILED"
        ifvarclass => "!ph${init.indices}_ok.execute_${init.indices}";

      "####################${const.endl}Missing at least one of the following lines:${const.endl}${init.printable_lines[${init.indices}]} ${const.endl}in the following output: ${const.endl}${getfacl_output[${init.indices}]}${const.endl}   ####################"
        ifvarclass => "expected_matches_failed_${init.indices}";

      "####################${const.endl}Found at least one of the following unexpected lines:${const.endl}${init.printable_unexpected_lines[${init.indices}]} ${const.endl}in the following output: ${const.endl}${getfacl_output[${init.indices}]}${const.endl}   ####################"
        ifvarclass => "unexpected_matches_failed_${init.indices}";
    pass3.ok::
      "$(this.promise_filename) Pass";
    pass3.!ok::
      "$(this.promise_filename) FAIL";
}
