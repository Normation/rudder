#######################################################
#
# Test if only success classes are created
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("$(this.promise_filename)") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    "class[1]" string => "class1";
    "variable[1]" string => "my_prefix.my_variable";
    "match[1]" string => "Some.*";

    "class[2]" string => "class2";
    "variable[2]" string => "my_prefix.my_empty_variable";
    "match[2]" string => ".*";

    "class[3]" string => "class3";
    "variable[3]" string => "my_prefix.my_multiline_variable";
    "match[3]" string => ".*on\s*multi.*";

    "class[4]" string => "class4";
    "variable[4]" string => "my_prefix.my_variable";
    "match[4]" string => "nonmatching.*regex";

    "class[5]" string => "class5";
    "variable[5]" string => "my_prefix.my_undefined_variable";
    "match[5]" string => "nonmatching.*regex";

    "class[6]" string => "class6";
    "variable[6]" string => "my_audit_prefix.my_variable";
    "match[6]" string => "Some.*";

    "class[7]" string => "class7";
    "variable[7]" string => "my_audit_prefix.my_empty_variable";
    "match[7]" string => ".*";

    "class[8]" string => "class8";
    "variable[8]" string => "my_audit_prefix.my_multiline_variable";
    "match[8]" string => ".*on\s*multi.*";

    "class[9]" string => "class9";
    "variable[9]" string => "my_audit_prefix.my_variable";
    "match[9]" string => "nonmatching.*regex";

    "class[10]" string => "class10";
    "variable[10]" string => "my_audit_prefix.my_undefined_variable";
    "match[10]" string => "nonmatching.*regex";

    "indices" slist => getindices("class");

  methods:
    "method_call" usebundle => variable_string("my_prefix", "my_variable", "Some text");
    "method_call" usebundle => variable_string("my_prefix", "my_empty_variable", "");
    "method_call" usebundle => variable_string("my_prefix", "my_multiline_variable", "some
    text
    on
    multiline");

    "method_call" usebundle => variable_string("my_audit_prefix", "my_variable", "Some text");
    "method_call" usebundle => variable_string("my_audit_prefix", "my_empty_variable", "");
    "method_call" usebundle => variable_string("my_audit_prefix", "my_multiline_variable", "some
    text
    on
    multiline");


}

#######################################################

bundle agent test
{
  vars:
    "args${init.indices}" slist => { "${init.class[${init.indices}]}", "${init.variable[${init.indices}]}", "${init.match[${init.indices}]}"};

  methods:
    "ph1"  usebundle  => apply_gm("condition_from_variable_match", @{args1},  "success", "ph1",  "enforce" );
    "ph2"  usebundle  => apply_gm("condition_from_variable_match", @{args2},  "success", "ph2",  "enforce" );
    "ph3"  usebundle  => apply_gm("condition_from_variable_match", @{args3},  "success", "ph3",  "enforce" );
    "ph4"  usebundle  => apply_gm("condition_from_variable_match", @{args4},  "success", "ph4",  "enforce" );
    "ph5"  usebundle  => apply_gm("condition_from_variable_match", @{args5},  "error",   "ph5",  "enforce" );

    "ph6"  usebundle  => apply_gm("condition_from_variable_match", @{args6},  "success", "ph6",  "audit" );
    "ph7"  usebundle  => apply_gm("condition_from_variable_match", @{args7},  "success", "ph7",  "audit" );
    "ph8"  usebundle  => apply_gm("condition_from_variable_match", @{args8},  "success", "ph8",  "audit" );
    "ph9"  usebundle  => apply_gm("condition_from_variable_match", @{args9},  "success", "ph9",  "audit" );
    "ph10" usebundle  => apply_gm("condition_from_variable_match", @{args10}, "error",   "ph10", "audit" );

}

#######################################################

bundle agent check
{
  classes:
      "ok_class1"  expression => "ph1_ok.class1_true";
      "ok_class2"  expression => "ph2_ok.class2_true";
      "ok_class3"  expression => "ph3_ok.class3_true";
      "ok_class4"  expression => "ph4_ok.class4_false";
      "ok_class5"  expression => "ph5_ok.class5_false";

      "ok_class6"  expression => "ph6_ok.class6_true";
      "ok_class7"  expression => "ph7_ok.class7_true";
      "ok_class8"  expression => "ph8_ok.class8_true";
      "ok_class9"  expression => "ph9_ok.class9_false";
      "ok_class10" expression => "ph10_ok.class10_false";

      "enforce_ok" expression => "ok_class1.ok_class2.ok_class3.ok_class4.ok_class5";
      "audit_ok"   expression => "ok_class6.ok_class7.ok_class8.ok_class9.ok_class10";
      "ok"         expression => "enforce_ok.audit_ok";

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
}

