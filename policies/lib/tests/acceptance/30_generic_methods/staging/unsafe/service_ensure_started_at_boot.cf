#######################################################
#
# Make sure to have ssh started at boot
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    !redhat::
      "service_name"  string => "ssh";
    redhat::
      "service_name"  string => "sshd";
}

#######################################################

bundle agent test
{
  methods:
    "ph1" usebundle => service_ensure_at_boot("${init.service_name}");
}

#######################################################

bundle agent check
{
  classes:
    "ok_success"  expression => "(promise_kept_service_ensure_at_boot_${init.service_name}.service_ensure_at_boot_${init.service_name}_kept.service_ensure_at_boot_${init.service_name}_ok.service_ensure_at_boot_${init.service_name}_not_repaired.service_ensure_at_boot_${init.service_name}_reached)";
    "ok_repaired" expression => "!(promise_repaired_service_ensure_at_boot_${init.service_name}|service_ensure_at_boot_${init.service_name}_repaired)";
    "ok_error"    expression => "!(service_ensure_at_boot_${init.service_name}_not_kept|repair_failed_service_ensure_at_boot_${init.service_name}|service_ensure_at_boot_${init.service_name}_failed|service_ensure_at_boot_${init.service_name}_not_ok)";
    "ok"          and        => { "ok_success", "ok_repaired", "ok_error" };

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
}
