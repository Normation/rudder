#######################################################
#
# Test the exit code of shell commands
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, initialization, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
  
      "ok_codes" string => "0, 2,4, 6";
  
      "command[1]"   string => "exit 0";
      "result[1]"    string => "repaired";
      "until[1]"     string => "any";
      "testName[1]"  string => "testA";
      "mode[1]"      string => "enforce";
      
      "command[2]"   string => "exit 0 ";
      "result[2]"    string => "success";
      "until[2]"     string => "any";
      "testName[2]"  string => "testA";
      "mode[2]"      string => "enforce";

      "command[3]"   string => "exit 0  ";
      "result[3]"    string => "success";
      "until[3]"     string => "any";
      "testName[3]"  string => "testA";
      "mode[3]"      string => "audit";

      "command[4]"   string => "exit 1";
      "result[4]"    string => "error";
      "until[4]"     string => "any";
      "testName[4]"  string => "testB";
      "mode[4]"      string => "enforce";

      "command[5]"   string => "exit 1 ";
      "result[5]"    string => "success";
      "until[5]"     string => "any";
      "testName[5]"  string => "testB";
      "mode[5]"      string => "enforce";

      "command[6]"   string => "exit 2";
      "result[6]"    string => "repaired";
      "until[6]"     string => "ok";
      "testName[6]"  string => "testC";
      "mode[6]"      string => "enforce";

      "command[7]"   string => "exit 2 ";
      "result[7]"    string => "success";
      "until[7]"     string => "ok";
      "testName[7]"  string => "testC";
      "mode[7]"      string => "enforce";

      "command[8]"   string => "exit 3";
      "result[8]"    string => "error";
      "until[8]"     string => "ok";
      "testName[8]"  string => "testD";
      "mode[8]"      string => "enforce";

      "command[9]"   string => "exit 3 ";
      "result[9]"    string => "error";
      "until[9]"     string => "ok";
      "testName[9]"  string => "testD";
      "mode[9]"      string => "enforce";

      "command[10]"  string => "exit 4";
      "result[10]"   string => "repaired";
      "until[10]"    string => "ok";
      "testName[10]" string => "testD";
      "mode[10]"     string => "enforce";

      "command[11]"  string => "exit 4 ";
      "result[11]"   string => "success";
      "until[11]"    string => "ok";
      "testName[11]" string => "testD";
      "mode[11]"     string => "enforce";

      "command[12]"  string => "exit 5";
      "result[12]"   string => "error";
      "until[12]"    string => "ok";
      "testName[12]" string => "testE";
      "mode[12]"     string => "audit";

      "command[13]"  string => "exit 5 ";
      "result[13]"   string => "error";
      "until[13]"    string => "ok";
      "testName[13]" string => "testE";
      "mode[13]"     string => "audit";

      "command[14]"  string => "exit 6";
      "result[14]"   string => "error";
      "until[14]"    string => "ok";
      "testName[14]" string => "testE";
      "mode[14]"     string => "audit";

      "indices"    slist => getindices("command");
            
  methods:
      "clean" usebundle => file_absent("${configuration.flag_file}");
}

#######################################################

bundle agent test
{
  vars:
    "args${init.indices}" slist => { "${init.command[${init.indices}]}", "${init.ok_codes}", "${init.until[${init.indices}]}", "${init.testName[${init.indices}]}" };
    "ok_codes" string => "0, 2,4, 6";

  methods:

    
    "phA"   usebundle  => apply_gm_v4("command_execution_once", @{args1}, "${init.result[1]}", "phA"  , "${init.mode[1]}" );
    "phAA"  usebundle  => apply_gm_v4("command_execution_once", @{args2}, "${init.result[2]}", "phAA" , "${init.mode[2]}" );
    "phAAA" usebundle  => apply_gm_v4("command_execution_once", @{args3}, "${init.result[3]}", "phAAA", "${init.mode[3]}" );

    "phB"   usebundle  => apply_gm_v4("command_execution_once", @{args4}, "${init.result[4]}", "phB"  , "${init.mode[4]}" );
    "phBB"  usebundle  => apply_gm_v4("command_execution_once", @{args5}, "${init.result[5]}", "phBB" , "${init.mode[5]}" );

    "phC"   usebundle  => apply_gm_v4("command_execution_once", @{args6}, "${init.result[6]}", "phC"  , "${init.mode[6]}" );
    "phCC"  usebundle  => apply_gm_v4("command_execution_once", @{args7}, "${init.result[7]}", "phCC" , "${init.mode[7]}" );


    "phD"   usebundle  => apply_gm_v4("command_execution_once", @{args8}, "${init.result[8]}", "phD"  , "${init.mode[8]}" );
    "phDD"  usebundle  => apply_gm_v4("command_execution_once", @{args9}, "${init.result[9]}", "phDD" , "${init.mode[9]}" );
    "phDDD" usebundle  => apply_gm_v4("command_execution_once", @{args10}, "${init.result[10]}", "phDDD" , "${init.mode[10]}" );
    "phDDE" usebundle  => apply_gm_v4("command_execution_once", @{args11}, "${init.result[11]}", "phDDE" , "${init.mode[11]}" );
    

    "phE"   usebundle  => apply_gm_v4("command_execution_once", @{args12}, "${init.result[12]}", "phE"   , "${init.mode[12]}" );
    "phEE"  usebundle  => apply_gm_v4("command_execution_once", @{args13}, "${init.result[13]}", "phEE"  , "${init.mode[13]}" );
    "phEEE" usebundle  => apply_gm_v4("command_execution_once", @{args14}, "${init.result[14]}", "phEEE" , "${init.mode[14]}" );

}

#######################################################

bundle agent check
{
  classes:
    "ok"  expression => "phA_ok.phAA_ok.phAAA_ok.phB_ok.phBB_ok.phC_ok.phCC_ok.phD_ok.phDD_ok.phDDD_ok.phDDE_ok.phE_ok.phEE_ok.phEEE_ok";

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
}
