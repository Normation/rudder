#########################################################################################
#
# This will check reporting within log_rudder, by checking the defined classes
#
#########################################################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    "message"             string => "Test of the reporting";
    "param[1]"            string => "/some/param.txt";
    "old_class_prefix[1]" string => canonify("files_lines_present_${param[1]}");
    "args_1"              slist  => { "${param[1]}", "${param[1]}", "${param[1]}" };
    "report_param[1]"     string => join("_", args_1);
    "class_prefix[1]"     string => canonify("${old_class_prefix[1]}_${report_param[1]}");

    "param[2]"            string => "/some/param.txt";
    "old_class_prefix[2]" string => canonify("files_lines_present_${param[2]}");
    "args_2"              slist  => { "${param[2]}", "bla", "bli" };
    "report_param[2]"     string => join("_", args_2);
    "class_prefix[2]"     string => canonify("${old_class_prefix[2]}_${report_param[2]}");

    "param[3]"            string => "/other/param.txt";
    "old_class_prefix[3]" string => canonify("files_lines_present_${param[3]}");
    "args_3"              slist  => { "${param[3]}", "bla", "bli" };
    "report_param[3]"     string => join("_", args_3);
    "class_prefix[3]"     string => "cf_null";

    "param[4]"            string => "/very/long/parameter/text/results.txt";
    "old_class_prefix[4]" string => canonify("files_lines_present_${param[4]}");
    "args_4"              slist  => { "${param[4]}", "veryyyyyyyyyyyyyyyyyyyyyyyyyyyyylonnnnnnnnnnnnnnnnnnnnnnnnnnnnnnngtexxxxxxxxxxxxxxxxxxxxxxxxxt", "veryyyyyyyyyyyyyyyyyyyyyyyyyyyyylonnnnnnnnnnnnnnnnnnnnnnnnnnnnnnngtexxxxxxxxxxxxxxxxxxxxxxxxxt", "suuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuupppppppppppppppppppppppppppppeeeeeeeeeeeeeeeeeeeerrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr", "suuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuupppppppppppppppppppppppppppppeeeeeeeeeeeeeeeeeeeerrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr", "suuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuupppppppppppppppppppppppppppppeeeeeeeeeeeeeeeeeeeerrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr", "suuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuupppppppppppppppppppppppppppppeeeeeeeeeeeeeeeeeeeerrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr", "suuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuupppppppppppppppppppppppppppppeeeeeeeeeeeeeeeeeeeerrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr", "suuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuupppppppppppppppppppppppppppppeeeeeeeeeeeeeeeeeeeerrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr" };
    "report_param[4]"     string => join("_", args_4);
    "class_prefix[4]"     string => canonify("${old_class_prefix[4]}_${report_param[4]}");


    "tests_list"     slist => getindices("param");
}

#######################################################

bundle agent test
{
  # 1,2 are success, 3 is repaired, 4 is error
  methods:
    "ph1" usebundle => _classes_success("${init.old_class_prefix[1]}");
    "ph1" usebundle => _classes_success("${init.class_prefix[1]}");
    "ph2" usebundle => _classes_success("${init.old_class_prefix[2]}");
    "ph2" usebundle => _classes_success("${init.class_prefix[2]}");
    "ph3" usebundle => _classes_repaired("${init.old_class_prefix[3]}");
    "ph3" usebundle => _classes_repaired("${init.class_prefix[3]}");
    "ph4" usebundle => _classes_failure("${init.old_class_prefix[4]}");
    "ph4" usebundle => _classes_failure("${init.class_prefix[4]}");

    # do the reporting part
    # 3, 4 should use old_class_prefix, other the new class_prefix
    "report1" usebundle => log_rudder("${init.message}", "", "${init.old_class_prefix[1]}", "${init.class_prefix[1]}", "@{init.args_1}");
    "report2" usebundle => log_rudder("${init.message}", "", "${init.old_class_prefix[2]}", "${init.class_prefix[2]}", "@{init.args_2}");
    "report3" usebundle => log_rudder("${init.message}", "", "${init.old_class_prefix[3]}", "${init.class_prefix[3]}", "@{init.args_3}");
    "report4" usebundle => log_rudder("${init.message}", "", "${init.old_class_prefix[4]}", "${init.class_prefix[4]}", "@{init.args_4}");

}

#######################################################

bundle agent check
{
  classes:
      # 3, 4 should use old_class_prefix, other the new class_prefix
      "ok"          expression => "logger_rudder_${init.class_prefix[1]}_reached.logger_rudder_${init.class_prefix[2]}_reached.logger_rudder_${init.old_class_prefix[3]}_reached.logger_rudder_${init.old_class_prefix[4]}_reached";

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";

}
