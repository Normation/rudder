#######################################################
#
# Test checking that file_absent removes a file
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    "tmp"                      string => getenv("TEMP", 1024);
    "destination_file"         string => "${tmp}/remove_test";
    "destination_file_canon"   string => canonify("${destination_file}");
    "not_a_file"               string => "${tmp}/nonexistentfilenamefromncftests";
    "not_a_file_canon"         string => canonify("${not_a_file}");

    "destination_folder"       string => "${tmp}/no_remove_folder";
    "destination_folder_canon" string => canonify("${destination_folder}");

  files:
    "${destination_file}"
      create => "true";

    "${destination_folder}/."
      create => "true";

}

#######################################################

bundle agent test
{
  methods:
    "ph1" usebundle => file_absent("${init.destination_file}");
    "ph2" usebundle => file_absent("${init.not_a_file}");
    "ph3" usebundle => file_absent("${init.destination_folder}");
}

#######################################################

bundle agent check
{
  classes:
    "file_exists"      expression => fileexists("${init.destination_file}");
    "ok_1"             expression => "!file_exists.file_absent_${init.destination_file_canon}_repaired.!file_absent_${init.destination_file_canon}_error";
    "ok_2"             expression => "file_absent_${init.not_a_file_canon}_kept.!file_absent_${init.not_a_file_canon}_repaired.!file_absent_${init.not_a_file_canon}_error";
    "ok_3"             expression => "file_absent_${init.destination_folder_canon}_error.!file_absent_${init.destination_folder_canon}_repaired.!file_absent_${init.destination_folder_canon}_kept";
    "ok"                      and => { "ok_1", "ok_2", "ok_3" };


  reports:
    file_exists::
      "First test: File ${init.destination_file} exists even though it should have been removed!";
    ok_1::  "First test OK (removing existing file, ${init.destination_file})";
    !ok_1:: "First test failed (removing existing file, ${init.destination_file})";
    ok_2::  "Second test OK (removing a non existent file, ${init.not_a_file_canon})";
    !ok_2:: "Second test failed (removing a non existent file, ${init.not_a_file_canon})";
    !ok_3:: "Third test failed (removing a folder should fail, ${init.destination_folder_canon})";

    !ok_2:: #debug
      "Second test debug: class file_absent_${init.not_a_file_canon}_reached defined" ifvarclass => "file_absent_${init.not_a_file_canon}_reached";
      "Second test debug: class file_absent_${init.not_a_file_canon}_kept defined" ifvarclass => "file_absent_${init.not_a_file_canon}_kept";
      "Second test debug: class file_absent_${init.not_a_file_canon}_repaired defined" ifvarclass => "file_absent_${init.not_a_file_canon}_repaired";
      "Second test debug: class file_absent_${init.not_a_file_canon}_error defined" ifvarclass => "file_absent_${init.not_a_file_canon}_error";

    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
}
