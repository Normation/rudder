#######################################################
#
# Test checking if a content of file is enforced
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    "tmp"          string => getenv("TEMP", 1024);

    "file_1"       string => "${tmp}/test_1";
    "file_1_canon" string => canonify("${file_1}");
    "file_2"       string => "${tmp}/test_2";
    "file_2_canon" string => canonify("${file_2}");
    "line_present" string => "Erase this line";
    "line_to_add"  string => "This is a test line!";


    "file_3"         string => "${tmp}/test_3";
    "file_3_canon"   string => canonify("${file_3}");
    "ref_3"          string => "${tmp}/ref_3";
    "lines_3"        string => "Erase this line";
    "lines_3_ref"    string => "one
two
three";
    "lines_3_to_add" slist => { "one", "two", "three" };

  commands:
      "/bin/echo"
        args    => "\"${line_present}\" > \"${file_1}\"",
        contain => in_shell;

      "/bin/echo"
        args    => "\"${line_present}\" > \"${file_2}\"",
        contain => in_shell;

      "/bin/echo"
        args    => "\"${lines_3}\" > \"${file_3}\"",
        contain => in_shell;

      "/bin/echo"
        args    => "\"${lines_3_ref}\" > \"${ref_3}\"",
        contain => in_shell;
}

#######################################################

bundle agent test
{
  methods:
    "ph1" usebundle => file_content("${init.file_1}", "${init.line_to_add}","false");
    "ph2" usebundle => file_content("${init.file_2}", "${init.line_to_add}","true");
    "ph3" usebundle => file_content("${init.file_3}", "@{init.lines_3_to_add}","true");
}

#######################################################

bundle agent check
{
  vars:
    "line_1_present_exists_test" string => "${paths.path[grep]} -E \"^${init.line_present}$\" \"${init.file_1}\"";
    "line_1_added_exists_test"   string => "${paths.path[grep]} -E \"^${init.line_to_add}$\" \"${init.file_1}\"";
    "line_2_present_exists_test" string => "${paths.path[grep]} -E \"^${init.line_present}$\" \"${init.file_2}\"";
    "line_2_added_exists_test"   string => "${paths.path[grep]} -E \"^${init.line_to_add}$\" \"${init.file_2}\"";
    "file_3_test"                string => "/usr/bin/diff \"${init.ref_3}\" \"${init.file_3}\"";

  classes:
    "file_1_exists"         expression => fileexists("${init.file_1}");
    "file_2_exists"         expression => fileexists("${init.file_2}");
    "file_3_exists"         expression => fileexists("${init.file_3}");
   file_1_exists::
    "line_1_present_exists" expression => returnszero("${line_1_present_exists_test}", "noshell");
    "line_1_added_exists"   expression => returnszero("${line_1_added_exists_test}", "noshell");
   file_2_exists::
    "line_2_present_exists" expression => returnszero("${line_2_present_exists_test}", "noshell");
    "line_2_added_exists"   expression => returnszero("${line_2_added_exists_test}", "noshell");
   file_3_exists::
    "file_3_valid"          expression => returnszero("${file_3_test}", "noshell");

   file_1_exists.file_2_exists.file_3_exists::
    "ok_file_1"             expression => "(line_1_present_exists.line_1_added_exists).(file_lines_present_${init.file_1_canon}_ok.!file_lines_present_${init.file_1_canon}_error)";
    "ok_file_2"             expression => "(!line_2_present_exists.line_2_added_exists).(file_lines_present_${init.file_2_canon}_ok.!file_lines_present_${init.file_2_canon}_error)";
    "ok_file_3"             expression => "file_3_valid.(file_lines_present_${init.file_3_canon}_ok.!file_lines_present_${init.file_3_canon}_error)";
    "ok"                    and => { "ok_file_1", "ok_file_2", "ok_file_3" };


  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
    !file_1_exists::
      "fileexists returns false for file ${init.file_1}";
    !file_2_exists::
      "fileexists returns false for file ${init.file_2}";
    !file_3_exists::
      "fileexists returns false for file ${init.file_3}";
    !(line_1_added_exists)::
      "grep command doesn't return 0 for command: ${line_1_added_exists_test}";
    !(line_2_added_exists)::
      "grep command doesn't return 0 for command: ${line_2_added_exists_test}";
    !(file_3_valid)::
      "diff command doesn't return 0 for command: ${file_3_test}";
}

