#######################################################
#
# Test checking if ACLs are present or not
# 
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
      "tmp"                        string => getenv("TEMP", 1024);
      "initial_acls_files"         slist => { "user:*:rwx", "group:*:rx", "user:bin:r", "group:bin:r", "all:r", "mask:rx" };
      "subfile_acls"               slist => { "user:*:rwx", "group:*:rx", "user:bin:rx", "group:bin:r", "all:r", "mask:rx" };
      "expected_lines_files"       slist => { "user::rwx", "group::r-x", "user:bin:r--", "group:bin:r--", "other::r--", "mask::r-x" };
      "expected_lines_subfiles"    slist => { "user::rwx", "group::r-x", "user:bin:r-x", "group:bin:r--", "other::r--", "mask::r-x" };
      # Cfengine tends to minimize the mask when editing an ACL, do not force it here otherwise it will be recalculated
      # at execution when calling the GM below and we will never have error outcomes.
      "files[1]" string => "file1";
      "user[1]"  string => "*:";
      "group[1]" string => "";
      "other[1]" string => "";

      "files[2]" string => "file2";
      "user[2]"  string => "";
      "group[2]" string => "*:";
      "other[2]" string => "";

      "files[3]" string => "file3";
      "user[3]"  string => "bin:-rwx";
      "group[3]" string => "*:";
      "other[3]" string => "";

      "files[4]" string => "file4";
      "user[4]"  string => "bin:-r, bin:+x";
      "group[4]" string => "*:";
      "other[4]" string => "";

      "files[5]" string => "file5";
      "user[5]"  string => "bin:-r, root:rx";
      "group[5]" string => "*:";
      "other[5]" string => "";

      "files[6]" string => "file6";
      "user[6]"  string => "bin:-r, root:rx";
      "group[6]" string => "*:";
      "other[6]" string => "-r, =rx";

      # To test the recursivity
      "files[7]" string => "file7/.";
      "user[7]"  string => "bin:=r";
      "group[7]" string => "";
      "other[7]" string => "";

      # Has a user:bin:rx instead of user:bin:r
      "files[8]" string => "file7/1/2/3/4/5/subfile1";
      "user[8]"  string => "";
      "group[8]" string => "";
      "other[8]" string => "";

      "files[9]" string => "file1";
      "user[9]"  string => "*:rwxyz";
      "group[9]" string => "";
      "other[9]" string => "r";

      "files[10]" string => "file10";
      "user[10]"  string => "unknow_user:rx";
      "group[10]" string => "";
      "other[10]" string => "r";

      "files[11]" string => "unknow_file";
      "user[11]"  string => "";
      "group[11]" string => "";
      "other[11]" string => "r";

      "files[12]" string => "file*";
      "user[12]"  string => "*:yy";
      "group[12]" string => "";
      "other[12]" string => "r";

      "files[13]" string => "non_matching*regex";
      "user[13]"  string => "*:";
      "group[13]" string => "";
      "other[13]" string => "r";

      "indices" slist => getindices("files");
      # Do not create 11
      "create_indices"       slist => { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" };
      "file_acls_indices"    slist => { "1", "2", "3", "4", "5", "6", "7", "9", "10" };
      "subfile_acls_indices" slist => { "8" };

      "lines[${file_acls_indices}]"    slist => { @{expected_lines_files} };
      "lines[${subfile_acls_indices}]" slist => { @{expected_lines_subfiles} };

      "printable_lines[${indices}]" string => join("${const.endl}", "lines[${indices}]");
      "canonified_lines[${indices}]" string => canonify("${lines[${indices}]}");

  files:
      "${tmp}/${files[${file_acls_indices}]}"
        create => "true",
        acl    => access_generic("@{initial_acls_files}");

      "${tmp}/${files[${subfile_acls_indices}]}"
        create => "true",
        acl    => access_generic("@{subfile_acls}");

}

#######################################################

bundle agent test
{
  vars:
      "args${init.indices}" slist => { "${init.tmp}/${init.files[${init.indices}]}", "true", "${init.user[${init.indices}]}", "${init.group[${init.indices}]}", "${init.other[${init.indices}]}" };

  methods:
      "enable" usebundle => set_dry_run_mode("true");
      "ph1" usebundle  => apply_gm("permissions_acl_entry", @{args1}, "error", "ph1", "audit" );
      "ph2" usebundle  => apply_gm("permissions_acl_entry", @{args2}, "error", "ph2", "audit" );
      "ph3" usebundle  => apply_gm("permissions_acl_entry", @{args3}, "error", "ph3", "audit" );
      "ph4" usebundle  => apply_gm("permissions_acl_entry", @{args4}, "error", "ph4", "audit" );
      "ph5" usebundle  => apply_gm("permissions_acl_entry", @{args5}, "error", "ph5", "audit" );
      "ph6" usebundle  => apply_gm("permissions_acl_entry", @{args6}, "error", "ph6", "audit" );
      "ph7" usebundle  => apply_gm("permissions_acl_entry", @{args7}, "error", "ph7", "audit" );
      # Do not apply anything on 8
      "ph9" usebundle  => apply_gm("permissions_acl_entry", @{args9}, "error", "ph9", "audit" );
      "ph10" usebundle => apply_gm("permissions_acl_entry", @{args10}, "error", "ph10", "audit" );
      "ph11" usebundle => apply_gm("permissions_acl_entry", @{args11}, "error", "ph11", "audit" );
      "ph12" usebundle => apply_gm("permissions_acl_entry", @{args12}, "error", "ph12", "audit" );
      "ph13" usebundle => apply_gm("permissions_acl_entry", @{args13}, "error", "ph13", "audit" );
      "disable" usebundle => set_dry_run_mode("false");
}

#######################################################

bundle agent check
{
  vars:
    pass1::
      "getfacl_output[${init.indices}]" string => execresult("${paths.getfacl} ${init.tmp}/${init.files[${init.indices}]}", "useshell");

  classes:
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";

    pass3::
      "lines_matches_${init.create_indices}_${init.canonified_lines[${init.create_indices}]}" not => regcmp(".*${init.lines[${init.create_indices}]}.*","${getfacl_output[${init.create_indices}]}");
      "lines_${init.create_indices}_ok" expression => "lines_matches_${init.create_indices}_${init.canonified_lines[${init.create_indices}]}";
      "lines_not_ok" expression => "lines_${init.create_indices}_ok";


      "classes_ok"  expression => "ph1_ok.ph2_ok.ph3_ok.ph4_ok.ph5_ok.ph6_ok.ph7_ok.ph9_ok.ph10_ok.ph11_ok.ph12_ok.ph13_ok";
      "ok"          expression => "classes_ok.!lines_not_ok";

  reports:
    pass3::
      "####################${const.endl}Missing at least one of the following lines:${const.endl}${init.printable_lines[${init.indices}]} ${const.endl}in the following output: ${const.endl}${getfacl_output[${init.indices}]}${const.endl}   ####################"
        ifvarclass => "lines_matches_${init.indices}_${init.canonified_lines[${init.indices}]}";
    pass3.ok::
      "$(this.promise_filename) Pass";
    pass3.!ok::
      "$(this.promise_filename) FAIL";
}
