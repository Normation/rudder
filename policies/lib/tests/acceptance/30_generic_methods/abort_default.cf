#######################################################
#
# Test checking if reporting is correcly done with rudder_logger
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    "tmp"               string => getenv("TEMP", 1024);

    "expected_report"   string => "R: [FATAL] Aborting agent run because of reason: message";
}

#######################################################

bundle agent test
{
  vars:
      # execute the agent, and get its output in 'output' variable
      "output_cmd" string => "${sys.workdir}/bin/cf-agent -Kf \"${this.promise_dirname}/abort_default_output.cf.sub\"";
      "output" string => execresult("${output_cmd}", "noshell");

}

#######################################################

bundle agent check
{
  classes:
    pass1::
      # Check if output contains the correct value
      "contain_expected_reports"
         expression => strcmp("${init.expected_report}", "${test.output}");

    any::
      "pass2" expression => "pass1";
      "pass1" expression => "any";

  reports:
    pass2.contain_expected_reports::
      "$(this.promise_filename) Pass";
    pass2.!contain_expected_reports::
      "$(this.promise_filename) FAIL";
}
