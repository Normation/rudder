#######################################################
#
# Test checking if a content of file is enforced
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    "tmp"          string => getenv("TEMP", 1024);

    "file_1"          string => "${tmp}/test_1";
    "file_1_canon"    string => canonify("${file_1}");
    "file_1_content"  string => "this is
a multiline
1test
file";
    "file_1_expected" string => "this is
a multiline
1test
file
";

    "file_2"          string => "${tmp}/test_2";
    "file_2_canon"    string => canonify("${file_2}");
    "file_2_content"  string => "this is
a multiline
2test
file";
    "file_2_expected" string => "2test";

    "file_3"          string => "${tmp}/test_3";
    "file_3_canon"    string => canonify("${file_3}");
    "file_3_content"  string => "this is
a multiline
3test
file";
    "file_3_expected" string => "a multiline
3test
file";

    "file_4"          string => "${tmp}/test_4";
    "file_4_canon"    string => canonify("${file_4}");
    "file_5"          string => "${tmp}/test_5";
    "file_5_canon"    string => canonify("${file_5}");

  commands:
      "/bin/echo"
        args    => "\"${file_1_content}\" > \"${file_1}\"",
        contain => in_shell;

      "/bin/echo"
        args    => "\"${file_2_content}\" > \"${file_2}\"",
        contain => in_shell;

      "/bin/echo"
        args    => "\"${file_3_content}\" > \"${file_3}\"",
        contain => in_shell;
}

#######################################################

bundle agent test
{
  classes:
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";

  methods:
    # To avoid re-evaluating results when content changes...
    pass3::
      "ph1"   usebundle => file_report_content("${init.file_1}", "", "");
      "stor1" usebundle => result("file_1", "${file_report_content.content}");
      "ph2"   usebundle => file_report_content("${init.file_2}", "2test", "");
      "stor2" usebundle => result("file_2", "${file_report_content.content}");
      "ph3"   usebundle => file_report_content("${init.file_3}", "3test", "1");
      "stor3" usebundle => result("file_3", "${file_report_content.content}");
      "ph4"   usebundle => file_report_content("${init.file_4}", "", "");
      "ph5"   usebundle => file_report_content("${init.file_5}", "test", "");
}

# This bundle is used to store the content of the result after each call
# allowing to test its content in the test bundle.
bundle agent result(id, result)
{
  vars:
    "${id}" string => "${result}";
}

#######################################################

bundle agent check
{  
  classes:
    "ok_1" expression => strcmp("${init.file_1_expected}", "${result.file_1}");
    "ok_1_class" expression => "file_report_content_${init.file_1_canon}_kept.!file_report_content_${init.file_1_canon}_error";
    "ok_2" expression => strcmp("${init.file_2_expected}", "${result.file_2}");
    "ok_2_class" expression => "file_report_content_${init.file_2_canon}_kept.!file_report_content_${init.file_2_canon}_error";
    "ok_3" expression => strcmp("${init.file_3_expected}", "${result.file_3}");
    "ok_3_class" expression => "file_report_content_${init.file_3_canon}_kept.!file_report_content_${init.file_3_canon}_error";
    "ok_4_class" expression => "!file_report_content_${init.file_4_canon}_kept.file_report_content_${init.file_4_canon}_error";
    "ok_5_class" expression => "!file_report_content_${init.file_5_canon}_kept.file_report_content_${init.file_5_canon}_error";

    "ok" expression => "ok_1.ok_2.ok_3.ok_1_class.ok_2_class.ok_3_class.ok_4_class.ok_5_class";

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
}

