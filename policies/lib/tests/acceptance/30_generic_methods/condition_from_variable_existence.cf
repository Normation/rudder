#######################################################
#
# Test if only success classes are created
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("$(this.promise_filename)") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    # Enforce
    "prefix[0]"     string => "class0";
    "var_name[0]"   string => "my_prefix.my_variable";
    "expected[0]"   string => "${prefix[0]}_true";
    "unexpected[0]" string => "${prefix[0]}_false";
    "status[0]"     string => "success";

    "prefix[1]"     string => "class1";
    "var_name[1]"   string => "my_prefix.my_empty_variable";
    "expected[1]"   string => "${prefix[1]}_true";
    "unexpected[1]" string => "${prefix[1]}_false";
    "status[1]"     string => "success";

    "prefix[2]"     string => "class2";
    "var_name[2]"   string => "my_prefix.non_defined";
    "expected[2]"   string => "${prefix[2]}_false";
    "unexpected[2]" string => "${prefix[2]}_true";
    "status[2]"     string => "success";

    "prefix[3]"     string => "class3";
    "var_name[3]"   string => "my_prefix.forbidden-name";
    "expected[3]"   string => "${prefix[3]}_false";
    "unexpected[3]" string => "${prefix[3]}_true";
    "status[3]"     string => "success";

    # Audit
    "prefix[4]"     string => "class4";
    "var_name[4]"   string => "my_prefix.my_variable";
    "expected[4]"   string => "${prefix[4]}_true";
    "unexpected[4]" string => "${prefix[4]}_false";
    "status[4]"     string => "success";

    "prefix[5]"     string => "class5";
    "var_name[5]"   string => "my_prefix.my_empty_variable";
    "expected[5]"   string => "${prefix[5]}_true";
    "unexpected[5]" string => "${prefix[5]}_false";
    "status[5]"     string => "success";

    "prefix[6]"     string => "class6";
    "var_name[6]"   string => "my_prefix.non_defined";
    "expected[6]"   string => "${prefix[6]}_false";
    "unexpected[6]" string => "${prefix[6]}_true";
    "status[6]"     string => "success";

    "prefix[7]"     string => "class7";
    "var_name[7]"   string => "my_prefix.forbidden-name";
    "expected[7]"   string => "${prefix[7]}_false";
    "unexpected[7]" string => "${prefix[7]}_true";
    "status[7]"     string => "success";

    "indices"       slist => getindices("prefix");

  methods:
    "method_call" usebundle => variable_string("my_prefix", "my_variable", "Some text");
    "method_call" usebundle => variable_string("my_prefix", "my_empty_variable", "");
}

#######################################################

bundle agent test
{
  vars:
    "args${init.indices}" slist => { "${init.prefix[${init.indices}]}", "${init.var_name[${init.indices}]}" };

  methods:
    # Enforce
    "ph0" usebundle  => apply_gm("condition_from_variable_existence", @{args0}, "${init.status[0]}", "ph0", "enforce" );
    "ph1" usebundle  => apply_gm("condition_from_variable_existence", @{args1}, "${init.status[1]}", "ph1", "enforce" );
    "ph2" usebundle  => apply_gm("condition_from_variable_existence", @{args2}, "${init.status[2]}", "ph2", "enforce" );
    "ph3" usebundle  => apply_gm("condition_from_variable_existence", @{args3}, "${init.status[3]}", "ph3", "enforce" );

    # Audit
    "ph4" usebundle  => apply_gm("condition_from_variable_existence", @{args4}, "${init.status[4]}", "ph4", "audit" );
    "ph5" usebundle  => apply_gm("condition_from_variable_existence", @{args5}, "${init.status[5]}", "ph5", "audit" );
    "ph6" usebundle  => apply_gm("condition_from_variable_existence", @{args6}, "${init.status[6]}", "ph6", "audit" );
    "ph7" usebundle  => apply_gm("condition_from_variable_existence", @{args7}, "${init.status[7]}", "ph7", "audit" );
}

#######################################################

bundle agent check
{
  classes:
      "expected_not_ok"   expression => "!${init.expected[${init.indices}]}";
      "unexpected_not_ok" expression => "${init.unexpected[${init.indices}]}";

      "classes_ok"        expression => "ph0_ok.ph1_ok.ph2_ok.ph3_ok.ph4_ok.ph5_ok.ph6_ok.ph7_ok";
      "ok"                expression => "classes_ok.!expected_not_ok.!unexpected_not_ok";

  reports:
      "${init.unexpected[${init.indices}]} not expected"
        ifvarclass => "${init.unexpected[${init.indices}]}";
      "${init.expected[${init.indices}]} not found"
        ifvarclass => "!${init.expected[${init.indices}]}";
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
}
