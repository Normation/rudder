#######################################################
#
# Test checking if reporting is correcly done with rudder_logger
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    "tmp"            string => getenv("TEMP", 1024);

    "message"         string => "is the expected report message";
    "class_prefix"    string => "file_create__tmp_1";
    "class_condition" string => "${class_prefix}_repaired";

    "current_technique_report_info.technique_name" string => "Test_logging_in_ncf";

    "expected_reporting" string => "R: @@Test_logging_in_ncf@@result_repaired@@32377fd7-02fd-43d0-aab7-28460a91347b@@15645b8f-4606-4549-9f62-1b99a7594d54@@0@@File create@@/tmp/1@@12-11-54##123456@#the expected report message was repaired";
    "escaped_expected"   string => escape("${expected_reporting}");
}

#######################################################

bundle agent test
{
}

#######################################################

bundle agent check
{
  vars:
    pass1::
      # execute the agent, and get its output in 'output' variable
      "reporting_output_cmd" string => "${sys.workdir}/bin/cf-agent -Kf \"${this.promise_dirname}/logger_rudder_output.cf.sub\" -D AUTO";

      "output" string => execresult("${reporting_output_cmd}", "noshell");

  classes:
    pass1::
      # Check if output contains the correct value
      "ok" 
         expression => regcmp(".*${init.escaped_expected}.*", "${output}");

    any::
      "pass2" expression => "pass1";
      "pass1" expression => "any";


  reports:
    pass2.ok::
      "$(this.promise_filename) Pass";
    pass2.!ok::
      "$(this.promise_filename) FAIL";
      "$(this.promise_filename) Expected reports was not generated (got '${output}' but expected '${init.escaped_expected}' )";
}
