#######################################################
#
# Test checking if a file can be copied from a local source
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    "tmp"                      string => getenv("TEMP", 1024);
    "source_file"              string => "${tmp}/source_test";

    "dst[1]"          string => "${tmp}/destination_test1";
    "command[1]"      string => "/bin/true";
    "codes[1]"        string => "0";
    "assert_exist[1]" string => "true";
    "result[1]"       string => "repaired";

    "dst[2]"          string => "${tmp}/destination_test2";
    "command[2]"      string => "/bin/false";
    "codes[2]"        string => "0";
    "assert_exist[2]" string => "false";
    "result[2]"       string => "error";

    "dst[3]"          string => "${tmp}/destination_test3";
    "command[3]"      string => "/bin/false";
    "codes[3]"        string => "0";
    "assert_exist[3]" string => "true";
    "result[3]"       string => "success";

    "dst[4]"          string => "${tmp}/destination_test4";
    "command[4]"      string => "exit 1";
    "codes[4]"        string => "1";
    "assert_exist[4]" string => "true";
    "result[4]"       string => "repaired";

    "indices"          slist => getindices("dst");

  files:
    "${source_file}"
      edit_line => insert_lines("test file"),
      create => "true";

    "${dst[3]}"
      edit_line => insert_lines("test file"),
      create => "true";
}

#######################################################

bundle agent test
{
  vars:
      "args${init.indices}" slist => {
        "${init.source_file}",
        "${init.dst[${init.indices}]}",
        "${init.command[${init.indices}]}",
        "${init.codes[${init.indices}]}"
      };
  methods:
      "ph1" usebundle  => apply_gm_v4("file_from_local_source_with_check", @{args1}, "${init.result[1]}", "ph1", "enforce" );
      "ph2" usebundle  => apply_gm_v4("file_from_local_source_with_check", @{args2}, "${init.result[2]}", "ph2", "enforce" );
      "ph3" usebundle  => apply_gm_v4("file_from_local_source_with_check", @{args3}, "${init.result[3]}", "ph3", "enforce" );
      "ph4" usebundle  => apply_gm_v4("file_from_local_source_with_check", @{args4}, "${init.result[4]}", "ph4", "enforce" );
}

#######################################################

bundle agent check
{
  classes:
    "expected_file_${init.indices}" expression => strcmp("${init.assert_exist[${init.indices}]}", "true");
    "file_exist_${init.indices}" expression => fileexists("${init.dst[${init.indices}]}");
    "files_not_ok" expression => and("file_exist_${init.indices}",
                                     "!expected_file_${init.indices}"
                                    );
    "files_not_ok" expression => and("!file_exist_${init.indices}",
                                     "expected_file_${init.indices}"
                                    );

    "classes_ok"   expression => "ph1_ok.ph2_ok.ph3_ok.ph4_ok";
    "ok"           expression => "classes_ok.!files_not_ok";

  reports:
    any::
      "ERROR ph${init.indices} failed"
        if => "!ph${init.indices}_ok";
      "OK ph${init.indices} succeeded"
        if => "ph${init.indices}_ok";
      "Found destination file for test ${init.indices}"
        if => "file_exist_${init.indices}";
      "Expected file ${init.indices}"
        if => "expected_file_${init.indices}";

    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
}
