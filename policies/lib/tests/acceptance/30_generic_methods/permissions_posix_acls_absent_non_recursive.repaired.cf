#######################################################
#
# Test checking if ACLs are present or not
#
# Create: acl_absent_test/sub_dir1/file1
#         acl_absent_test/file1
#         acl_absent_test/sub_dir2/file1
#
# Remove ACLs on acl_absent_test/sub_dir1/.
# Add some    on acl_absent_test/sub_dir1/file1
#             on acl_absent_test/file1
#            and acl_absent_test/sub_dir2/.
#
# Apply permissions_posix_acls_absent in enforce mode without recursion on
#         acl_absent_test/sub_dir1
#         acl_absent_test/sub_dir1/file1
#         acl_absent_test/file1
#         acl_absent_test/*1
#         acl_absent_test/*2
#
# They should all repaired since they have ACLs set
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
      "tmp"   string => getenv("TEMP", 1024);
      "user"  string => "bin";

      "files[1]" string => "acl_absent_test/sub_dir1/.";
      "files[2]" string => "acl_absent_test/sub_dir1/file1";
      "files[3]" string => "acl_absent_test/file1";
      "files[4]" string => "acl_absent_test/*1";
      "files[5]" string => "acl_absent_test/sub_dir2/.";
      "files[6]" string => "acl_absent_test/*2";

      "indices"           slist => { "1", "2", "3", "4", "5", "6" };
      "create_indices"    slist => { "1", "2", "3", "5" };
      "effective_indices" slist => { "1", "2", "3", "4", "6" };

      "files_canon[${indices}]" string => canonify("${files[${indices}]}");

  classes:
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";

    pass2::
      "acls_set_${files_canon[${create_indices}]}" expression => returnszero("${paths.setfacl} -m u:${user}:rx ${tmp}/${files[${create_indices}]}", "useshell"),
        scope => "namespace";

  files:
    any::
      "${tmp}/${files[${create_indices}]}"
        create => "true",
        perms  => mog("555", "root", "0");
}

#######################################################

bundle agent test
{
  # We can assume the repaired were not recursive if we have a repaired on each file.
  vars:
    "args${init.effective_indices}" slist => {"${init.tmp}/${init.files[${init.effective_indices}]}", "false"};

  methods:
    "ph1" usebundle => apply_gm("permissions_posix_acls_absent", @{args1}, "repaired", "ph1", "enforce");
    "ph2" usebundle => apply_gm("permissions_posix_acls_absent", @{args2}, "repaired", "ph2", "enforce");
    "ph3" usebundle => apply_gm("permissions_posix_acls_absent", @{args3}, "repaired", "ph3", "enforce");
    "ph4" usebundle => apply_gm("permissions_posix_acls_absent", @{args4}, "success", "ph4", "enforce");
    "ph6" usebundle => apply_gm("permissions_posix_acls_absent", @{args6}, "repaired", "ph6", "enforce");
}

#######################################################

bundle agent check
{
  vars:
    "getfacl_output[${init.create_indices}]" string => execresult("${paths.getfacl} --skip-base ${init.tmp}/${init.files[${init.create_indices}]}", "useshell"),
      ifvarclass => "acls_set_${init.files_canon[${init.create_indices}]}";

  classes:
   "classes_ok" expression => "ph1_ok.ph2_ok.ph3_ok.ph4_ok.ph6_ok";


   "cleanup_${init.create_indices}" expression => strcmp("${getfacl_output[${init.create_indices}]}", "");
   "all_cleanup" expression => "cleanup_1.cleanup_2.cleanup_3.cleanup_5";

   "ok" expression => "all_cleanup.classes_ok";

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
    any::
      "Unexpected ACLs change on ${init.tmp}/${init.files[${init.create_indices}]}"
      ifvarclass => "!cleanup_${init.create_indices}";
}
