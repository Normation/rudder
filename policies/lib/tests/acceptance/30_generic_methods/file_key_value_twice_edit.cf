#######################################################
#
# Test checking if a keng twice in a section does effectively edit twice
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################
bundle agent init
{
  vars:
    "tmp"             string => getenv("TEMP", 1024);
    "file_1"            string => "${tmp}/test1";
    "reference_file_1"  string => "${tmp}/ref1";
    "file_1_canon"      string => canonify("${file_1}");

# Ensure that double edition within a section succeed
    "key_1"            string => "name";
    "value_1"           string => "value";
    "key_2"            string => "key";
    "value_2"           string => "value";
    "separator"        string => "=";

    "reference_1"       string => "file
${key_1}${separator}${value_1}
${key_2}${separator}${value_2}";


  commands:
# Initialize first test files
    "/bin/echo"
      args    => "\"${reference_1}\" > \"${reference_file_1}\"",
      contain => in_shell;
   "/bin/echo"
      args    => "\"file\" > \"${file_1}\"",
      contain => in_shell;
}

#######################################################

bundle agent test
{
  methods:
    "ph1" usebundle => file_key_value_present("${init.file_1}", "${init.key_1}", "${init.value_1}", "${init.separator}");
    "ph2" usebundle => file_key_value_present("${init.file_1}", "${init.key_2}", "${init.value_2}", "${init.separator}");
}

#######################################################

bundle agent check
{
  vars:
    "file_correct_test" string => "/usr/bin/diff \"${init.reference_file_1}\" \"${init.file_1}\"";

  classes:
    "file_correct"
       expression => returnszero("${file_correct_test}", "noshell"),
       ifvarclass => canonify("file_key_value_present_${init.file_1}_reached");
    "ok"    expression => "file_correct.file_key_value_present_${init.file_1_canon}_ok.!file_key_value_present_${init.file_1_canon}_error";

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
}

