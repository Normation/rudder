#######################################################
#
# Test the exit code of shell commands
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    "tmp"            string => getenv("TEMP", 1024);
    "kept_codes"     string => "0,1, 2";
    "repaired_codes" string => "3, 4";

    "command[0]"     string => "exit 0";
    "result[0]"      string => "success";

    "command[1]"     string => "exit 1";
    "result[1]"      string => "success";

    "command[2]"     string => "exit 2";
    "result[2]"      string => "success";

    "command[3]"     string => "exit 3";
    "result[3]"      string => "repaired";

    "command[4]"     string => "exit 4";
    "result[4]"      string => "repaired";

    "command[5]"     string => "exit 5";
    "result[5]"      string => "error";

    # Audit
    "command[6]"     string => "/bin/touch ${tmp}/6";
    "result[6]"      string => "na";

    "command[7]"     string => "/bin/touch ${tmp}/7";
    "result[7]"      string => "na";

    "command[8]"     string => "/bin/touch ${tmp}/8";
    "result[8]"      string => "na";

    "command[9]"     string => "/bin/touch ${tmp}/9";
    "result[9]"      string => "na";

    "command[10]"     string => "/bin/touch ${tmp}/10";
    "result[10]"      string => "na";

    "command[11]"     string => "/bin/touch ${tmp}/11";
    "result[11]"      string => "na";

    "indices" slist => getindices("command");

}

#######################################################

bundle agent test
{
  vars:
    "args${init.indices}" slist => { "${init.command[${init.indices}]}", "${init.kept_codes}", "${init.repaired_codes}" };

 methods:
    # Enforce
    "ph0"     usebundle => apply_gm_v4("command_execution_result", @{args0},  "${init.result[0]}",  "ph0",  "enforce" );
    "ph1"     usebundle => apply_gm_v4("command_execution_result", @{args1},  "${init.result[1]}",  "ph1",  "enforce" );
    "ph2"     usebundle => apply_gm_v4("command_execution_result", @{args2},  "${init.result[2]}",  "ph2",  "enforce" );
    "ph3"     usebundle => apply_gm_v4("command_execution_result", @{args3},  "${init.result[3]}",  "ph3",  "enforce" );
    "ph4"     usebundle => apply_gm_v4("command_execution_result", @{args4},  "${init.result[4]}",  "ph4",  "enforce" );
    "ph5"     usebundle => apply_gm_v4("command_execution_result", @{args5},  "${init.result[5]}",  "ph5",  "enforce" );

    # Audit
    "enable"  usebundle => set_dry_run_mode("true");
    "ph6"     usebundle => apply_gm_v4("command_execution_result", @{args6},  "${init.result[6]}",  "ph6",  "audit" );
    "ph7"     usebundle => apply_gm_v4("command_execution_result", @{args7},  "${init.result[7]}",  "ph7",  "audit" );
    "ph8"     usebundle => apply_gm_v4("command_execution_result", @{args8},  "${init.result[8]}",  "ph8",  "audit" );
    "ph9"     usebundle => apply_gm_v4("command_execution_result", @{args9},  "${init.result[9]}",  "ph9",  "audit" );
    "ph10"    usebundle => apply_gm_v4("command_execution_result", @{args10}, "${init.result[10]}", "ph10", "audit" );
    "ph11"    usebundle => apply_gm_v4("command_execution_result", @{args11}, "${init.result[11]}", "ph11", "audit" );
    "disable" usebundle => set_dry_run_mode("false");
}

#######################################################

bundle agent check
{
  vars:
    "audit_report"    string => "command_execution_result_${init.canonified_audit_command_name}_exit";

  classes:
    "classes_ok"  expression => "ph0_ok.ph1_ok.ph2_ok.ph3_ok.ph4_ok.ph5_ok.ph6_ok.ph7_ok.ph9_ok.ph10_ok.ph11_ok";

    "files_exist"         or => {
                                  fileexists("${init.tmp}/6"),
                                  fileexists("${init.tmp}/7"),
                                  fileexists("${init.tmp}/8"),
                                  fileexists("${init.tmp}/9"),
                                  fileexists("${init.tmp}/10"),
                                  fileexists("${init.tmp}/11")
                                };

    "ok"          expression => "classes_ok.!files_exist";

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
}
