#######################################################
#
# Test checking if a key-value pair are present in a file 
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    "tmp"         string => getenv("TEMP", 1024);

# First test: ensure that a value is correctly modified
    "base_text[1]"     string => "# File with lhs=rhs text
JAVA_OPTS =\"-Djava.awt.headless=true -Xmx128m -XX:+UseConcMarkSweepGC\"";
    "expected_text[1]" string => "# File with lhs=rhs text
JAVA_OPTS =\"-Djava.awt.headless=true -Xmx1024m\"";

    "key[1]"           string => "JAVA_OPTS";
    "value[1]"         string => "\"-Djava.awt.headless=true -Xmx1024m\"";
    "separator[1]"     string => "=";
    "option[1]"        string => "lax";
    "status[1]"        string => "repaired";


# Second test: ensure that a key-value is correctly added in a file
    "base_text[2]"       string => "# File with lhs=rhs text
Key=Value";
    "expected_text[2]"   string=> "# File with lhs=rhs text
Key=Value
AddedKey=AddedValue";

    "key[2]"             string => "AddedKey";
    "value[2]"           string => "AddedValue";
    "separator[2]"       string => "=";
    "option[2]"          string => "lax";
    "status[2]"          string => "repaired";


# Third test: ensure that if key-value is already correct (with extra spaces), nothing is done
    "base_text[3]"       string => "# File with lhs rhs text
Key   Value";
    "expected_text[3]"   string => "# File with lhs rhs text
Key   Value";

    "key[3]"             string => "Key";
    "value[3]"           string => "Value";
    "separator[3]"       string => " ";
    "option[3]"          string => "lax";
    "status[3]"          string => "success";

# Fourth test: ensure that if key-value is already correct (with extra spaces), nothing is done
    "base_text[4]"       string => "# File with lhs rhs text
Key = Value";
    "expected_text[4]"   string => "# File with lhs rhs text
Key = Value";

    "key[4]"             string => "Key";
    "value[4]"           string => "Value";
    "separator[4]"       string => "=";
    "option[4]"          string => "lax";
    "status[4]"          string => "success";


# Fifth test: ensure that if key-value is already there with extra spaces, extra space are purged
    "base_text[5]"       string => "# File with lhs rhs text
Key =   Value";
    "expected_text[5]"   string => "# File with lhs rhs text
Key=Value";

    "key[5]"             string => "Key";
    "value[5]"           string => "Value";
    "separator[5]"       string => "=";
    "option[5]"          string => "strict";
    "status[5]"          string => "repaired";

# Sixth test: ensure that a key-value is correctly added in a file
    "base_text[6]"       string => "# File with lhs=rhs text
Foo=bar
Key=Value";
    "expected_text[6]"   string=> "# File with lhs=rhs text
Foo=bar
Key=Value
AddedKey=AddedValue";

    "key[6]"             string => "AddedKey";
    "value[6]"           string => "AddedValue";
    "separator[6]"       string => "=";
    "option[6]"          string => "strict";
    "status[6]"          string => "repaired";


# Seventh test: ensure that a value is correctly modified
    "base_text[7]"       string => "# File with lhs=rhs text
JAVA_OPTS =\"-Djava.awt.headless=true -Xmx128m -XX:+UseConcMarkSweepGC\"";
    "expected_text[7]"   string=> "# File with lhs=rhs text
JAVA_OPTS=\"-Djava.awt.headless=true -Xmx1024m\"";

    "key[7]"             string => "JAVA_OPTS";
    "value[7]"           string => "\"-Djava.awt.headless=true -Xmx1024m\"";
    "separator[7]"       string => "=";
    "option[7]"          string => "strict";
    "status[7]"          string => "repaired";

    "indices" slist => getindices("base_text");

  files:
    "${tmp}/src_${indices}"
      create => "true",
      edit_line => insert_lines("${base_text[${indices}]}"),
      edit_defaults => empty;

    "${tmp}/ref_${indices}"
      create => "true",
      edit_line => insert_lines("${expected_text[${indices}]}"),
      edit_defaults => empty;
}

#######################################################

bundle agent test
{
  vars:
      "args${init.indices}" slist => { "${init.tmp}/src_${init.indices}", "${init.key[${init.indices}]}", "${init.value[${init.indices}]}", "${init.separator[${init.indices}]}", "${init.option[${init.indices}]}" };

  methods:
      "ph1" usebundle => apply_gm("file_key_value_present_option", @{args1}, "${init.status[1]}", "ph1", "enforce" );
      "ph2" usebundle => apply_gm("file_key_value_present_option", @{args2}, "${init.status[2]}", "ph2", "enforce" );
      "ph3" usebundle => apply_gm("file_key_value_present_option", @{args3}, "${init.status[3]}", "ph3", "enforce" );
      "ph4" usebundle => apply_gm("file_key_value_present_option", @{args4}, "${init.status[4]}", "ph4", "enforce" );
      "ph5" usebundle => apply_gm("file_key_value_present_option", @{args5}, "${init.status[5]}", "ph5", "enforce" );
      "ph6" usebundle => apply_gm("file_key_value_present_option", @{args6}, "${init.status[6]}", "ph6", "enforce" );
      "ph7" usebundle => apply_gm("file_key_value_present_option", @{args7}, "${init.status[7]}", "ph7", "enforce" );
}

#######################################################

bundle agent check
{
  vars:
      "file_diff_${init.indices}" string => "/usr/bin/diff \"${init.tmp}/ref_${init.indices}\" \"${init.tmp}/src_${init.indices}\"";

  classes:
    "pass3" expression => "pass2";
    "pass2" expression => "pass1";
    "pass1" expression => "any";

    "file_${init.indices}_ok" expression => returnszero("${file_diff_${init.indices}}", "useshell"),
      if => "pass3";

    "classes_ok"  expression => "ph1_ok.ph2_ok.ph3_ok.ph4_ok.ph5_ok.ph6_ok.ph7_ok";
    "diff_not_ok" expression => "!file_${init.indices}_ok.pass3";
    "ok"          expression => "classes_ok.!diff_not_ok.pass3";


  reports:
    ok.pass3::
      "$(this.promise_filename) Pass";
    !ok.pass3::
      "$(this.promise_filename) FAIL";
    pass3::
      "DIFF incorrect for test ${init.indices}${const.n}${file_diff_${init.indices}}"
      if => "!file_${init.indices}_ok";
}
