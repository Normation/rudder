#######################################################
#
# Test checking if two file permissions in a directory can be changed recursively
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
      "tmp"             string => getenv("TEMP", 1024);

      "directory[1]"        string => "${tmp}/test1";
      "directory_canon[1]"  string => canonify("${directory[1]}");
      "mode[1]"             string => "750";
      "Emode[1]"            string => "750";
      "owner[1]"            string => "bin";
      "Eowner[1]"           string => "bin";
      "group[1]"            string => "bin";
      "Egroup[1]"           string => "bin";
      "status[1]"           string => "repaired";      # expected status, "repaired", "success" or "error"
      "audit[1]"            string => "enforce";
      "execute[1]"          string => "true";          # Tell if an execution is needed

      "directory[2]"        string => "${tmp}/test2";
      "directory_canon[2]"  string => canonify("${directory[2]}");
      "mode[2]"             string => "750";
      "Emode[2]"            string => "750";   # expexted resulting mode
      "owner[2]"            string => "";
      "Eowner[2]"           string => "root";
      "group[2]"            string => "";
      "Egroup[2]"           string => "0";
      "status[2]"           string => "repaired";      # expected status, "repaired", "success" or "error"
      "audit[2]"            string => "enforce";
      "execute[2]"          string => "true";          # Tell if an execution is needed
      
      "directory[3]"        string => "${tmp}/test3";
      "directory_canon[3]"  string => canonify("${directory[3]}");
      "mode[3]"             string => "";
      "Emode[3]"            string => "000";
      "owner[3]"            string => "bin";
      "Eowner[3]"           string => "bin";
      "group[3]"            string => "";
      "Egroup[3]"           string => "0";
      "status[3]"           string => "repaired";      # expected status, "repaired", "success" or "error"
      "audit[3]"            string => "enforce";
      "execute[3]"          string => "true";          # Tell if an execution is needed
      
      "directory[4]"        string => "${tmp}/test4";
      "directory_canon[4]"  string => canonify("${directory[4]}");
      "mode[4]"             string => "";
      "Emode[4]"            string => "000";
      "owner[4]"            string => "";
      "Eowner[4]"           string => "root";
      "group[4]"            string => "bin";
      "Egroup[4]"           string => "bin";
      "status[4]"           string => "repaired";      # expected status, "repaired", "success" or "error"
      "audit[4]"            string => "enforce";
      "execute[4]"          string => "true";          # Tell if an execution is needed
      
      "directory[5]"        string => "${tmp}/test5";
      "directory_canon[5]"  string => canonify("${directory[5]}");
      "mode[5]"             string => "";
      "Emode[5]"            string => "000";
      "owner[5]"            string => "root";
      "Eowner[5]"           string => "root";
      "group[5]"            string => "";
      "Egroup[5]"           string => "0";
      "status[5]"           string => "success";      # expected status, "repaired", "success" or "error"
      "audit[5]"            string => "enforce";
      "execute[5]"          string => "true";          # Tell if an execution is needed
     
      "directory[6]"        string => "${tmp}/test6";
      "directory_canon[6]"  string => canonify("${directory[6]}");
      "mode[6]"             string => "000";
      "Emode[6]"            string => "000";
      "owner[6]"            string => "root";
      "Eowner[6]"           string => "root";
      "group[6]"            string => "";
      "Egroup[6]"           string => "0";
      "status[6]"           string => "success";      # expected status, "repaired", "success" or "error"
      "audit[6]"            string => "audit";
      "execute[6]"          string => "false";        # Tell if an execution is needed


      "directory[7]"        string => "${tmp}/test7";
      "directory_canon[7]"  string => canonify("${directory[7]}");
      "mode[7]"             string => "700";
      "Emode[7]"            string => "000";
      "owner[7]"            string => "root";
      "Eowner[7]"           string => "root";
      "group[7]"            string => "";
      "Egroup[7]"           string => "0";
      "status[7]"           string => "error";      # expected status, "repaired", "success" or "error"
      "audit[7]"            string => "audit";
      "execute[7]"          string => "false";      # Tell if an execution is needed
      
      "indices" slist => {1, 2, 3, 4, 5, 6, 7};

  files:
    "${directory[${indices}]}/."
      create => "true",
      perms  => mog("000", "root", "0");

    "${directory[${indices}]}/file1/."
      create => "true",
      perms  => mog("000", "root", "0");

    "${directory[${indices}]}/file2/."
      create => "true",
      perms  => mog("000", "root", "0");

}

#######################################################

bundle agent test
{
  vars:
      "args${init.indices}" slist => { "${init.directory[${init.indices}]}", "${init.mode[${init.indices}]}", "${init.owner[${init.indices}]}", "${init.group[${init.indices}]}" };
  classes:
      "pass2" expression => "pass1";
      "pass1" expression => "any";

  methods:
    pass1.!pass2::
    #REPAIRED
      "ph1" usebundle => apply_gm("permissions_dirs_recursive", @{args1}, "${init.status[1]}", "ph1", "${init.audit[1]}" );
      "ph2" usebundle => apply_gm("permissions_dirs_recursive", @{args2}, "${init.status[2]}", "ph2", "${init.audit[2]}" );
      "ph3" usebundle => apply_gm("permissions_dirs_recursive", @{args3}, "${init.status[3]}", "ph3", "${init.audit[3]}" );
      "ph4" usebundle => apply_gm("permissions_dirs_recursive", @{args4}, "${init.status[4]}", "ph4", "${init.audit[4]}" );
    # SUCCESS
      "ph5" usebundle => apply_gm("permissions_dirs_recursive", @{args5}, "${init.status[5]}", "ph5", "${init.audit[5]}" );
    # audit success ERROR
      "ph6" usebundle => apply_gm("permissions_dirs_recursive", @{args6}, "${init.status[6]}", "ph6", "${init.audit[6]}" );
    # AUDIT ERROR
      "ph7" usebundle => apply_gm("permissions_dirs_recursive", @{args7}, "${init.status[7]}", "ph7", "${init.audit[7]}" );

}

#######################################################

bundle agent check
{
  vars:
    "permissions_test_mode[${init.indices}]"  string => "/usr/bin/test ${const.dollar}(/usr/bin/find ${init.directory[${init.indices}]} -perm ${init.Emode[${init.indices}]} | wc -l) = \"3\"";
    "permissions_test_owner[${init.indices}]" string => "/usr/bin/test ${const.dollar}(/usr/bin/find ${init.directory[${init.indices}]} -user ${init.Eowner[${init.indices}]} | wc -l) = \"3\"";
    "permissions_test_group[${init.indices}]" string => "/usr/bin/test ${const.dollar}(/usr/bin/find ${init.directory[${init.indices}]} -group ${init.Egroup[${init.indices}]} | wc -l) = \"3\"";  
    
  classes:
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";

    pass1::
      "permissions_${init.indices}_test_mode_ok"
        expression => returnszero("${permissions_test_mode[${init.indices}]}", "useshell");
      "permissions_${init.indices}_test_owner_ok"
        expression => returnszero("${permissions_test_owner[${init.indices}]}", "useshell");
      "permissions_${init.indices}_test_group_ok"
        expression => returnszero("${permissions_test_group[${init.indices}]}", "useshell");

      "result_nok"  not => "permissions_${init.indices}_test_mode_ok.permissions_${init.indices}_test_owner_ok.permissions_${init.indices}_test_group_ok";
      
      
      # classes_ok is just a placeholder. What we really want is find the not ok
      "classes_not_ok"  expression => or("classes_ok", "!ph${init.indices}_ok");
      
      "ok"              expression => "!classes_not_ok.!result_nok";
       
 
  reports:
    pass3::
      "Test for permissions_dirs_recursive nb ${init.indices} FAILED"
        if => "!ph${init.indices}_ok";

    pass3.ok::
      "$(this.promise_filename) Pass";
    pass3.!ok::
      "$(this.promise_filename) FAIL";
    pass3::
      "test command doesn't return 0 for command: ${permissions_test_mode[${init.indices}]}"
         if => "!permissions_${init.indices}_test_mode_ok";
    
      "test command doesn't return 0 for command: ${permissions_test_owner[${init.indices}]}"
         if => "!permissions_${init.indices}_test_owner_ok";
         
      "test command doesn't return 0 for command: ${permissions_test_group[${init.indices}]}"
         if => "!permissions_${init.indices}_test_group_ok";
         
    
}
