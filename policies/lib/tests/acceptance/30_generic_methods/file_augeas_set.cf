bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    "tmp"   string => getenv("TEMP", 1024);

    "file[0]"   string => "${tmp}/etc/sshd_config0";
    "value[0]"  string => "yes";
    "lens[0]"   string => "Sshd";
    "path[0]"   string => "${tmp}/etc/sshd_config0/PermitRootLogin";
    "status[0]" string => "success";
    "mode[0]"   string => "enforce";

    "file[1]"   string => "${tmp}/etc/sshd_config1";
    "value[1]"  string => "no";
    "lens[1]"   string => "Sshd";
    "path[1]"   string => "${tmp}/etc/sshd_config1/PermitRootLogin";
    "status[1]" string => "repaired";
    "mode[1]"   string => "enforce";

    "file[2]"   string => "${tmp}/etc/sshd_config1";
    "value[2]"  string => "yes";
    "lens[2]"   string => "Sshd";
    "path[2]"   string => "${tmp}/etc/sshd_config1/StrictModes";
    "status[2]" string => "success";
    "mode[2]"   string => "enforce";

    "indices" slist => getindices("file");

  files:
    "${tmp}/etc/sshd_config${indices}"
       copy_from => local_cp("${this.promise_dirname}/file_augeas_set.sshd_config_yes");
}

#######################################################

bundle agent test
{
  vars:
    "args${init.indices}" slist => { "${init.path[${init.indices}]}", "${init.value[${init.indices}]}", "${init.lens[${init.indices}]}", "${init.file[${init.indices}]}" };

  methods:
    "ph0"  usebundle => apply_gm("file_augeas_set", @{args0},  "${init.status[0]}",  "ph0",  "${init.mode[0]}");
    "ph1"  usebundle => apply_gm("file_augeas_set", @{args1},  "${init.status[1]}",  "ph1",  "${init.mode[1]}");
    "ph2"  usebundle => apply_gm("file_augeas_set", @{args2},  "${init.status[2]}",  "ph2",  "${init.mode[2]}");
}

#######################################################

bundle agent check
{
  classes:
      "classes_ok" expression => "ph0_ok.ph1_ok.ph2_ok";
    classes_ok::
      "content_0" expression => returnszero("diff ${init.file[0]} ${this.promise_dirname}/file_augeas_set.sshd_config_yes 2>/dev/null", "useshell");
      "content_1" expression => returnszero("diff ${init.file[1]} ${this.promise_dirname}/file_augeas_set.sshd_config_no 2>/dev/null", "useshell");
      "content_ok" expression => "content_0.content_1";

      "ok" expression => "classes_ok.content_ok";

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
}


