#######################################################
#
# Test checking if ACLs are present or not
# 
# Apply permissions_posix_acls_absent in enforce mode with recursion on
#         unknown_file1
# Apply permissions_posix_acls_absent in enforce mode without recursion on
#         unknown_file*
# They all should fail since they do not exist
# 
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
      "tmp"       string => getenv("TEMP", 1024);

      "files[1]" string => "unknown_file1";
      "files[2]" string => "unknown_file*";

      "indices"   slist => { "1", "2" };

      "files_canon[${indices}]"      string => canonify("${files[${indices}]}");

      "expected_old_class_prefix[1]" string => canonify("permissions_posix_acls_absent_${tmp}/${files[1]}");
      "expected_class_prefix[1]"     string => canonify("permissions_posix_acls_absent_${tmp}/${files[1]}_true");

      "expected_old_class_prefix[2]" string => canonify("permissions_posix_acls_absent_${tmp}/${files[2]}");
      "expected_class_prefix[2]"     string => canonify("permissions_posix_acls_absent_${tmp}/${files[2]}_false");


  methods:
    "file${indices}" usebundle => define_expected_classes("${expected_old_class_prefix[${indices}]}", "error", "old_${indices}");
    "file${indices}" usebundle => define_expected_classes("${expected_class_prefix[${indices}]}", "error", "${indices}");
}

#######################################################

bundle agent test
{
  methods:
    "ph1" usebundle => permissions_posix_acls_absent("${init.tmp}/${init.files[1]}", "true");
    "ph2" usebundle => permissions_posix_acls_absent("${init.tmp}/${init.files[2]}", "false");
}

#######################################################

bundle agent check
{
  classes:
     "old_class_${init.indices}" expression => "${define_expected_classes.report_string_old_${init.indices}}";
     "class_${init.indices}"     expression => "${define_expected_classes.report_string_${init.indices}}";

     "old_class_prefix_ok"       expression => "old_class_1.old_class_2";
     "class_prefix_ok"           expression => "class_1.class_2";

     "ok"                        expression => "class_prefix_ok.old_class_prefix_ok";

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
    any::
      "Missing expected old class for ${init.files[${init.indices}]}"
      ifvarclass => "!old_class_${init.indices}";

      "Missing expected class for ${init.files[${init.indices}]}"
      ifvarclass => "!class_${init.indices}";
}
