#######################################################
#
# Exit with a specific code
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    "tmp"               string => getenv("TEMP", 1024);
    "very_long_command" string => "exit 1; #Comment to reach 4K string aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa";

    "true_codes"  string => "0,1, 2";
    "false_codes" string => "3, 4";

    # Enforce
    "prefix[0]"     string => "class0";
    "command[0]"    string => "exit 0";
    "status[0]"     string => "success";
    "expected[0]"   string => "${prefix[0]}_true";
    "unexpected[0]" string => "${prefix[0]}_false";
    "mode[0]"       string => "enforce";

    "prefix[1]"     string => "class1";
    "command[1]"    string => "exit 1";
    "status[1]"     string => "success";
    "expected[1]"   string => "${prefix[1]}_true";
    "unexpected[1]" string => "${prefix[1]}_false";
    "mode[1]"       string => "enforce";

    "prefix[2]"     string => "class2";
    "command[2]"    string => "exit 2";
    "status[2]"     string => "success";
    "expected[2]"   string => "${prefix[2]}_true";
    "unexpected[2]" string => "${prefix[2]}_false";
    "mode[2]"       string => "enforce";

    "prefix[3]"     string => "class3";
    "command[3]"    string => "exit 3";
    "status[3]"     string => "success";
    "expected[3]"   string => "${prefix[3]}_false";
    "unexpected[3]" string => "${prefix[3]}_true";
    "mode[3]"       string => "enforce";

    "prefix[4]"     string => "class4";
    "command[4]"    string => "exit 4";
    "status[4]"     string => "success";
    "expected[4]"   string => "${prefix[4]}_false";
    "unexpected[4]" string => "${prefix[4]}_true";
    "mode[4]"       string => "enforce";

    "prefix[5]"     string => "class5";
    "command[5]"    string => "exit 5";
    "status[5]"     string => "error";
    "expected[5]"   string => "any";
    "unexpected[5]" string => "${prefix[5]}_false|${prefix[5]}_true";
    "mode[5]"       string => "enforce";

    "prefix[6]"     string => "class6";
    "command[6]"    string => "unknown command";
    "status[6]"     string => "error";
    "expected[6]"   string => "any";
    "unexpected[6]" string => "${prefix[6]}_false|${prefix[6]}_true";
    "mode[6]"       string => "enforce";

    "prefix[7]"     string => "class7";
    "command[7]"    string => "${very_long_command}";
    "status[7]"     string => "success";
    "expected[7]"   string => "${prefix[7]}_true";
    "unexpected[7]" string => "${prefix[7]}_false";
    "mode[7]"       string => "enforce";

    "prefix[8]"     string => "class8";
    "command[8]"    string => "/bin/touch ${tmp}/enforce";
    "status[8]"     string => "success";
    "expected[8]"   string => "${prefix[8]}_true";
    "unexpected[8]" string => "${prefix[8]}_false";
    "mode[8]"       string => "enforce";

    # Audit
    "prefix[9]"     string => "class9";
    "command[9]"    string => "exit 0";
    "status[9]"     string => "success";
    "expected[9]"   string => "${prefix[9]}_true";
    "unexpected[9]" string => "${prefix[9]}_false";
    "mode[9]"       string => "audit";

    "prefix[10]"     string => "class10";
    "command[10]"    string => "exit 1";
    "status[10]"     string => "success";
    "expected[10]"   string => "${prefix[10]}_true";
    "unexpected[10]" string => "${prefix[10]}_false";
    "mode[10]"       string => "audit";

    "prefix[11]"     string => "class11";
    "command[11]"    string => "exit 2";
    "status[11]"     string => "success";
    "expected[11]"   string => "${prefix[11]}_true";
    "unexpected[11]" string => "${prefix[11]}_false";
    "mode[11]"       string => "audit";

    "prefix[12]"     string => "class12";
    "command[12]"    string => "exit 3";
    "status[12]"     string => "success";
    "expected[12]"   string => "${prefix[12]}_false";
    "unexpected[12]" string => "${prefix[12]}_true";
    "mode[12]"       string => "audit";

    "prefix[13]"     string => "class13";
    "command[13]"    string => "exit 4";
    "status[13]"     string => "success";
    "expected[13]"   string => "${prefix[13]}_false";
    "unexpected[13]" string => "${prefix[13]}_true";
    "mode[13]"       string => "audit";

    "prefix[14]"     string => "class14";
    "command[14]"    string => "exit 5";
    "status[14]"     string => "error";
    "expected[14]"   string => "any";
    "unexpected[14]" string => "${prefix[14]}_true|${prefix[14]}_false";
    "mode[14]"       string => "audit";

    "prefix[15]"     string => "class15";
    "command[15]"    string => "unknown command";
    "status[15]"     string => "error";
    "expected[15]"   string => "any";
    "unexpected[15]" string => "${prefix[15]}_true|${prefix[15]}_false";
    "mode[15]"       string => "audit";

    "prefix[16]"     string => "class16";
    "command[16]"    string => "/bin/touch ${tmp}/audit";
    "status[16]"     string => "success";
    "expected[16]"   string => "${prefix[16]}_true";
    "unexpected[16]" string => "${prefix[16]}_false";
    "mode[16]"       string => "audit";

    "indices" slist => getindices("prefix");

}

#######################################################

bundle agent test
{
  vars:
    "args${init.indices}" slist => { "${init.prefix[${init.indices}]}", "${init.command[${init.indices}]}", "${init.true_codes}", "${init.false_codes}" };

  methods:
    # Enforce
    "ph0"  usebundle => apply_gm_v4("condition_from_command", @{args0},  "${init.status[0]}",  "ph0",  "${init.mode[0]}");
    "ph1"  usebundle => apply_gm_v4("condition_from_command", @{args1},  "${init.status[1]}",  "ph1",  "${init.mode[1]}");
    "ph2"  usebundle => apply_gm_v4("condition_from_command", @{args2},  "${init.status[2]}",  "ph2",  "${init.mode[2]}");
    "ph3"  usebundle => apply_gm_v4("condition_from_command", @{args3},  "${init.status[3]}",  "ph3",  "${init.mode[3]}");
    "ph4"  usebundle => apply_gm_v4("condition_from_command", @{args4},  "${init.status[4]}",  "ph4",  "${init.mode[4]}");
    "ph5"  usebundle => apply_gm_v4("condition_from_command", @{args5},  "${init.status[5]}",  "ph5",  "${init.mode[5]}");
    "ph6"  usebundle => apply_gm_v4("condition_from_command", @{args6},  "${init.status[6]}",  "ph6",  "${init.mode[6]}");
    "ph7"  usebundle => apply_gm_v4("condition_from_command", @{args7},  "${init.status[7]}",  "ph7",  "${init.mode[7]}");
    "ph8"  usebundle => apply_gm_v4("condition_from_command", @{args8},  "${init.status[8]}",  "ph8",  "${init.mode[8]}");

    # Audit
    "ph9"  usebundle => apply_gm_v4("condition_from_command", @{args9},  "${init.status[9]}",  "ph9",  "${init.mode[9]}");
    "ph10" usebundle => apply_gm_v4("condition_from_command", @{args10}, "${init.status[10]}", "ph10", "${init.mode[10]}");
    "ph11" usebundle => apply_gm_v4("condition_from_command", @{args11}, "${init.status[11]}", "ph11", "${init.mode[11]}");
    "ph12" usebundle => apply_gm_v4("condition_from_command", @{args12}, "${init.status[12]}", "ph12", "${init.mode[12]}");
    "ph13" usebundle => apply_gm_v4("condition_from_command", @{args13}, "${init.status[13]}", "ph13", "${init.mode[13]}");
    "ph14" usebundle => apply_gm_v4("condition_from_command", @{args14}, "${init.status[14]}", "ph14", "${init.mode[14]}");
    "ph15" usebundle => apply_gm_v4("condition_from_command", @{args15}, "${init.status[15]}", "ph15", "${init.mode[15]}");
    "ph16" usebundle => apply_gm_v4("condition_from_command", @{args16}, "${init.status[16]}", "ph16", "${init.mode[16]}");

}

#######################################################

bundle agent check
{
  classes:
    "enforce_created"   expression => fileexists("${init.tmp}/enforce");
    "audit_created"     expression => fileexists("${init.tmp}/audit");

    "expected_not_ok"   expression => "!${init.expected[${init.indices}]}";
    "unexpected_not_ok" expression => "${init.unexpected[${init.indices}]}";
    "classes_ok"        expression => "ph0_ok.ph1_ok.ph2_ok.ph3_ok.ph4_ok.ph5_ok.ph6_ok.ph7_ok.ph8_ok.ph9_ok.ph10_ok.ph11_ok.ph12_ok.ph13_ok.ph14_ok.ph15_ok.ph16_ok";

    "ok"  expression => "classes_ok.!expected_not_ok.!unexpected_not_ok.enforce_created.audit_created";

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "Expected ${init.tmp}/enforce not found"
        ifvarclass => "!enforce_created";
      "Unexpected file ${init.tmp}/audit found"
        ifvarclass => "!audit_created";
      "${init.unexpected[${init.indices}]} not expected"
        ifvarclass => "${init.unexpected[${init.indices}]}";
      "${init.expected[${init.indices}]} not found"
        ifvarclass => "!${init.expected[${init.indices}]}";
      "$(this.promise_filename) FAIL";
}
