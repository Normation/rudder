#######################################################
#
# Test checking that directory_absent removes a directory
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    "tmp"               string => getenv("TEMP", 1024);
    "directory"         string => "${tmp}/test";
    "directory_canon_0" string => canonify("${directory}/subdir0");
    "directory_canon_1" string => canonify("${directory}/subdir1/");
    "directory_canon_2" string => canonify("${directory}/subdir2");
    "directory_canon_3" string => canonify("${directory}/subdir3");
    "directory_canon_4" string => canonify("${directory}/subdir4");
    "directory_canon_5" string => canonify("${directory}/subdir5");
    "directory_canon_6" string => canonify("${directory}/file");
    "directory_canon_7" string => canonify("${directory}/file");

  files:
    "${directory}/."
      create => "true";

    "${directory}/file"
      create => "true";

    #----

    "${directory}/subdir0/."
      create => "true";

    #----

    "${directory}/subdir1/."
      create => "true";

    "${directory}/subdir1/subfile1"
      create => "true";

    #----

    "${directory}/subdir2/."
      create => "true";

    "${directory}/subdir2/subfile2"
      create => "true";

    "${directory}/subdir2/subsubdir2/."
      create => "true";

    "${directory}/subdir2/subsubdir2/subsubfile2"
      create => "true";

    #----

    "${directory}/subdir3/."
      create => "true";

    "${directory}/subdir3/subfile3"
      create => "true";

    "${directory}/subdir3/subsubdir3/."
      create => "true";

    "${directory}/subdir3/subsubdir3/subsubfile3"
      create => "true";

}

#######################################################

bundle agent test
{
  methods:
    "ph0" usebundle => directory_absent("${init.directory}/subdir0", "true");
    "ph1" usebundle => directory_absent("${init.directory}/subdir1/", "true");
    "ph2" usebundle => directory_absent("${init.directory}/subdir2", "true");
    "ph3" usebundle => directory_absent("${init.directory}/subdir3", "false");
    "ph4" usebundle => directory_absent("${init.directory}/subdir4", "true");
    "ph5" usebundle => directory_absent("${init.directory}/subdir5", "false");
    "ph6" usebundle => directory_absent("${init.directory}/file", "true");
    "ph7" usebundle => directory_absent("${init.directory}/file", "false");
}

#######################################################

bundle agent check
{
  classes:
    "file_exists_0" expression => fileexists("${init.directory}/subdir0");
    "file_exists_1" expression => fileexists("${init.directory}/subdir1");
    "file_exists_2" expression => fileexists("${init.directory}/subdir2");
    "file_exists_3" expression => fileexists("${init.directory}/subdir3");
    "file_exists_4" expression => fileexists("${init.directory}/subdir4");
    "file_exists_5" expression => fileexists("${init.directory}/subdir5");
    "file_exists_6" expression => fileexists("${init.directory}/file");
    "file_exists_7" expression => fileexists("${init.directory}/file");
    "ok_0"          expression => "!file_exists_0.directory_absent_${init.directory_canon_0}_repaired.!directory_absent_${init.directory_canon_0}_error";
    "ok_1"          expression => "!file_exists_1.directory_absent_${init.directory_canon_1}_repaired.!directory_absent_${init.directory_canon_1}_error";
    "ok_2"          expression => "!file_exists_2.directory_absent_${init.directory_canon_2}_repaired.!directory_absent_${init.directory_canon_2}_error";
    "ok_3"          expression => "file_exists_3.!directory_absent_${init.directory_canon_3}_repaired.directory_absent_${init.directory_canon_3}_error";
    "ok_4"          expression => "!file_exists_4.directory_absent_${init.directory_canon_4}_kept.!directory_absent_${init.directory_canon_4}_error";
    "ok_5"          expression => "!file_exists_5.directory_absent_${init.directory_canon_5}_kept.!directory_absent_${init.directory_canon_5}_error";
    "ok_6"          expression => "file_exists_6.directory_absent_${init.directory_canon_6}_kept.!directory_absent_${init.directory_canon_6}_error";
    "ok_7"          expression => "file_exists_7.directory_absent_${init.directory_canon_7}_kept.!directory_absent_${init.directory_canon_7}_error";
    "ok"                   and => { "ok_0", "ok_1", "ok_2", "ok_3", "ok_4", "ok_5", "ok_6", "ok_7" };

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
}
