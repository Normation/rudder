#######################################################
#
# Test if only success classes are created
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, initialization, default("$(this.promise_filename)") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  methods:
      "clean" usebundle => file_absent("${configuration.flag_file}");
}

#######################################################

bundle agent test
{
  methods:
    "ph1"             usebundle => condition_once("first");
    "enable dry-run"  usebundle => set_dry_run_mode("true");
    "ph2"             usebundle => condition_once("second");
    "disable dry-run" usebundle => set_dry_run_mode("false");
    "reserve"         usebundle => reserve_flag("condition_once_third");
    "ph3"             usebundle => condition_once("third");
    "reserve"         usebundle => reserve_flag("condition_once_fourth");
    "re-enable"       usebundle => set_dry_run_mode("true");
    "ph4"             usebundle => condition_once("fourth");
    "re-disable"      usebundle => set_dry_run_mode("true");

}

#######################################################

bundle agent check
{
  classes:
      "ok_class1"  expression => "first.condition_once_first_repaired";
      "ok_class2"  expression => "second.condition_once_second_repaired";
      "ok_class3"  expression => "!third.condition_once_third_kept.!condition_once_third_repaired";
      "ok_class4"  expression => "!fourth.condition_once_fourth_kept.!condition_once_fourth_repaired";

      "ok"         expression => "ok_class1.ok_class2.ok_class3.ok_class4";

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
}
