#####################################################################################
#
# Test that invalid expectation fails, when querying an existing URL and expecting 404,
#  and that a non existing expecting 200
#
#####################################################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("$(this.promise_filename)") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    "nonexistent_url"       string => "https://repository.rudder.io/non_existent";
    "existent_url"          string => "http://www.google.fr";
    "canon_nonexistent_url" string => canonify("${nonexistent_url}");
    "canon_existent_url"    string => canonify("${existent_url}");
    "expected_nonexistent"  string => "200";
    "expected_existent"     string => "404";
    "headers"               string => "";
    "method"                string => "GET";

}

#######################################################

bundle agent test
{

  methods:
    "ph" usebundle => http_request_check_status_headers("${init.method}", "${init.nonexistent_url}", "${init.expected_nonexistent}", "${init.headers}");
    "ph" usebundle => http_request_check_status_headers("${init.method}", "${init.existent_url}", "${init.expected_existent}", "${init.headers}");


}

#######################################################

bundle agent check
{
  classes:
      "non_existent_returns_ok" expression => "http_request_check_status_headers_${init.canon_nonexistent_url}_reached.http_request_check_status_headers_${init.canon_nonexistent_url}_not_ok";
      "existent_returns_ok"     expression => "http_request_check_status_headers_${init.canon_existent_url}_reached.http_request_check_status_headers_${init.canon_existent_url}_not_ok";
      "ok"                      expression => "non_existent_returns_ok.existent_returns_ok";

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";

    !non_existent_returns_ok::
      "Wrong status for ${init.nonexistent_url}";

    !existent_returns_ok::
      "Wrong status for ${init.existent_url}";
}
