#######################################################
#
# Test checking if:
# * a file can be downloaded from a http
# * a file that is already here will not be downloaded
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:

    "tmp"                    string => getenv("TEMP", 1024);

    "source_file"            string => "http://repository.rudder.io/tools/ncf-setup";
    "destination_file"       string => "${tmp}/test_file_from_http_server.txt";
    "destination_file_canon" string => canonify("${destination_file}");

    "existing_file"          string => "${tmp}/test_file_from_http_server2.txt";
    "existing_file_canon"    string => canonify("${existing_file}");


  files:
    "${existing_file}"
      create => "true";

}

#######################################################

bundle agent test
{
  methods:

    # Should download the file
    "ph1" usebundle => file_from_http_server("${init.source_file}", "${init.destination_file}");

    # Should just be OK (no download)
    "ph2" usebundle => file_from_http_server("${init.source_file}", "${init.existing_file}");

}

#######################################################

bundle agent check
{

  classes:

    "ok" and => {
                  # File 1 should be downloaded, and no error should have happened
                  "file_from_http_server_${init.destination_file_canon}_ok",
                  "file_from_http_server_${init.destination_file_canon}_repaired",
                  "!file_from_http_server_${init.destination_file_canon}_error",

                  # File 2 should be OK (already here), not repaired and not in error
                  "file_from_http_server_${init.existing_file_canon}_ok",
                  "!file_from_http_server_${init.existing_file_canon}_repaired",
                  "!file_from_http_server_${init.existing_file_canon}_error"
                };

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";

}
