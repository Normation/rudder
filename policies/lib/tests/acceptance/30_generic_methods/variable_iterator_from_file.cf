#######################################################
#
# Read a file into a slist
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    "tmp"         string => getenv("TEMP", 1024);
    "file"        string => "${tmp}/test";
    "data"        string => 'text1 with${const.n}#comment here${const.n}many${const.n}lines';

  methods:
    "ph1" usebundle => file_ensure_lines_present("${file}", "${data}");
}

#######################################################

bundle agent test
{
  methods:
    "ph1" usebundle => variable_iterator_from_file("prefix", "var1", "${init.file}", "\n", "\s*#.*?(?=\n)");
}

#######################################################

bundle agent check
{
  classes:
    
    "ok_1" expression => "variable_iterator_from_file_var1_kept.!variable_iterator_from_file_var1_repaired.!variable_iterator_from_file_var1_error";
    "ok_length1" expression => strcmp(length("prefix.var1"), "3");
    "ok_3rd_1" expression  => strcmp(nth("prefix.var1", "2"), "lines");

    "ok"  expression => "ok_1.ok_length1.ok_3rd_1";

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
}
