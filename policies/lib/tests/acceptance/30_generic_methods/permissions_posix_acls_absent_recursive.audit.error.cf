#######################################################
#
# Test checking if ACLs are present or not
#
# Create: acl_absent_test/sub_dir1/file1
#         acl_absent_test/file1
#
# Remove ACLs on acl_absent_test/sub_dir1/.
# Add some    on acl_absent_test/sub_dir1/file1
#            and acl_absent_test/file1
#
# Apply permissions_posix_acls_absent in audit mode with recursion on
#         acl_absent_test/sub_dir1
#         acl_absent_test/file1
#         acl_absent_test/*
#         unknown_file
# They should all fail since they have ACLs set
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
      "tmp"   string => getenv("TEMP", 1024);
      "user"  string => "bin";

      "files[1]" string => "acl_absent_test/sub_dir1/.";
      "files[2]" string => "acl_absent_test/sub_dir1/file1";
      "files[3]" string => "acl_absent_test/file1";
      "files[4]" string => "unknown_file";
      "files[5]" string => "acl_absent_test/*";

      "indices"           slist => { "1", "2", "3", "4", "5" };
      "create_indices"    slist => { "1", "2", "3" };
      "effective_indices" slist => { "1", "3", "4", "5" };

      "files_canon[${indices}]" string => canonify("${files[${indices}]}");

      "expected_old_class_prefix[${effective_indices}]" string => canonify("permissions_posix_acls_absent_${tmp}/${files[${effective_indices}]}");
      "expected_class_prefix[${effective_indices}]"     string => canonify("permissions_posix_acls_absent_${tmp}/${files[${effective_indices}]}_true");

  classes:
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";

    pass2::
      # Do not put ACLs on the directory to check if it detects correctly the acls in sub files
      "acls_set_1" expression => returnszero("${paths.setfacl} -b ${tmp}/${files[1]}", "useshell"),
        scope => "namespace";
      "acls_set_2" expression => returnszero("${paths.setfacl} -m u:${user}:rx ${tmp}/${files[2]}", "useshell"),
        scope => "namespace";
      "acls_set_3" expression => returnszero("${paths.setfacl} -m u:${user}:rx ${tmp}/${files[3]}", "useshell"),
        scope => "namespace";

  files:
    any::
      "${tmp}/${files[${create_indices}]}"
        create => "true",
        perms  => mog("555", "root", "0");

  methods:
    "file${effective_indices}" usebundle => define_expected_classes("${expected_old_class_prefix[${effective_indices}]}", "error", "old_${effective_indices}");
    "file${effective_indices}" usebundle => define_expected_classes("${expected_class_prefix[${effective_indices}]}", "error", "${effective_indices}");
}

#######################################################

bundle agent test
{
  methods:
    "enable"  usebundle => set_dry_run_mode("true");
    "ph${init.effective_indices}" usebundle => permissions_posix_acls_absent("${init.tmp}/${init.files[${init.effective_indices}]}", "true");
    "disable" usebundle => set_dry_run_mode("false");
}

#######################################################

bundle agent check
{
  vars:
     "getfacl_output[${init.create_indices}]" string => execresult("${paths.getfacl} --skip-base ${init.tmp}/${init.files[${init.create_indices}]}", "useshell"),
       ifvarclass => "acls_set_${init.create_indices}";

  classes:
     "old_class_${init.effective_indices}" expression => "${define_expected_classes.report_string_old_${init.effective_indices}}";
     "class_${init.effective_indices}"     expression => "${define_expected_classes.report_string_${init.effective_indices}}";

     "old_class_prefix_ok" expression => "old_class_1.old_class_3.old_class_4.old_class_5";
     "class_prefix_ok"     expression => "class_1.class_3.class_4.class_5";

     # We want the output to be not empty on 2 and 3, empty on 1
     "cleanup_1"   expression => strcmp("${getfacl_output[1]}", "");
     "cleanup_2"          not => strcmp("${getfacl_output[2]}", "");
     "cleanup_3"          not => strcmp("${getfacl_output[3]}", "");
     "all_cleanup" expression => "cleanup_1.cleanup_2.cleanup_3";

     "ok"          expression => "all_cleanup.class_prefix_ok.old_class_prefix_ok";

  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
    any::
      "Unexpected ACLs change on ${init.tmp}/${init.files[${init.create_indices}]}"
        ifvarclass => "!cleanup_${init.create_indices}";

      "Missing expected old class for ${init.files[${init.effective_indices}]}"
        ifvarclass => "!old_class_${init.effective_indices}";

      "Missing expected class for ${init.files[${init.effective_indices}]}"
        ifvarclass => "!class_${init.effective_indices}";
}
