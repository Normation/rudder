#######################################################
#
# Test checking if a key-value pair are present in a file 
#
#######################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, default("${this.promise_filename}") };
      version => "1.0";
}

#######################################################

bundle agent init
{
  vars:
    "tmp"         string => getenv("TEMP", 1024);
    "file1"       string => "${tmp}/test1";
    "ref_file1"   string => "${tmp}/ref1";
    "file_canon1" string => canonify("${file1}");

    "file2"       string => "${tmp}/test2";
    "ref_file2"   string => "${tmp}/ref2";
    "file_canon2" string => canonify("${file2}");

    "file3"       string => "${tmp}/test3";
    "ref_file3"   string => "${tmp}/ref3";
    "file_canon3" string => canonify("${file3}");


# First test: ensure that a value is correctly modified
    "base_text1"  string => "# File with lhs=rhs text
JAVA_OPTS=\"-Djava.awt.headless=true -Xmx128m -XX:+UseConcMarkSweepGC\"";

    "ref_text1"   string=> "# File with lhs=rhs text
JAVA_OPTS=\\\"-Djava.awt.headless=true -Xmx1024m\\\"";

    "key1"        string => "JAVA_OPTS";
    "value1"      string => "\"-Djava.awt.headless=true -Xmx1024m\"";
    "separator1"  string => "=";

# Second test: ensure that a key-value is correctly added in a file
    "base_text2"  string => "# File with lhs=rhs text
Key=Value";

    "ref_text2"   string=> "# File with lhs=rhs text
Key=Value
AddedKey=AddedValue";

    "key2"        string => "AddedKey";
    "value2"      string => "AddedValue";
    "separator2"  string => "=";

# Third test: ensure that if key-value is already correct, nothing is done
    "base_text3"  string => "# File with lhs rhs text
Key Value";

    "ref_text3"   string => "# File with lhs rhs text
Key Value";

    "key3"        string => "Key";
    "value3"      string => "Value";
    "separator3"  string => " ";

  commands:
# Initialize test and reference files
      "/bin/echo"
        args    => "\"${ref_text1}\" > \"${ref_file1}\"",
        contain => in_shell;
      "/bin/echo"
        args    => "\"${base_text1}\" > \"${file1}\"",
        contain => in_shell;

      "/bin/echo"
        args    => "\"${ref_text2}\" > \"${ref_file2}\"",
        contain => in_shell;
      "/bin/echo"
        args    => "\"${base_text2}\" > \"${file2}\"",
        contain => in_shell;

      "/bin/echo"
        args    => "\"${ref_text3}\" > \"${ref_file3}\"",
        contain => in_shell;
      "/bin/echo"
        args    => "\"${base_text3}\" > \"${file3}\"",
        contain => in_shell;


}

#######################################################

bundle agent test
{
  methods:
    "modified key" usebundle => file_key_value_present("${init.file1}", "${init.key1}", "${init.value1}", "${init.separator1}");
    "added key"    usebundle => file_key_value_present("${init.file2}", "${init.key2}", "${init.value2}", "${init.separator2}");
    "success key"  usebundle => file_key_value_present("${init.file3}", "${init.key3}", "${init.value3}", "${init.separator3}");

}

#######################################################

bundle agent check
{
  vars:
      "file_diff_test1" string => "/usr/bin/diff \"${init.ref_file1}\" \"${init.file1}\"";
      "file_diff_test2" string => "/usr/bin/diff \"${init.ref_file2}\" \"${init.file2}\"";
      "file_diff_test3" string => "/usr/bin/diff \"${init.ref_file3}\" \"${init.file3}\"";

  classes:
    "file1_correct" 
       expression => returnszero("${file_diff_test1}", "noshell"),
       ifvarclass => canonify("file_key_value_present_${init.file_canon1}_reached");
    "file2_correct"
       expression => returnszero("${file_diff_test2}", "noshell"),
       ifvarclass => canonify("file_key_value_present_${init.file_canon2}_reached");
    "file3_correct"
       expression => returnszero("${file_diff_test3}", "noshell"),
       ifvarclass => canonify("file_key_value_present_${init.file_canon3}_reached");


    "ok_test1"     expression => "file1_correct.file_key_value_present_${init.file_canon1}_repaired.!file_key_value_present_${init.file_canon1}_not_ok";
    "ok_test2"     expression => "file2_correct.file_key_value_present_${init.file_canon2}_repaired.!file_key_value_present_${init.file_canon2}_not_ok";
    "ok_test3"     expression => "file3_correct.file_key_value_present_${init.file_canon3}_kept.!file_key_value_present_${init.file_canon3}_not_ok.!file_key_value_present_${init.file_canon3}_repaired";
    "ok"          and => {"ok_test1","ok_test2","ok_test3"};


  reports:
    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";
    !file1_correct::
      "diff command doesn't returns 0 for file 1 (command: ${file_diff_test1})";
    !file2_correct::
      "diff command doesn't returns 0 for file 2 (command: ${file_diff_test2})";
    !file3_correct::
      "diff command doesn't returns 0 for file 3 (command: ${file_diff_test3})";
    file1_correct.!ok_test1::
      "Generic method return is invalid for first test (expected repaired)";
    file2_correct.!ok_test3::
      "Generic method return is invalid for second test (expected repaired)";
    file2_correct.!ok_test3::
      "Generic method return is invalid for third test (expected kept)";
}
