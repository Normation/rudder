#####################################################################################
# Copyright 2018 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

bundle common acc_path
{
  vars:
    "root" string => getenv("NCF_TESTS_ACCEPTANCE", 1024);
}

body common control
{
      inputs => { "${acc_path.root}/default.cf.sub", "${acc_path.root}/default_ncf.cf.sub", "@{ncf_inputs.default_files}" };
      bundlesequence  => { configuration, initialization, default("${this.promise_filename}") };
      version => "1.0";
}


bundle agent init
{
  # Build packages + a local repo + remove packages used in test
  vars:
    "pwd" string => dirname("${this.promise_filename}");
    "repo_path" string => "${pwd}/repo_rudder_tests";
    "modules_path" string => "${ncf_inputs.ncf_tree}/10_ncf_internals/modules";
    "packages_list" slist => {"zip", "dummy", "rudder_test_repo", "rudder-tests"};
  commands:
    # Since newer zypper version does not support by default local unsigned rpm install
    # we have to import a one time use key that signed the pattern rpm
    "${paths.rpm} --import ${pwd}/Rudder-tests-key";
    "/usr/bin/createrepo ${repo_path}";
    "/usr/bin/zypper rr local";
    "/usr/bin/zypper ar --no-gpgcheck ${repo_path} local";
    "/usr/bin/zypper ref local";

    "/usr/bin/zypper --non-interactive in -t pattern rudder_test_remove";

  methods:
    "package_absent" usebundle => ncf_package("${packages_list}", "", "", "zypper", "absent", "");
}

###############################################################################
#                                 SCENARIO
#________ Basic Tests ________
# -Test get-package-data on a dummy rpm on the repo => repo based return
# -Test get-package-data on a dummy rpm without pattern => error return
# -Test get-package-data on a rpm containing a pattern => ok and return pattenr name
# -Test list-installed method by looking for its output in rpm -qa output
# -Test file-install with rudder-tests-1-64.3.x86_64.rpm which should provide
#       xxxx
# -Test repo-install with rudder_test_repo in specific version
# -Test list-updates with rudder_test_repo, should output the 3-64.3 version
# -Test repo-install with rudder_test_repo without specific version
#   It should install rudder_test_repo, and update/install the dependencies
# -Test remove with the pattern rudder_test_remove, which provides
#   the package dummy_to_not_remove which should not be removed after pattern
#   removal.
#________ Other Tests ________
###############################################################################
bundle agent test
{
  vars:
    pass1::
      "rudder_test_remove_installed" string => execresult("/usr/bin/zypper patterns --installed-only | grep -c rudder_test_remove", "useshell");

  classes:
    "pass1" expression => "any";
    "rudder_test_remove_installed" expression => strcmp("${rudder_test_remove_installed}", "1");

  methods:
  SUSE.pass1::
    # Get-Package-Data
    "any" usebundle => test_package_module_get_package_data("zypper_pattern", "dummy", "PackageType=repo
Name=dummy", "1");
    "any" usebundle => test_package_module_get_package_data("zypper_pattern", "${init.pwd}/dummy-1-0.noarch.rpm", "PackageType=file
File=${init.pwd}/dummy-1-0.noarch.rpm
ErrorMessage: Package pattern name not found", "2");
    "any" usebundle => test_package_module_get_package_data("zypper_pattern", "${init.pwd}/rudder-tests-1-64.3.x86_64.rpm", "PackageType=file
Name=rudder-tests
Version=1-64.3
Architecture=x86_64", "3");

    "any" usebundle => test_package_module_list_installed("zypper_pattern");

    # We assume that packages listed in the pattern will be installed and are available via repo
    # install a pattern from file
    "any" usebundle => test_package_module_file_install("zypper_pattern","File=${init.pwd}/rudder-tests-1-64.3.x86_64.rpm", "1", "rudder-tests");
    "package" usebundle => test_package_module_package_installed("zypper", "Name=zip", "zip_installed");

    # Install a pattern from repo, version specific
    "any" usebundle => test_package_module_repo_install("zypper_pattern","Name=rudder_test_repo
Version=1-64.3", "1");
    "package" usebundle => test_package_module_package_installed("zypper", "Name=dummy
Version=1-0", "dummy_1_0_installed");

    # Check for updates
    "any" usebundle => test_package_module_list_updates("zypper_pattern","Name=rudder_test_repo
Version=3-64.3
Architecture=x86_64", "1");

    # Install the latest pattern version from repo
    "any" usebundle => test_package_module_repo_install("zypper_pattern","Name=rudder_test_repo", "2");
    "package" usebundle => test_package_module_package_installed("zypper","Name=dummy
Version=2-0", "dummy_2_0_installed");

    # Remove the pattern
    pass1.rudder_test_remove_installed::
      "any" usebundle => test_package_module_remove("zypper_pattern", "Name=rudder_test_remove", "1");
      "package" usebundle => test_package_module_package_installed("zypper","Name=dummy_to_not_remove", "dummy_to_not_remove_installed");

}

bundle agent check {
  vars:
    "check_list" slist => {"package_data_ok_1", "package_data_ok_2", "package_data_ok_3", "list_installed_ok", "file_install_ok", "repo_install_ok", "list_updates_ok", "repo_install_latest_ok", "remove_ok"};

  classes:
    SUSE::
      "package_data_ok_1" expression => "get_package_data_zypper_pattern_1_ok";
      "package_data_ok_2" expression => "get_package_data_zypper_pattern_2_ok";
      "package_data_ok_3" expression => "get_package_data_zypper_pattern_3_ok";

      "list_installed_ok" expression => "test_package_module_list_installed_zypper_pattern_ok";

      "file_install_ok" expression => "test_package_module_file_install_zypper_pattern_1_ok.zip_installed";

      "repo_install_ok" expression => "test_package_module_repo_install_zypper_pattern_1_ok.dummy_1_0_installed";

      "list_updates_ok" expression => "test_package_module_list_updates_zypper_pattern_1_ok";

      "repo_install_latest_ok" expression => "test_package_module_repo_install_zypper_pattern_2_ok.dummy_2_0_installed";

      "remove_ok" expression => "test_package_module_remove_zypper_pattern_1_ok.dummy_to_not_remove_installed";

      "ok" expression => "package_data_ok_1.package_data_ok_2.package_data_ok_3.list_installed_ok.file_install_ok.repo_install_ok.list_updates_ok.repo_install_latest_ok.remove_ok";
    !SUSE::
      "ok" expression => "any";

  reports:
    "${check_list}  OK"
      ifvarclass => "${check_list}";
    "${check_list}  X"
      ifvarclass => "!${check_list}";

    ok::
      "$(this.promise_filename) Pass";
    !ok::
      "$(this.promise_filename) FAIL";

}


# Compare the output of the cfengine package module ${module_name} when using the method "package_data" and the input ${input}
# with ${expected_output}. It is raw string matching.
bundle agent test_package_module_get_package_data(module_name, input, expected_output, test_id)
{
  vars:
    "command" string => "${init.modules_path}/packages/${module_name} get-package-data <<EOF
File=${input}
EOF";
    "output" string => execresult("${command}","useshell");

  classes:
    "get_package_data_${module_name}_${test_id}_ok" expression => strcmp("${output}", "${expected_output}"),
      scope => "namespace";
    "print" expression => "get_package_data_${module_name}_${test_id}_ok";
  reports:
    "${output}"
      ifvarclass => "!get_package_data_${module_name}_${test_id}_ok";
}


# Check if the output of the method "list_installed" of the cfengine module ${module_name} is correct.
# It compares the output with a custom one, here it creates a one liner regex per package which should match the output of rpm -qa.
bundle agent test_package_module_list_installed(module_name)
{
  # TODO make non rpm based tests

  vars:
    # Parse the output of the module to get 3 array, use them to build a unique regex per pattern to match the raw output of
    # the packet manager

    "command" string => "${init.modules_path}/packages/${module_name} list-installed < /dev/null #test list-installed";
    "module_output" string => execresult("${command}", "useshell");

    # Ugly way but most likely the only way to "easily" build 3 arrays from the module output, by parsing 3 long strings
    "package_name_raw" string => execresult("/usr/bin/echo \"${module_output}\" | /usr/bin/sed -n '1~3p' | /usr/bin/sed s/Name=//g", "useshell");
    "package_version_raw" string => execresult("/usr/bin/echo \"${module_output}\" | /usr/bin/sed -n '2~3p' | /usr/bin/sed s/Version=//g", "useshell");
    "package_architecture_raw" string => execresult("/usr/bin/echo \"${module_output}\" | /usr/bin/sed -n '3~3p' | /usr/bin/sed s/Architecture=//g", "useshell");

    # Get a list containing the name of each package
    "packages_name" slist => splitstring("${package_name_raw}","\n","99999999999");

    "packages_number" int => length("packages_name");
    "raw_indices" string => execresult("/usr/bin/seq ${packages_number}", "noshell");
    "indices" slist => splitstring("${raw_indices}", "\n", "99999999999");

    # Build the arrays from the previous string
    "packages_names_${indices}" string => execresult("/usr/bin/echo \"${package_name_raw}\" | /usr/bin/sed -n '${indices}p' | /usr/bin/sed s/Name=//g", "useshell");
    "packages_version_${indices}" string => execresult("/usr/bin/echo \"${package_version_raw}\" | /usr/bin/sed -n '${indices}p' | /usr/bin/sed s/Version=//g", "useshell");
    "packages_architecture_${indices}" string => execresult("/usr/bin/echo \"${package_architecture_raw}\" | /usr/bin/sed -n '${indices}p' | /usr/bin/sed s/Architecture=//g", "useshell");


    # Get the packages list from the package manager directly, rpm distro only
    "packages" string => execresult("${paths.rpm} -qa #${module_name}", "useshell");
    "package_regex_${indices}" string => ".*${packages_names_${indices}}-${packages_version_${indices}}.*${packages_architecture_${indices}}";
    "packages_list" slist => splitstring("${packages}", "${const.n}", "99999999999");

  classes:
    # Compare rpm and module outputs
    "packages_match_${indices}" expression => regcmp("${package_regex_${indices}}", "${packages_list}");
    "invalid" not => "packages_match_${indices}";
    "test_package_module_list_installed_${module_name}_ok" not => "invalid",
      scope => "namespace";

  reports:
    "Expected line pattern ${package_regex_${indices}} could not be found in the output of \"rpm -qa\""
      ifvarclass => "!packages_match_${indices}";
}


bundle agent test_package_module_list_updates(module_name, expected_output, test_id)
{
  vars:
    "command" string => "${init.modules_path}/packages/${module_name} list-updates < /dev/null";
    "output"  string => execresult("${command}", "useshell");

  classes:
    "test_package_module_list_updates_${module_name}_${test_id}_ok" expression => strcmp("${expected_output}", "${output}"),
      scope => "namespace";

}


# TODO, unused for the moment
bundle agent test_package_module_list_updates_local(module_name, input, expected_output, test_id)
{
  vars:
    "command" string => "${init.modules_path}/packages/${module_name} list-updates-local < /dev/null";
    "output"  string => execresult("${command}", "useshell");

  classes:
    "test_package_module_list_updates_local_${module_name}_${test_id}_ok" expression => strcmp("${expected_output}", "${output}"),
      scope => "namespace";
}

bundle agent test_package_module_repo_install(module_name, input, test_id)
{
  methods:
    "any" usebundle => test_package_module_install("${module_name}", "repo", "${input}", "${test_id}", "");
}

bundle agent test_package_module_file_install(module_name, input, test_id, expected_name)
{
  methods:
    "any" usebundle => test_package_module_install("${module_name}", "file", "${input}", "${test_id}", "${expected_name}");
}

# The command should never be called with attributes that are not present in the package.
# It is already checked by the get-package-data method for the file source install.
# The package name can be trickier to get since rpm and zypper may differs in the naming
# of patterns for instances.
#
# Uninstall the rpm providing the given pattern via zypper cfengine module.
# Then installs it via the ${module_name} and use custom command (rpm based) to test if the install/version/arch are correct.
#
# It can only handle one packet given in input at a time, with or without arch/version specified.
# This is to limit the complexity of the test. Moreover, Rudder should not use multiple package install.
#
# /!\ It uses other cfengine package module to test the presence of the package.
# ${source} should be "file" or "repo"
bundle agent test_package_module_install(module_name, source, input, test_id, expected_name)
{
  vars:
    "command" string => "${init.modules_path}/packages/${module_name} ${source}-install <<EOF
${input}
EOF";
    # Get info from the rpm file and from the input, the name is mandatory, version and arch are not
    pass1.file::
      "package_path" string  => regex_replace("${input}", "(^(?!File=).*|\n|File=)", "", "gms");
      "package_name" string => execresult("${paths.rpm} --qf \"%{NAME}\\n\" -qp ${package_path}", "useshell");
    pass1.repo::
      "package_path" string  => regex_replace("${input}", "(^(?!Name=).*|\n|Name=)", "", "gms");
      "package_name" string => "${package_path}";
    any::
      "package_name_canonify" string => canonify("${package_name}");

      "package_arch" string  => regex_replace("${input}", "(^(?!Architecture=).*|\n|Architecture=)", "", "gm");
      "package_version" string  => regex_replace("${input}", "(^(?!Version=).*|\n|Version=)", "", "gm");

    zypper_pattern::
      "zypper_name" string => "${expected_name}",
        ifvarclass => "file";
      "zypper_name" string => "${package_path}",
        ifvarclass => "repo";

    pass1::
      "outnull" string => execresult("${command}","useshell"),
        ifvarclass => "ncf_package_absent_${package_name_canonify}_ok";

      # Use zypper to check_${package_name_canonify} if the installation is correct
      "install_check_${package_name_canonify}" string => execresult("/usr/bin/zypper info -t pattern ${zypper_name} | grep Installed | sed 's%Installed\s*:\s*%%g'","useshell"),
        ifvarclass => "ncf_package_absent_${package_name_canonify}_ok";
      # Zypper info provides only the latest version available and not the current installed one....
      "version_check_${package_name_canonify}" string => execresult("/usr/bin/zypper patterns --installed-only | grep \"${zypper_name}\" | awk '{print $5}'", "useshell"),
        ifvarclass => "ncf_package_absent_${package_name_canonify}_ok";
      "arch_check_${package_name_canonify}" string => execresult("/usr/bin/zypper info -t pattern ${zypper_name} | grep Arch | sed 's%Arch\s*:\s*%%g'","useshell"),
        ifvarclass => "ncf_package_absent_${package_name_canonify}_ok";


  classes:
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";

      "repo" expression => strcmp("${source}", "repo");
      "file" expression => strcmp("${source}", "file");

      "zypper_pattern" expression => strcmp("${module_name}", "zypper_pattern");

    pass3::
      "is_installed" expression => regcmp("Yes.*", "${install_check_${package_name_canonify}}");
      "is_version_correct" expression => or(strcmp("${version_check_${package_name_canonify}}", "${package_version}"), strcmp("${package_version}", ""));
      "is_arch_correct" expression => or(strcmp("${arch_check_${package_name_canonify}}", "${package_arch}"), strcmp("${package_arch}", ""));

      "test_package_module_${source}_install_${module_name}_${test_id}_ok" expression => "is_installed.is_version_correct.is_arch_correct.ncf_package_absent_${package_name_canonify}_ok",
        scope => "namespace";


  methods:
    zypper_pattern.pass1.!pass2::
      "package_absent" usebundle => ncf_package("${package_name}", "${package_version}", "${package_arch}", "zypper", "absent", "");

  reports:
   pass3.!is_installed::
     "Package ${package_name} not found installed, found \"${install_check_${package_name_canonify}}\" instead of \"Yes\"";
   pass3.!is_version_correct.is_installed::
     "Package ${package_name} version found incorrect: ${version_check_${package_name_canonify}}";
   pas3.!is_arch_correct.is_installed::
     "Package ${package_name} arch found incorrect: ${arch_check_${package_name_canonify}}";
}

# Call the "${module_name}" method "remove" with the input "${input}" and define a class if the input is not found in the installed packages.
# Can only handle one input at a time for now ie one package to remove
# Comments in the command are there to avoid caching the result when calling them multiple times.
bundle agent test_package_module_remove(module_name, input, test_id)
{
  vars:
    "command" string => "${init.modules_path}/packages/${module_name} remove <<EOF
${input}
EOF # ${test_id}";
    pass1::
      "module_output" string => execresult("${command}", "useshell");
      "package_name" string  => regex_replace("${input}", "(^(?!Name=).*|\n|Name=)", "", "gms");

    pass1.zypper_pattern::
      "is_installed" string => execresult("/usr/bin/zypper patterns --installed-only | grep -c ${package_name} #${test_id}", "useshell");

  classes:
    "pass1" expression => "any";
    "zypper_pattern" expression => strcmp("zypper_pattern", "${module_name}");
    "is_not_installed" expression => strcmp("${is_installed}", "0");
    "test_package_module_remove_${module_name}_${test_id}_ok" expression => "is_not_installed",
      scope => "namespace";

}


# Create the class "${class_name}" if the ${input} is contained in the output of the "list_installed" method of the module
bundle agent test_package_module_package_installed(module_name, input, class_name)
{
  vars:
    # We need a custom comment to avoid hitting the execresult cache...
    "command" string => "${init.modules_path}/packages/${module_name} list-installed < /dev/null #${class_name}";
    "module_output" string => execresult("${command}", "useshell");

  classes:
    "${class_name}" expression => regcmp("[\s\S]*${input}[\s\S]*", "${module_output}"),
      scope => "namespace";
}

