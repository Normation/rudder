# Needed to have a path reference for the tests execution
bundle common ncf_configuration {
  vars:
      "ncf_configuration_basedir" string => dirname("${this.promise_filename}");
}
# Create the list of all the base file to load to test
# It requires the NCF_TREE environment variable to be defined
bundle common ncf_inputs
{
  vars:
      "ncf_tree" string => getenv("NCF_TREE", 1024);

      # Almost same as promises.cf, but only load necessary parts
      "list_compatible_inputs" string => "/bin/sh ${ncf_tree}/10_ncf_internals/list-compatible-inputs";
      "capability_file"        string => "/opt/rudder/etc/agent-capabilities";

      "generic_framework"      string => execresult("${list_compatible_inputs} --capability-file ${capability_file} --agent-version ${sys.cf_version} --ncf-path ${ncf_tree} 10_ncf_internals 20_cfe_basics 30_generic_methods 40_it_ops_knowledge", "useshell");

      "default_files_relative" slist => splitstring("${generic_framework}", "\n", 10000);
      "default_files"         slist => maplist("${ncf_tree}/${this}", default_files_relative);

  classes:
    # OS classes for compatibility
      "SUSE" expression => "sles";
      "SuSE" expression => "sles";
      "suse" expression => "sles";
}

bundle common test_utils {

  vars:
    have_perl::
      "file_perms" string => "${paths.perl} -e 'printf \"%03o\\n\", (stat)[2] & 07777, $_ for @ARGV'";
      "file_owner" string => "${paths.perl} -e 'printf \"%d\\n\", (stat)[4], $_ for @ARGV'";
      "file_group" string => "${paths.perl} -e 'printf \"%d\\n\", (stat)[5], $_ for @ARGV'";
    test_utils_pass2.!have_perl::
      "file_perms" string => "/usr/bin/stat -c %a ${file}";
      "file_owner" string => "/usr/bin/stat -c %u ${file}";
      "file_group" string => "/usr/bin/stat -c %g ${file}";

  classes:
      "have_perl" expression => fileexists("${paths.perl}");
      "test_utils_pass2"     expression => "any";
}

bundle agent define_expected_classes(class_prefix, status, id)
{
  vars:
      "complete_suffix" slist => {"not_kept", "kept", "not_ok", "ok", "not_repaired", "repaired", "failed", "error", "reached"};
      "error_suffix"    slist => {"not_kept", "not_ok", "not_repaired", "failed", "error", "reached"};
      "repaired_suffix" slist => { "ok", "repaired", "not_kept", "reached" };
      "success_suffix"  slist => { "ok", "kept", "not_repaired", "reached" };
      "na_suffix"       slist => { "noop" };

      "expected_string_${id}"   string => join(".", maplist("${class_prefix}_${this}", "@{${status}_suffix}"));
      "unexpected_string_${id}" string => join("|", maplist("${class_prefix}_${this}", difference(complete_suffix, "${status}_suffix")));

      "report_string_${id}"      string => "(${expected_string_${id}}).!(${unexpected_string_${id}})";
      "expected_classes_${id}"   slist => maplist("${class_prefix}_${this}", "@{${status}_suffix}");
      "unexpected_classes_${id}" slist => maplist("${class_prefix}_${this}", difference(complete_suffix, "@{${status}_suffix}"));

  reports:
      "[EXPECTED] ${expected_classes_${id}}";
}

bundle agent execute_testinfra(test_name, class_name, comment)
{
  classes:
      "${class_name}" expression => returnszero("python -m pytest ${ncf_configuration.ncf_configuration_basedir}/spec/localhost/${test_name} #${comment}", "useshell"),
          scope => "namespace";
}

# This bundle should be call when testing a generic method.
# It will call the target bundle with the given arguments,
# check that the resulting classes are correct and define
# a global class "${result_class}_ok" if everything succeed.
#
# name: name of the target bundle
# args: slist containing the target bundle parameter, in
#       correct order.
# status: expected result status, can be: success, error, repaired
# result_class: prefix of the resulting class
bundle agent apply_gm(name, args, status, result_class, mode)
{
  vars:
      "length"  int => length("args");
      "arg0" string => nth("args", "0");
      "arg1" string => nth("args", "1");
      "arg2" string => nth("args", "2");
      "arg3" string => nth("args", "3");
      "arg4" string => nth("args", "4");
      "arg5" string => nth("args", "5");
      "arg6" string => nth("args", "6");
      "arg7" string => nth("args", "7");
      "arg8" string => nth("args", "8");

      "old_class_prefix" string => "${${name}.old_class_prefix}";

      "report_param" string => join("_", args);
      "full_class_prefix" string => canonify("${name}_${report_param}");
      "class_prefix" string => string_head("${full_class_prefix}", "1000");

  classes:
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";

      "audit" expression => strcmp("${mode}", "audit");

      # Dynamic bundle call does not support undefined arg number
      # We have to explicitly define each possibility
      "1_arg" expression => strcmp("${length}", "1");
      "2_arg" expression => strcmp("${length}", "2");
      "3_arg" expression => strcmp("${length}", "3");
      "4_arg" expression => strcmp("${length}", "4");
      "5_arg" expression => strcmp("${length}", "5");
      "6_arg" expression => strcmp("${length}", "6");
      "7_arg" expression => strcmp("${length}", "7");
      "8_arg" expression => strcmp("${length}", "8");

    pass2::
      "old_class_prefix_ok" expression => "${define_expected_classes.report_string_old_class_prefix_${result_class}}";
      "class_prefix_ok"     expression => "${define_expected_classes.report_string_class_prefix_${result_class}}";
      "${result_class}_ok"  expression => "old_class_prefix_ok.class_prefix_ok",
        scope => "namespace";


  methods:
      "expected_classes" usebundle => define_expected_classes("${class_prefix}", "${status}", "class_prefix_${result_class}");
      "expected_classes" usebundle => define_expected_classes("${old_class_prefix}", "${status}", "old_class_prefix_${result_class}");

    audit.pass1.!pass2::
      "enable_${result_class}" usebundle => push_dry_run_mode("true");
    !audit.pass1.!pass2::
      "enable_${result_class}" usebundle => push_dry_run_mode("false");

    1_arg::
      "${result_class}" usebundle => ${name}("${arg0}");
    2_arg::
      "${result_class}" usebundle => ${name}("${arg0}", "${arg1}");
    3_arg::
      "${result_class}" usebundle => ${name}("${arg0}", "${arg1}", "${arg2}");
    4_arg::
      "${result_class}" usebundle => ${name}("${arg0}", "${arg1}", "${arg2}", "${arg3}");
    5_arg::
      "${result_class}" usebundle => ${name}("${arg0}", "${arg1}", "${arg2}", "${arg3}", "${arg4}");
    6_arg::
      "${result_class}" usebundle => ${name}("${arg0}", "${arg1}", "${arg2}", "${arg3}", "${arg4}", "${arg5}");
    7_arg::
      "${result_class}" usebundle => ${name}("${arg0}", "${arg1}", "${arg2}", "${arg3}", "${arg4}", "${arg5}", "${arg6}");
    8_arg::
      "${result_class}" usebundle => ${name}("${arg0}", "${arg1}", "${arg2}", "${arg3}", "${arg4}", "${arg5}", "${arg6}", "${arg7}");

    pass3::
      "disable_${result_class}" usebundle => pop_dry_run_mode();

    pass3::
      "cancel_classes" usebundle => _classes_cancel("${class_prefix}");
      "cancel_classes" usebundle => _classes_cancel("${old_class_prefix}");

  reports:
    pass2.!pass3::
      "Missing expected old class ${define_expected_classes.expected_classes_old_class_prefix_${result_class}}"
        ifvarclass => "!${define_expected_classes.expected_classes_old_class_prefix_${result_class}}";

      "Missing expected class ${define_expected_classes.expected_classes_class_prefix_${result_class}}"
        ifvarclass => "!${define_expected_classes.expected_classes_class_prefix_${result_class}}";

      "Found unexpected old class ${define_expected_classes.unexpected_classes_old_class_prefix_${result_class}}"
        ifvarclass => "${define_expected_classes.unexpected_classes_old_class_prefix_${result_class}}";

      "Found unexpected class ${define_expected_classes.unexpected_classes_class_prefix_${result_class}}"
        ifvarclass => "${define_expected_classes.unexpected_classes_class_prefix_${result_class}}";
}

# This bundle should be call when testing a generic method made with v4
# It will call the target bundle with the given arguments,
# check that the resulting classes are correct and define
# a global class "${result_class}_ok" if everything succeed.
#
# name: name of the target bundle
# args: slist containing the target bundle parameter, in
#       correct order.
# status: expected result status, can be: success, error, repaired
# result_class: prefix of the resulting class
# TODO: It does not yet takes into account the report_id
bundle agent apply_gm_v4(name, args, status, result_class, mode)
{
  vars:
      "length"  int => length("args");
      "arg0" string => nth("args", "0");
      "arg1" string => nth("args", "1");
      "arg2" string => nth("args", "2");
      "arg3" string => nth("args", "3");
      "arg4" string => nth("args", "4");
      "arg5" string => nth("args", "5");
      "arg6" string => nth("args", "6");
      "arg7" string => nth("args", "7");
      "arg8" string => nth("args", "8");

      "class_prefix" string => "${${name}.class_prefix}";

      "report_param" string => join("_", args);
    pass1:: # need to be guarded by a class, and need an extra parameter to be executed at each call
      "uuid"         string => execresult("/usr/bin/uuidgen #${result_class}", "useshell");
      "c_uuid"       string => canonify("${uuid}");
      "d_uuid"       string => canonify("d_${uuid}");
      "r_uuid"       string => canonify("r_${uuid}");

  classes:
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";

      "audit" expression => strcmp("${mode}", "audit");
    pass1.!pass2::
      # Dynamic bundle call does not support undefined arg number
      # We have to explicitly define each possibility
      "1_arg" expression => strcmp("${length}", "1");
      "2_arg" expression => strcmp("${length}", "2");
      "3_arg" expression => strcmp("${length}", "3");
      "4_arg" expression => strcmp("${length}", "4");
      "5_arg" expression => strcmp("${length}", "5");
      "6_arg" expression => strcmp("${length}", "6");
      "7_arg" expression => strcmp("${length}", "7");
      "8_arg" expression => strcmp("${length}", "8");

    pass2::
      "class_prefix_ok"     expression => "${define_expected_classes.report_string_class_prefix_${result_class}}",
              comment => "${c_uuid}";
      "method_id_ok"        expression => "${define_expected_classes.report_string_method_id_${result_class}}",
              comment => "${c_uuid}";
      "${result_class}_ok"  expression => "class_prefix_ok.method_id_ok",
        scope   => "namespace",
        comment => "${c_uuid}";


  methods:
    pass1.!pass2::
      "set_reporting"    usebundle => rudder_reporting_context_v4("${d_uuid}", "${r_uuid}", "default_ncf", "${name}", "${name}", "${uuid}");
      "set_reporting"    usebundle => _method_reporting_context_v4("${name}", "${name}","${uuid}"); # component value is not used for classes
    pass2::
      "expected_classes" usebundle => define_expected_classes("${class_prefix}", "${status}", "class_prefix_${result_class}"),
              comment => "${c_uuid}";
      "expected_classes" usebundle => define_expected_classes("${c_uuid}_0", "${status}", "method_id_${result_class}"),
              comment => "${c_uuid}";


    audit.pass1.!pass2::
      "enable_${result_class}" usebundle => push_dry_run_mode("true"),
                                 comment => "${c_uuid}";
    !audit.pass1.!pass2::
      "enable_${result_class}" usebundle => push_dry_run_mode("false"),
              comment => "${c_uuid}";

    1_arg::
      "${result_class}" usebundle => ${name}("${arg0}");
    2_arg::
      "${result_class}" usebundle => ${name}("${arg0}", "${arg1}");
    3_arg::
      "${result_class}" usebundle => ${name}("${arg0}", "${arg1}", "${arg2}");
    4_arg::
      "${result_class}" usebundle => ${name}("${arg0}", "${arg1}", "${arg2}", "${arg3}");
    5_arg::
      "${result_class}" usebundle => ${name}("${arg0}", "${arg1}", "${arg2}", "${arg3}", "${arg4}");
    6_arg::
      "${result_class}" usebundle => ${name}("${arg0}", "${arg1}", "${arg2}", "${arg3}", "${arg4}", "${arg5}");
    7_arg::
      "${result_class}" usebundle => ${name}("${arg0}", "${arg1}", "${arg2}", "${arg3}", "${arg4}", "${arg5}", "${arg6}");
    8_arg::
      "${result_class}" usebundle => ${name}("${arg0}", "${arg1}", "${arg2}", "${arg3}", "${arg4}", "${arg5}", "${arg6}", "${arg7}");

    pass3::
      "disable_${result_class}" usebundle => pop_dry_run_mode(),
              comment => "${c_uuid}";

    pass3::
      "cancel_classes" usebundle => _classes_cancel("${class_prefix}"),
              comment => "${c_uuid}";

  reports:
    pass2.!pass3::
      "Class prefix failed for ${result_class} with uuid ${c_uuid}"
        if => "!class_prefix_ok";
      "Method id failed for ${result_class} with uuid ${c_uuid}"
        if => "!method_id_ok";

      "Missing method_id class ${define_expected_classes.expected_classes_method_id_${result_class}}"
        if => "!${define_expected_classes.expected_classes_method_id_${result_class}}",
                comment => "${c_uuid}";

      "Missing expected class ${define_expected_classes.expected_classes_class_prefix_${result_class}}"
        if => "!${define_expected_classes.expected_classes_class_prefix_${result_class}}",
                comment => "${c_uuid}";

      "Found unexpected method_id ${define_expected_classes.unexpected_classes_method_id_${result_class}}"
        if => "${define_expected_classes.unexpected_classes_method_id_${result_class}}",
                comment => "${c_uuid}";

      "Found unexpected class ${define_expected_classes.unexpected_classes_class_prefix_${result_class}}"
        if => "${define_expected_classes.unexpected_classes_class_prefix_${result_class}}",
                comment => "${c_uuid}";
}

# Mimic default node properties values
bundle common node
{
  vars:
      "properties" data => '{ "rudder": { "packages": { "installed_cache_expire": 60, "updates_cache_expire": 240 } } }';
}
