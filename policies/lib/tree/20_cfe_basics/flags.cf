#####################################################################################
# Copyright 2018 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# # Flag library
#
# ## Concept
#
# It allows storing a persisting database of flags that will be usable in the agents.
# Flags are somehow like persistent conditions but:
#
# * They have no expiration date
# * They are kept when resetting agent state
#
# This allows use cases like executing a command only once on a system.
#
# The storage format is a json file containing:
#
# ```json
# {
#   "flag_name_1": { "created": "20181008-...." },
#   "flag_name_2": { "created": "20181008-...." }
# }
# ```
#
# (dates are ISO 8601 formatted)
#
# The flag file is by default in `/var/rudder/agent-data/flags.json`, and configurable in `ncf.conf`.
#
# ## Usage
#
# This library provides several methods:
#
# * `reserve_flag` to reserve a flag for 24 hours, this will prevent anyone from reserving it during this period. It can give two possible values:
#   * `ok`: if the flag was correctly reserved
#   * `failed`: if the flag could not be reserved. I can happen if it was reserved by another agent.
#
# * `cancel_flag` to remove a flag reservation. This does not affect already set flags.
#
# * `set_flag` to actually set a permanent flag, requires preceding reservation.
#   If the flag already existed, its date is updated.
#   It can give three possible values:
#   * `ok`: if the flag was correctly set or updated
#   * `failed`: if the flag could not be written
#   * `notreserved`: if the flag was not reserved, in this case it is not set
#
# * `get_flag` to query the current state of a flag. Should not be used unless
#   you really need the state of a flag without reserving it after. It can give two possible values:
#   * `set`: if the flag is set or reserved
#   * `free`: if the flag is free

# A typical use case is:
#
# * At the beginning of the action, try to reserve the flag with `reserve_flag`. If it fails,
#   it means the flag is already there or reserved
# * If it succeeds, start your task (if any)
# * Once the task if done, actually set the flag you reserved using `set_flag` if it succeeded,
#   or cancel the flag with `cancel_flag` if it failed and you want to restart later.
#
# ## Timeout
#
# If a reserved class is not set within 24 hours, the class will disappear and the flag
# will be considered free again. You should have a timeout shorted than this for long-running
# tasks using flag reservation.
#
# ## Note about safety
#
# This library is though to be resilient to race conditions when several
# agents are executing at the same time.
# This is helped by always using reserve_flag to set an "almost atomic" lock on the flag.
#
# Race conditions can then only happen when when running the agent without
# locks (between get_flag and the actual persistent class definition, in reserve_flag).
#

# This is called in 10_ncf_internals/initialization.cf
bundle agent flag_initialization
{
  vars:
      # designed to be incremented when a global unique ID is needed
      "flag_unique.value" string => "1";
}

bundle agent cancel_flag(name)
{
  vars:
      "cname"  string => canonify("${name}");
      "cancel" string => "",
              classes => if_ok_cancel("flag_reserved_${cname}"),
                   if => "flag_reserved_${cname}" ;
}

bundle agent reserve_flag(name)
{
  vars:
      "cname" string => canonify("${name}");
      "flag_unique.value" string => eval("${flag_unique.value}+1", "math", "infix");

  classes:
    pass1::
      "free" expression => strcmp("${current[1]}", "free");
      "reserved" expression => strcmp("${current[1]}", "reserved");
      "set" expression => strcmp("${current[1]}", "set");
      "flag_reserved_${cname}" expression => "any",
             # 1 day
             persistence => "1440",
             scope => "namespace",
             if => "free";

    any::
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";

  methods:
    !pass2::
      "${flag_unique.value}" usebundle => get_flag("${name}"),
                             useresult => "current";

  reports:
    pass3::
      "ok"
        bundle_return_value_index => "1",
                          comment => "${flag_unique.value}",
                               if => "free.flag_reserved_${cname}";
      "failed_set"
        bundle_return_value_index => "1",
                          comment => "${flag_unique.value}",
                               if => "set";
      "failed_reserved"
        bundle_return_value_index => "1",
                          comment => "${flag_unique.value}",
                               if => "reserved";

    pass3.info::
      "Reserved flag '${cname}'"
                          comment => "${flag_unique.value}",
                               if => "free";
      "Could not reserve flag '${cname}', it was already set"
                          comment => "${flag_unique.value}",
                               if => "set";
      "Could not reserve flag '${cname}', it was reserved"
                          comment => "${flag_unique.value}",
                               if => "reserved";
}

bundle agent set_flag(name)
{
  vars:
      "cname" string => canonify("${name}");
      "time" string => strftime("localtime", "%FT%T%z", "${sys.systime}");
      "flag" data => '{ "${cname}": { "created": "${time}" } }';
    pass2::
      "output" data => mergedata("ncf_flags.data", "flag");

  classes:
      # to be used after flag is canceled
      "reserved" expression => "flag_reserved_${cname}";

      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";

  files:
    pass3::
      "${configuration.flag_file}"
        create => "true",
        template_method => "mustache",
        edit_template => "${sys.workdir}/modules/templates/datastate.json.tpl",
        template_data => "@{set_flag.output}",
        action => immediate_ignore_dry_run,
        edit_defaults => no_backup,
        classes => classes_generic("write_ncf_flag_${cname}"),
        if => "flag_reserved_${cname}";

  methods:
      "${flag_unique.value}" usebundle => _read_flags;
      "${flag_unique.value}" usebundle => cancel_flag("${name}"),
                                    if => "write_ncf_flag_${cname}_ok";

  reports:
      "ok"
        bundle_return_value_index => "1",
                          comment => "${flag_unique.value}",
                               if => "write_ncf_flag_${cname}_ok";
      "failed"
        bundle_return_value_index => "1",
                          comment => "${flag_unique.value}",
                               if => "write_ncf_flag_${cname}_failed";
      "notreserved"
        bundle_return_value_index => "1",
                          comment => "${flag_unique.value}",
                               if => "!reserved";

    pass3::
      "Flag '${cname}' (created ${time}) could not be set"
                          comment => "${flag_unique.value}",
                               if => "write_ncf_flag_${cname}_failed";
      "Flag '${cname}' (created ${time}) could not be set as it was not reserved"
                          comment => "${flag_unique.value}",
                               if => "!reserved";

    pass3.info::
      "Flag '${cname}' (created ${time}) was set"
                          comment => "${flag_unique.value}",
                               if => "write_ncf_flag_${cname}_ok";
}

# Should probably not be necessary, unless you need to know the state of the flag
# without reserving it
bundle agent get_flag(name)
{
  vars:
      "cname" string => canonify("${name}");
      "flag_unique.value" string => eval("${flag_unique.value}+1", "math", "infix");

  classes:
      "is_set" expression => isvariable("ncf_flags.data[${cname}]");
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";

  methods:
      "${flag_unique.value}" usebundle => _read_flags;

  reports:
      "set"
        bundle_return_value_index => "1",
                          comment => "${flag_unique.value}",
                               if => "is_set";
      "reserved"
        bundle_return_value_index => "1",
                          comment => "${flag_unique.value}",
                               if => "!is_set.flag_reserved_${cname}";
      "free"
        bundle_return_value_index => "1",
                          comment => "${flag_unique.value}",
                               if => "!is_set.!flag_reserved_${cname}";
    pass3.info::
      "Flag '${cname}' is set"
                          comment => "${flag_unique.value}",
                               if => "is_set";

      "Flag '${cname}' is reserved"
                          comment => "${flag_unique.value}",
                               if => "!is_set.flag_reserved_${cname}";

      "Flag '${cname}' is free"
                          comment => "${flag_unique.value}",
                               if => "!is_set.!flag_reserved_${cname}";
}

# This updates the value of the in-memory flags database. Should not be called from outside.
bundle agent _read_flags
{
  vars:
      "flag_unique.value" string => eval("${flag_unique.value}+1", "math", "infix");

    # Pass3 to avoid reading the json at each pass
    pass3.file_exists::
      "ncf_flags.data" data => readjson("${configuration.flag_file}"),
                    comment => "${flag_unique.value}";
    pass3.!file_exists::
      "ncf_flags.data" data => '{}';

  classes:
      "file_exists" expression => fileexists("${configuration.flag_file}");

      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";
}
