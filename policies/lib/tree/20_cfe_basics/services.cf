#####################################################################################
# Copyright 2013 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

bundle common service_knowledge
{
  classes:
      "systemctl_utility_present"  expression => fileexists("${paths.path[systemctl]}");
      "service_utility_present"    expression => fileexists("${paths.path[service]}");
      "chkconfig_utility_present"  expression => fileexists("${paths.path[chkconfig]}");
      "update_rcd_utility_present" expression => fileexists("${paths.path[update_rc_d]}");
      "initctl_utility_present"    expression => fileexists("/sbin/initctl");

      # AIX service management utilities
      "startsrc_utility_present"   expression => fileexists("/usr/bin/startsrc");
      "lssrc_utility_present"      expression => fileexists("/usr/bin/lssrc");
      "lsitab_utility_present"     expression => fileexists("/usr/sbin/lsitab");
      "chitab_utility_present"     expression => fileexists("/usr/sbin/chitab");

      # Solaris service management utilities
      "svcadm_utility_present"     expression => fileexists("${paths.path[svcadm]}");
      "svcs_utility_present"       expression => fileexists("${paths.path[svcs]}");

      "init_d_directory_present"   expression => isdir("/etc/init.d");
}

# defines ncf_services_${service}_${action}
#
# Standard actions are:
#
# * start
# * stop
# * restart
# * reload (with an alias to refresh)
# * is-active (with an alias to status)
# * is-active-process (in this case, the "service" parameter is the regex to match against process list)
# * enable
# * disable
# * is-enabled
#
# When using service, init.d or systemd, any unknown action will be passed as is to the command
# which allows support for try-restart, force-reload, etc.
#
# This bundle can be seen as a kind of service_bundle, but:
#
# * No concept of state, every call is an action that will be executed. State must be implemented at higher level.
# * More supported actions, services promises are limited to start/stop/enable/disable
# * Special actions (is-*) for checks
#
bundle agent ncf_services(service, action)
{
  vars:
    ###########################################################################
    # All actions
    ###########################################################################

    # These commands (sadly) are not completely static (as on debian 8 and upstart the outcome depends on the service)

    # systemd
    pass1.!is_init_service.systemctl_utility_present::
      "action_command" string => "${paths.path[systemctl]} --no-ask-password ${action} ${service}";
      "reset_command"  string => "${paths.path[systemctl]} --no-ask-password reset-failed ${service}";
      "method"         string => "systemctl";

    # upstart
    pass1.!systemctl_utility_present.is_upstart_service::
      # non-boot
      "upstart_action_cmd[start]"      string => "/sbin/initctl start ${service}";
      "upstart_action_cmd[stop]"       string => "/sbin/initctl stop ${service}";
      "upstart_action_cmd[restart]"    string => "/sbin/initctl restart ${service}";
      "upstart_action_cmd[reload]"     string => "/sbin/initctl reload ${service}";
      "upstart_action_cmd[is-active]"  string => "/sbin/initctl status ${service} 2>&1 | grep -q ' start/'";
      # boot
      "upstart_action_cmd[enable]"     string => "${paths.path[sed]} -i '/^manual/d' /etc/init/${service}.override";
      "upstart_action_cmd[disable]"    string => "${paths.path[echo]} manual >> /etc/init/${service}.override";
      # this one may not be true is it was disabled by another way
      "upstart_action_cmd[is-enabled]" string => "${paths.path[grep]} -q '^manual' /etc/init/${service}.override; test $? -ne 0";
      "action_command"                 string => "${upstart_action_cmd[${action}]}";
      "method"                         string => "upstart";

    # svcadm/svcs
    pass1.!systemctl_utility_present.!is_upstart_service.svcadm_utility_present::
      # non-boot
      "svc_action_cmd[start]"      string => "${paths.path[svcadm]} enable -s -t ${service}";
      "svc_action_cmd[stop]"       string => "${paths.path[svcadm]} disable -s -t ${service}";
      "svc_action_cmd[restart]"    string => "${paths.path[svcadm]} restart -s ${service}";
      "svc_action_cmd[reload]"     string => "${paths.path[svcadm]} refresh -s ${service}";
      "svc_action_cmd[is-active]"  string => "${paths.path[svcs]} -H ${service} | ${paths.path[grep]} '^online'";
      # boot
      "svc_action_cmd[enable]"     string => "${paths.path[svcadm]} enable -s ${service}";
      "svc_action_cmd[disable]"    string => "${paths.path[svcadm]} disable -s ${service}";
      "svc_action_cmd[is-enabled]" string => "${paths.path[svcs]} -l ${service} | ${paths.path[egrep]} '^enabled [ 	]+(true|false \(temporary\))'";
      "action_command"             string => "${svc_action_cmd[${action}]}";
      "method"                     string => "svcadm/svcs";

    # Slackware
    pass1.slackware::
      "method" string => "/etc/rc.d";

    ###########################################################################
    # Boot actions
    ###########################################################################

    # chkconfig
    pass1.is_boot_action.(!systemctl_utility_present|is_init_service).!is_upstart_service.!svcadm_utility_present.chkconfig_utility_present::
      "chkconfig_action_cmd[enable]"     string => "${paths.path[chkconfig]} ${service} on";
      "chkconfig_action_cmd[disable]"    string => "${paths.path[chkconfig]} ${service} off";
      "chkconfig_action_cmd[is-enabled]" string => "${paths.path[chkconfig]} --list ${service} 2>&1 | ${paths.path[grep]} -q -e 3:on -e B:on";
      "action_command"                   string => "${chkconfig_action_cmd[${action}]}";
      "method"                           string => "chkconfig";

    # update-rc.d
    # WARN: "is-enabled" will use /etc/rcX.d/ directly
    pass1.is_boot_action.!is_check_action.(!systemctl_utility_present|is_init_service).!is_upstart_service.!svcadm_utility_present.!chkconfig_utility_present.update_rcd_utility_present::
      "action_command"                 string => "${paths.path[update_rc_d]} ${service} ${action}";
      "method"                         string => "update-rc.d";

    # chitab/lsitab
    pass1.is_boot_action.!systemctl_utility_present.!is_upstart_service.!svcadm_utility_present.!chkconfig_utility_present.!update_rcd_utility_present.chitab_utility_present::
      "chitab_action_cmd[enable]"     string => "/usr/sbin/chitab \"`lsitab -a | grep '^${service}:' | sed 's/\([^:]*\):\([^:]*\):[^:]*:\(.*\)/\1:\2:respawn:\3/'`\"";
      "chitab_action_cmd[disable]"    string => "/usr/sbin/chitab \"`lsitab -a | grep '^${service}:' | sed 's/\([^:]*\):\([^:]*\):[^:]*:\(.*\)/\1:\2:off:\3/'`\"";
      "lsitab_action_cmd[is-enabled]" string => "/usr/sbin/lsitab -a | ${paths.path[egrep]} '^${service}:[0-9]+:(respawn|boot|bootwait|wait|once|initdefault|sysinit):'";
      "action_command"                string => "${lsitab_action_cmd[${action}]}";
      "method"                        string => "lsitab/chitab";

    # /etc/rcX.d/
    pass1.is_boot_action.is_check_action.(!systemctl_utility_present|is_init_service).!is_upstart_service.!svcadm_utility_present.!chkconfig_utility_present.!chitab_utility_present.!slackware::
      "action_command" string => "${paths.path[test]} -f /etc/rc`/sbin/runlevel | ${paths.path[cut]} -d' ' -f2`.d/S??${service}";
      "method"         string => "/etc/rcX.d/";

    # Slackware boot actions are not performed by command, they are implemented in the 'methods' promises

    ###########################################################################
    # Non-boot actions
    ###########################################################################

    # service
    # WARN: Some actions may not be supported by the init script
    pass1.!is_boot_action.(!systemctl_utility_present|is_init_service).!is_upstart_service.!svcadm_utility_present.service_utility_present::
      "action_command" string => "${paths.path[service]} ${service} ${action}",
                           if => "!is_check_action";
      # is-active is mapped to "status"
      "action_command" string => "${paths.path[service]} ${service} status",
                           if => "is_check_action";
      "method"         string => "service";

    # src
    pass1.!is_boot_action.!systemctl_utility_present.!is_upstart_service.!svcadm_utility_present.!service_utility_present.startsrc_utility_present::
      "svc_action_cmd[start]"     string => "/usr/bin/startsrc -s ${service}";
      "svc_action_cmd[stop]"      string => "/usr/bin/stopsrc -s ${service}";
      "svc_action_cmd[restart]"   string => "/usr/bin/stopsrc -s ${service} && until /usr/bin/lssrc -s ${service} | ${paths.grep} -q inoperative; do ${paths.perl} -e 'select(undef,undef,undef,.25)'; done; /usr/bin/startsrc -s ${service_name}";
      "svc_action_cmd[reload]"    string => "/usr/bin/refresh -s ${service}";
      "svc_action_cmd[is-active]" string => "/usr/bin/lssrc -s ${service} | ${paths.path[grep]} -q 'active'";
      "action_command"            string => "${svc_action_cmd[${action}]}";
      "method"                    string => "src";

    # init.d
    # WARN: Some actions may not be supported by the init script
    pass1.!is_boot_action.(!systemctl_utility_present|is_init_service).!is_upstart_service.!svcadm_utility_present.!service_utility_present.!startsrc_utility_present.init_service_exists::
      "action_command" string => "/etc/init.d/${service} ${action}",
                           if => "!is_check_action";
      # is-active is mapped to "status"
      "action_command" string => "/etc/init.d/${service} status",
                           if => "is_check_action";
      "method"         string => "/etc/init.d/";

    # Slackware
    pass1.slackware.!is_boot_action::
     "action_command"  string => "/etc/rc.d/rc.${service} ${action}",
                           if => "!is_check_action";
    # is-active is mapped to "status"
     "action_command"  string => "/etc/rc.d/rc.${service} status",
                           if => "is_check_action";

    ###########################################################################

    any::
      "canonified_service"        string => canonify("${service}");
      "canonified_action"         string => canonify("${action}");
      "canonified_action_command" string => canonify("${action_command}");

      "class_prefix"  string => "ncf_services_${canonified_service}_${canonified_action}";

  defaults:
      # status is an alias to is-active (in systemd, it is not the same thing the only difference is the output, which is not kept anyway)
      "actual_action" string => "is-active",
              if_match_regex => "status";

      # refresh is an alias to reload
      "actual_action" string => "reload",
              if_match_regex => "refresh";

  classes:
      "is_process_action" expression => strcmp("is-active-process", "${action}");

      "is_boot_action"  or => {
                                strcmp("enable", "${action}"),
                                strcmp("disable", "${action}"),
                                strcmp("is-enabled", "${action}")
                              };

      "is_check_action" or => {
                                strcmp("is-active", "${action}"),
                                strcmp("is-active-process", "${action}"),
                                strcmp("is-enabled", "${action}")
                              };
      "is_start_action"         expression => regcmp(".*start$", "${action}");
      "is_systemd_action"       expression => strcmp("systemctl", "${method}");
      "is_systemd_start_action" expression => "is_start_action.is_systemd_action";

      # Due to lack of integration between upstart and init scripts, we have to make different cases.
      "is_upstart_service"         not => returnszero("/sbin/initctl status ${service} 2>&1 | ${paths.path[grep]} -E 'Unknown job|Unable to connect to Upstart' > /dev/null", "useshell"),
                                    if => "ubuntu.initctl_utility_present";

      # Due to compatibility issues when mixing init.d/service and systemctl calls, we use the init script when no systemd unit file is present
      # We only want to activate the init exception when necessary, i.e. when the init script exists and no unit files are present
      #
      # This has no impact for debian system service as their init script already redirect to systemd, but is only necessary for external programs
      # only providing an init script on a systemd system.
      "init_service_exists" expression => fileexists("/etc/init.d/${service}");
      # Skip check if not a service (i.e. has a file extension)
      "has_unit_type"       expression => regcmp(".+\..+", "${service}"),
                                    if => "systemctl_utility_present";
      # Force to use as init service if not a systemd service
      "is_init_service"            not => returnszero("${paths.path[systemctl]} --no-ask-password list-unit-files --type service --all ${service}.service 2>&1 | grep -q '\b1 unit files listed'", "useshell"),
                                    # Only execute when necessary
                                    if => "init_service_exists.!has_unit_type.systemctl_utility_present";

    pass1::
      "method_found"        expression => isvariable("method");

    #####
    # Actual command - for checks
    #####
    pass1.is_check_action.!is_process_action.method_found.!(slackware.is_boot_action)::
      "action_ok" expression => returnszero("${action_command} 2>&1 > /dev/null # ${report_data.method_id}", "useshell"),
                     comment => "${report_data.method_id}";

    any::
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";

  methods:
    pass1.!pass2::
        "${report_data.method_id}_${service}" usebundle => _classes_cancel("${report_data.method_id}");
    #####
    # Actual command - for actions, non using systemd
    #####
    pass2.is_check_action.!is_process_action.method_found.action_ok::
      "${report_data.method_id}" usebundle => _classes_success("${class_prefix}");
      "${report_data.method_id}" usebundle => _classes_success("${report_data.method_id}");

    pass2.is_check_action.!is_process_action.method_found.!action_ok::
      "${report_data.method_id}" usebundle => _classes_failure("${class_prefix}");
      "${report_data.method_id}" usebundle => _classes_failure("${report_data.method_id}");

    # Method not found
    pass2.!method_found::
      "${report_data.method_id}" usebundle => _classes_failure("${class_prefix}");
      "${report_data.method_id}" usebundle => _classes_failure("${report_data.method_id}");

    # Classes for process check
    pass2::
      "${report_data.method_id}" usebundle => _classes_failure("${class_prefix}"),
                                        if => "${class_prefix}_checked_not_ok";
      "${report_data.method_id}" usebundle => _classes_failure("${report_data.method_id}"),
                                        if => "${class_prefix}_checked_not_ok";

      "${report_data.method_id}" usebundle => _classes_success("${class_prefix}"),
                                        if => "${class_prefix}_checked_ok";
      "${report_data.method_id}" usebundle => _classes_success("${report_data.method_id}"),
                                        if => "${class_prefix}_checked_ok";

    # Slackware boot actions
    pass2.slackware.is_boot_action::
      "${report_data.method_id}" usebundle => slackware_boot_services("${service}", "${action}", "${class_prefix}");

  processes:
    ###########################################################################
    # is-active-process action
    ###########################################################################
    is_process_action::
      "${service}"
        process_count => any_count("${class_prefix}_checked_ok"),
              comment => "${report_data.method_id}";

      "${service}"
        restart_class => "${class_prefix}_checked_not_ok",
              comment => "${report_data.method_id}";

  commands:
    # https://bugzilla.redhat.com/show_bug.cgi?id=1016548
    # Required if the service reached restart limit.
    # The usual use-case of Rudder is to fix config and restart service, so we
    # always want to actually do it.
    pass1.is_systemd_start_action::
      "${reset_command}"
        contain => in_shell_and_silent,
        comment => "${report_data.method_id}";

    #####
    # Actual command - for actions
    #####
    # We need to use our own commands: implementation here rather than calling command_execution
    # because of a CFEngine bug (https://dev.cfengine.com/issues/5840) that causes systemctl
    # to fail if it can't find /dev/tty, which is the case unless using no_output => true
    # It also avoids reporting on command_execution for all platforms
    pass2.!is_check_action.!is_process_action.method_found.!(slackware.is_boot_action)::
      "${action_command}"
        contain => in_shell_and_silent,
        classes => classes_generic_two("${class_prefix}", "${report_data.method_id}");

  reports:
    pass3.error.!method_found::
      "${configuration.error} Could not find a supported service management method on this system";

    pass3.info.method_found::
      "${configuration.info} Executing ${action} on ${service} using the ${method} method" comment => "${report_data.method_id}";

    pass3.debug.method_found::
      "${configuration.debug} Executing: '${action_command}'" comment => "${report_data.method_id}";
}

bundle agent slackware_boot_services(service, action, class_prefix)
{
  vars:
    "canon_service"         string => canonify("${service}");

  classes:
    "action_enable"     expression => strcmp("enable", ${action});
    "action_disable"    expression => strcmp("disable", ${action});
    "action_is_enabled" expression => strcmp("is-enabled", ${action});

  methods:
    action_disable::
      "${report_data.method_id}" usebundle => perm_on_file("/etc/rc.d/rc.${service}", "644", "${class_prefix}");

    action_enable::
      "${report_data.method_id}" usebundle => perm_on_file("/etc/rc.d/rc.${service}", "755", "${class_prefix}");
      "${report_data.method_id}" usebundle => service_block_rc_d("${service}", "${class_prefix}");

    action_is_enabled::
      "${report_data.method_id}" usebundle => push_dry_run_mode("true");
      "${report_data.method_id}" usebundle => perm_on_file("/etc/rc.d/rc.${service}", "755", "${canon_service}_init_script_execmod");
      "${report_data.method_id}" usebundle => service_block_rc_d("${service}", "${class_prefix}"),
                                        if => "${canon_service}_init_script_execmod_ok";
      "${report_data.method_id}" usebundle => _classes_copy("${canon_service}_init_script_execmod", "${class_prefix}"),
                                        if => "${canon_service}_init_script_execmod_not_ok";
      "${report_data.method_id}" usebundle => pop_dry_run_mode();
}
