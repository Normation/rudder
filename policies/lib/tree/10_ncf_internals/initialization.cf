#####################################################################################
# Copyright 2016 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# Initialization
# This bundle will make necessary steps to prepare ncf before running any configuration
# It needs to be called just after loading ncf and its configuration.
bundle agent initialization
{

  vars:
      # Reporting context for Rudder
      "report_data.should_report" string => "true";
      # Global counter
      "report_data.index"            int => "0";

  files:
      "${sys.workdir}/modules"
        copy_from         => local_dcp("${this.promise_dirname}/modules"),
        depth_search      => recurse("inf"),
        perms             => m("700"),
        action            => immediate,
        move_obstructions => "true",
        classes           => classes_generic("ncf_internals_modules_update"),
        comment           => "Update the ncf modules in CFEngine's workdir from ncf sources";

  methods:
      # the ncf_init_* classes can be used to get the aggregated result of ncf initialization
      "copy classes for reporting" usebundle => _classes_copy("ncf_internals_modules_update", "ncf_init");
      "init dry_run context" usebundle => dry_run_initialization;
      "init flag context"    usebundle => flag_initialization;
      "init method id"       usebundle => rudder_method_id_reset;

  reports:
    info::
      "${configuration.info} Starting CFEngine ${sys.cf_version} on host ${sys.fqhost} (${sys.flavour} ${sys.arch})";
}

# Copy additional modules from custom path
# The content of the path will be copied in the workdir's module path
# INFO: There is no purge in workdir's module path so you can add additional modules easily.
# WARNING: If synchronizing content that exists in standard path, you will end up with
# file changes at every run
bundle agent additional_modules(path) {
  files:
      "${sys.workdir}/modules"
        copy_from         => local_dcp("${path}/"),
        depth_search      => recurse("inf"),
        perms             => m("700"),
        action            => immediate,
        move_obstructions => "true",
        classes           => classes_generic("ncf_internals_modules_update"),
        comment           => "Update the ncf modules in CFEngine's workdir from custom path";
}
