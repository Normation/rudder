#####################################################################################
# Copyright 2013 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name File from remote source
# @description Ensure that a file or directory is copied from a policy server
# @documentation *Note*: This method uses the agent native file copy protocol, and can only download files from
# the policy server. To download a file from an external source, you can use
# HTTP with the [file_download](#_file_download) method.
# 
# This method requires that the policy server is configured to accept
# copy of the source file from the agents it will be applied to.
#
# You can download a file from the shared files with:
# ```
# /var/rudder/configuration-repository/shared-files/PATH_TO_YOUR_FILE
# ```
#
# @parameter source      Source file (absolute path on the policy server)
# @parameter path        Destination file (absolute path on the target node)
#
# 
# @parameter_rename destination path
# @class_prefix file_from_remote_source
# @class_parameter path
# @agent_support = ["cfengine-community"]

bundle agent file_from_remote_source(source, path)
{
  vars:
      "class_prefix"  string => canonify("file_from_remote_source_${path}");

  classes:
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";

  methods:
    pass3::
      "${report_data.method_id}" usebundle => call_method("file_from_remote_source_recursion");
      "${report_data.method_id}" usebundle => file_from_remote_source_recursion("${source}", "${path}", "0");
      "${report_data.method_id}" usebundle => call_method_classes("${class_prefix}");
      "${report_data.method_id}" usebundle => call_method_classes_caller;
      "${report_data.method_id}" usebundle => call_method_end("file_from_remote_source_recursion");
      "${report_data.method_id}" usebundle => log_rudder_v4("${path}", "Copying ${path} from remote ${source}", "");
}
