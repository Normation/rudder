#####################################################################################
# Copyright 2013 Normation SAS
# Copyright 2016 Janos Mattyasovszky
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name File check if regular 
# @description Checks if a file exists and is a regular file
# @documentation This bundle will define a condition `file_check_regular_${path}_{ok, reached, kept}` if the
# file is a regular_file, or `file_check_regular_${path}_{not_ok, reached, not_kept, failed}` if
# the file is not a regular file or does not exist
#
# @parameter path File name (absolute path on the target node)
#
# 
# @parameter_rename file_name path
# @class_prefix file_check_regular
# @class_parameter path
# @agent_support = ["cfengine-community"]

bundle agent file_check_regular(path)
{

  vars:
      "class_prefix" string => canonify("file_check_regular_${path}");

  classes:
      "pass3"                      expression => "pass2";
      "pass2"                      expression => "pass1";
      "pass1"                      expression => "any";
      "file_exists_and_is_regular" expression => isplain("${path}");

  methods:
    pass3.file_exists_and_is_regular::
      "${report_data.method_id}" usebundle => _classes_success("${report_data.method_id}");
      "${report_data.method_id}" usebundle => _classes_success("${class_prefix}");

    pass3.!file_exists_and_is_regular::
      "${report_data.method_id}" usebundle => _classes_failure("${report_data.method_id}");
      "${report_data.method_id}" usebundle => _classes_failure("${class_prefix}");

    pass3::
      "${report_data.method_id}" usebundle => log_rudder_v4("${path}", "Check if ${path} is a regular file", "");
}
