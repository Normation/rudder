#####################################################################################
# Copyright 2014 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Service restart at a condition
# @description Restart a service using the appropriate method if the specified class is true, otherwise it is considered as not required and success classes are returned.
# @deprecated Use [service_restart](#_service_restart) with a condition
# @documentation See [service_action](#_service_action) for documentation.
#
# @parameter name Name of the service
# @parameter expression Condition expression which will trigger the restart of Service "(package_service_installed|service_conf_changed)" by example
# 
#
# @parameter_rename service_name name
# @parameter_rename trigger_class expression
# @class_prefix service_restart
# @class_parameter name
# @agent_support = ["cfengine-community"]

bundle agent service_restart_if(name, expression)
{
  vars:
      "class_prefix" string => "service_restart_${name}";

  classes:
      "should_restart" expression => "${expression}";

      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";

  methods:
    pass3.should_restart::
      "${report_data.method_id}" usebundle => call_method("ncf_services");
      "${report_data.method_id}" usebundle => ncf_services("${name}", "restart");
      "${report_data.method_id}" usebundle => call_method_classes("${class_prefix}");
      "${report_data.method_id}" usebundle => call_method_classes_caller;
      "${report_data.method_id}" usebundle => call_method_end("ncf_services");
    pass3.!should_restart::
      "${report_data.method_id}" usebundle => _classes_success("${class_prefix}");
      "${report_data.method_id}" usebundle => _classes_success("${report_data.method_id}");
    pass3::
      "${report_data.method_id}" usebundle => log_rudder_v4("${name}", "Restart service ${name} (as '${expression}' is defined)", "");
}
