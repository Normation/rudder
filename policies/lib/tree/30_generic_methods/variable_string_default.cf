#####################################################################################
# Copyright 2017 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Variable string with default
# @description Define a variable from another variable name, with a default value if undefined
# @documentation To use the generated variable, you must use the form `${prefix.name}` with each name replaced with the parameters of this method.
# 
# Be careful that using a global variable can lead to unpredictable content in case of multiple definition, which is implicitly the case when a technique has more than one instance (directive). 
# Please note that only global variables are available within templates.
#
# @parameter prefix The prefix of the variable name
# @parameter name   The variable to define, the full name will be prefix.name
# @parameter source_variable The source variable name
# @parameter default_value   The default value to use if source_variable is not defined
# 
# @parameter_rename variable_prefix prefix
# @parameter_rename variable_name name
# @class_prefix variable_string_default
# @class_parameter name
# @agent_support = ["cfengine-community"]

bundle agent variable_string_default(prefix, name, source_variable, default_value)
{
  vars:
      "class_prefix"      string => canonify("variable_string_default_${name}");
    pass1.source_defined::
      # define the variable within the prefix namespace
      "${prefix}.${name}" string => "${${source_variable}}";
    pass1.!source_defined::
      "${prefix}.${name}" string => "${default_value}";

  classes:
     "source_defined"   expression => isvariable("${source_variable}");
     "variable_defined" expression => isvariable("${prefix}.${name}");
     "pass3"            expression => "pass2";
     "pass2"            expression => "pass1";
     "pass1"            expression => "any";

  methods:
    pass3.!variable_defined::
      "${report_data.method_id}" usebundle => _classes_failure("${report_data.method_id}");
      "${report_data.method_id}" usebundle => _classes_failure("${class_prefix}");

    pass3.variable_defined::
      "${report_data.method_id}" usebundle => _classes_success("${report_data.method_id}");
      "${report_data.method_id}" usebundle => _classes_success("${class_prefix}");

    pass3::
      "${report_data.method_id}" usebundle => log_rudder_v4("${name}", "Set the string ${prefix}.${name} to the value of ${source_variable} with the '${default_value}' default", "");
}
