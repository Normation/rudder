#####################################################################################
# Copyright 2020 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################
#
# @name File Augeas commands
# @description Use Augeas binaries to execute augtool commands and options directly on the agent.
#
# @documentation Augeas is a tool that provides an abstraction layer for all the complexities that turn around editing files with regular expressions.
#
# This method defines a rudder variable from the output of a `augtool` command. The method has in total 4 parameters:
#
# * **variable_prefix**: target variable prefix
# * **variable_name**: target variable name
# * **commands**: augtool script to run
# * **autoload**: boolean to load or not the common augeas lens, default to `true`
#
# Augtool provides bunch of other commands and options that you can use in this generic method such as `match` to print the matches for a specific
# path expression, `span` to print position in input file corresponding to tree, `retrieve` to transform tree into text and `save` to save all pending changes.
# If Augeas isn't installed on the agent, it will produces an error.
#
# This method will execute the **commands** via `augtool`.
# The particular thing you may want to do with this method is using it depending on you needs and in two cases.
#
# #### With autoload
#
# Augeas will accordingly load all files and lenses before executing the commands you have specified since **autoload** is active.
#
# ```
# file_augeas_commands("label","value","print /files/etc/hosts/*/ipaddr[../canonical="server.rudder.local"]","")
# # The variable label.value will be defined as such:
# ${label.value} -> /files/etc/hosts/2/ipaddr = "192.168.2.2"
# ```
#
# ```
# file_augeas_commands("label","value","ls files/etc/ \n print /files/etc/ssh/sshd_config","true")
# # Will define the variable label.value with the list of files availables in /etc and already parsable with augeas,
# # followed by the dump of the sshd_config file, parsed by augeas.
# ```
#
# #### Without autoload
#
# The second case is when you deactivate that option which means that you are specifying **autoload** to `false` and in this case you have to
# load manually your files and lenses in the **commands** parameter by using the `set` augeas command.
# Below is a second example where the lens and file are explicitly set:
#
# ```
# file_augeas_commands("label","value","set /augeas/load/Sshd/lens "Sshd.lns \n set /augeas/load/Sshd/incl "/etc/ssh/sshd_config" \n load \n print /augeas/load/Sshd \n print /augeas/load/Sshd \n print /files/etc/ssh/sshd_config","false")
# ```
#
# @parameter variable_prefix The prefix of the variable name
# @parameter variable_name   The variable to define, the full name will be variable_prefix.variable_name
# @parameter commands        The augeas command(s)
# @parameter autoload        Deactivate the `autoload` option if you don't want augeas to load all the files/lens, it's `true` by default.
# @parameter_constraint autoload "allow_empty_string" : true
# @parameter_constraint autoload "select" : [ "", "true", "false" ]
#
# @class_prefix file_augeas_commands
# @class_parameter variable_name
# @agent_support = ["cfengine-community"]


bundle agent file_augeas_commands(variable_prefix, variable_name, commands, autoload)
{
 vars:
     "old_class_prefix" string => canonify("file_augeas_commands_${variable_name}");
     "promisers" slist => { @{this.callers_promisers}, cf_null }, policy => "ifdefined";
     "class_prefix" string => canonify(join("_", "promisers"));
     "args" slist => {"${variable_prefix}", "${variable_name}", "${commands}", "${autoload}"};

   pass1.!autoload_defined::
     "${variable_prefix}.${variable_name}" string =>  execresult("printf \"${commands}\n\" | ${ncf_paths.path[augtool]} --noautoload","useshell");

   pass1.autoload_defined::
     "${variable_prefix}.${variable_name}" string =>  execresult("printf \"${commands}\n\" | ${ncf_paths.path[augtool]}","useshell");

 defaults:
     "autoload" string => "true", if_match_regex => "";

 classes:
    "pass2" expression => "pass1";
    "pass1";

   pass1::
     "autoload_defined" expression => strcmp("${autoload}", "true");

   pass2::
     "variable_defined" expression => isvariable("${variable_prefix}.${variable_name}");
     "augeas_binaries" expression => fileexists("${ncf_paths.path[augtool]}");

 methods:
    pass2.augeas_binaries.variable_defined::
       "success" usebundle => _classes_success("${old_class_prefix}");
       "success" usebundle => _classes_success("${class_prefix}");
       "report" usebundle => _log("Executing ${commands}", "${old_class_prefix}", "${class_prefix}", @{args});

    pass2.augeas_binaries.!variable_defined::
      "failure" usebundle => _classes_failure("${old_class_prefix}");
      "failure" usebundle => _classes_failure("${class_prefix}");
      "report" usebundle => _log("Augeas binaries does exist, but your request has failed. Executing ${commands}","${old_class_prefix}", "${class_prefix}", @{args});

    pass2.!augeas_binaries::
      "failure" usebundle => _classes_failure("${old_class_prefix}");
      "failure" usebundle => _classes_failure("${class_prefix}");
      "report" usebundle => _log("Augeas binaries does not exist.", "${old_class_prefix}", "${class_prefix}", @{args});

}

