#####################################################################################
# Copyright 2020 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name File from remote template
# @description Build a file from a template on the Rudder server
# @documentation Write a file based on a template on the Rudder server and data available on the node
#
# #### Usage
#
# To use this method, you need to have:
#
# * a template on the Rudder server shared folder
# * data to fill this template
#
# The template needs to be located in the shared-files folder and can be accessed with:
#
# ```
# /var/rudder/configuration-repository/shared-files/PATH_TO_YOUR_FILE
# ```
#
# The data that will be used while expanding the template is the data available in
# the agent at the time of expansion. That means:
#
# * Agent's system variables (`${sys.*}`, ...) and conditions (`linux`, ...)
# * data defined during execution (result conditions of generic methods, ...)
# * conditions based on `condition_` generic methods
# * data defined using `variable_*` generic methods, which allow for example
#   to load data from local json or yaml files.
#
# #### Template types
#
# Supported templating languages:
#
# * *mustache* templates, which are documented in [file_from_template_mustache](#_file_from_template_mustache)
# * *jinja2* templates, which are documented in [file_from_template_jinja2](#_file_from_template_jinja2)
#
# #### Reporting
#
# This method will provide extra `log_warning` message if the template was not updated, but the destination
# file is modified.

# @parameter source_template Source file containing a template to be expanded (absolute path on the server)
# @parameter destination     Destination file (absolute path on the target node)
# @parameter template_type   Template type (jinja2 or mustache)

# @class_prefix file_from_remote_template
# @class_parameter destination
# @agent_support = ["cfengine-community"]
# @parameter_constraint template_type "select" : [ "jinja2", "mustache" ]


bundle agent file_from_remote_template(source_template, destination, template_type)
{
  vars:
      "class_prefix"         string => canonify("file_from_remote_template_${destination}");
      "template_folder"      string => "${sys.workdir}/tmp/templates/file_from_remote_template";
      "template_tmp_file"    string => "${template_folder}/${destination}";
      "inner_class_prefix_1" string => "${report_data.method_id}_copy";
      "inner_class_prefix_2" string => "${report_data.method_id}_render";

  classes:
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";

  methods:
    pass3::
      "${report_data.method_id}" usebundle => call_method("file_from_remote_source");
      "${report_data.method_id}" usebundle => file_from_remote_source("${source_template}", "${template_tmp_file}");
      "${report_data.method_id}" usebundle => call_method_classes("${inner_class_prefix_1}");
      "${report_data.method_id}" usebundle => call_method_end("file_from_remote_source");

      "${report_data.method_id}" usebundle => call_method("file_from_template_type");
      "${report_data.method_id}" usebundle => file_from_template_type("${template_tmp_file}", "${destination}", "${template_type}");
      "${report_data.method_id}" usebundle => call_method_classes("${inner_class_prefix_2}");
      "${report_data.method_id}" usebundle => call_method_end("file_from_template_type");

      # combine both for reporting
      "${report_data.method_id}" usebundle => _classes_combine_two("${inner_class_prefix_1}", "${inner_class_prefix_2}", "${report_data.method_id}");
      "${report_data.method_id}" usebundle => _classes_copy("${report_data.method_id}", "${class_prefix}");
      "${report_data.method_id}" usebundle => log_rudder_v4("${destination}", "Build file ${destination} from template ${source_template}", "");

      # Make a log_warn report if template is not updated but file destination is, and policies were not updated
      "${report_data.method_id}" usebundle => log_rudder_mode("log_warn", "Template expansion changed but the template was not changed - file ${destination} may have been changed on filesystem outside of configuration management", "${destination}", "${class_prefix}"),
                                        if => "!${inner_class_prefix_1}_repaired.${inner_class_prefix_2}_repaired.!config";
}
