#####################################################################################
# Copyright 2015 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Class combine two
# @description Aggregate 2 class prefix into a new one
# @documentation This bundle will define a condition ${destination_prefix}_{kept,repaired,not_ok,ok,reached}
# based on ${first_prefix}_{kept,repaired,not_ok,ok,reached} and ${second_prefix}_{kept,repaired,not_ok,ok,reached}
# keeping the worst outcome
#
# @parameter first_prefix       The first prefix of the source class to combine
# @parameter second_prefix      The second prefix of the source class to combine
# @parameter third_prefix       The third prefix of the source class to combine
# @parameter fourth_prefix      The fourth prefix of the source class to combine
# @parameter destination_prefix The prefix of the destination class
#
# @class_prefix 
# @class_parameter destination_prefix
# @agent_support = ["cfengine-community"]

bundle agent _classes_combine_four(first_prefix, second_prefix, third_prefix, fourth_prefix, destination_prefix)
{
  classes:
      "first_reached"  expression => "${first_prefix}_reached";
      "second_reached" expression => "${second_prefix}_reached";
      "third_reached"  expression => "${third_prefix}_reached";
      "fourth_reached" expression => "${fourth_prefix}_reached";

    destination_defined.first_reached.second_reached.third_reached.fourth_reached::
      "${destination_prefix}_ok"               expression => "${first_prefix}_ok.${second_prefix}_ok.${third_prefix}_ok.${fourth_prefix}_ok",
                                               scope => "namespace";

      "${destination_prefix}_kept"             expression => "${first_prefix}_kept.${second_prefix}_kept.${third_prefix}_kept.${fourth_prefix}_kept",
                                               scope => "namespace";

      "promise_kept_${destination_prefix}"     expression => "${destination_prefix}_kept",
                                               scope => "namespace";

      "${destination_prefix}_repaired"         expression => "(${first_prefix}_repaired.${second_prefix}_ok.${third_prefix}_ok.${fourth_prefix}_ok)|(${first_prefix}_ok.${second_prefix}_repaired.${third_prefix}_ok.${fourth_prefix}_ok)|(${first_prefix}_ok.${second_prefix}_ok.${third_prefix}_repaired.${fourth_prefix}_ok)|(${first_prefix}_ok.${second_prefix}_ok.${third_prefix}_ok.${fourth_prefix}_repaired)",
                                               scope => "namespace";

      "promise_repaired_${destination_prefix}" expression => "${destination_prefix}_repaired",
                                               scope => "namespace";

      "${destination_prefix}_reached"          expression => "${first_prefix}_reached|${second_prefix}_reached|${third_prefix}_reached|${fourth_prefix}_reached",
                                               scope => "namespace";

      "${destination_prefix}_failed"           expression => "${first_prefix}_failed|${second_prefix}_failed|${third_prefix}_failed|${fourth_prefix}_failed",
                                               scope => "namespace";

      "repair_failed_${destination_prefix}"    expression => "${destination_prefix}_failed",
                                               scope => "namespace";

      "${destination_prefix}_denied"           expression => "${first_prefix}_denied|${second_prefix}_denied|${third_prefix}_denied|${fourth_prefix}_denied",
                                               scope => "namespace";

      "repair_denied_${destination_prefix}"    expression => "${destination_prefix}_denied",
                                               scope => "namespace";

      "${destination_prefix}_timeout"          expression => "${first_prefix}_timeout|${second_prefix}_timeout|${third_prefix}_timeout|${fourth_prefix}_timeout",
                                               scope => "namespace";

      "repair_timeout_${destination_prefix}"   expression => "${destination_prefix}_timeout",
                                               scope => "namespace";

      "${destination_prefix}_error"            expression => "${first_prefix}_error|${second_prefix}_error|${third_prefix}_error|${fourth_prefix}_error",
                                               scope => "namespace";

      "${destination_prefix}_not_ok"           expression => "!${destination_prefix}_ok",
                                               scope => "namespace";

      "${destination_prefix}_not_kept"         expression => "!${destination_prefix}_kept",
                                               scope => "namespace";

      "${destination_prefix}_not_repaired"     expression => "!${destination_prefix}_repaired",
                                               scope => "namespace";

  classes:
    # this line will not be evaluated by cfengine if destination_prefix contains a variable that does not exist
    # and it will always be evaluated to true otherwise
    "destination_defined" expression => strcmp("${destination_prefix}", "${destination_prefix}");
    "destination_not_empty"      not => strcmp("${destination_prefix}", "");
    "destination_exists"         and => { "destination_defined", "destination_not_empty" };

  methods:
    !first_reached::
      "no first"    usebundle => _classes_combine_three("${second_prefix}", "${third_prefix}", "${fourth_prefix}", "${destination_prefix}");

    first_reached.!second_reached::
      "no second"   usebundle => _classes_combine_three("${first_prefix}", "${third_prefix}", "${fourth_prefix}", "${destination_prefix}");

    first_reached.second_reached.!third_reached::
      "no third"    usebundle => _classes_combine_three("${first_prefix}", "${second_prefix}", "${fourth_prefix}", "${destination_prefix}");

    first_reached.second_reached.third_reached.!fourth_reached::
      "no fourth"   usebundle => _classes_combine_three("${first_prefix}", "${second_prefix}", "${third_prefix}", "${destination_prefix}");

}
