#####################################################################################
# Copyright 2017 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name User password hash
# @description Ensure a user's password. Password must respect `$id$salt$hashed` format
#  as used in the UNIX /etc/shadow file.
# @documentation User must exists, password must be pre-hashed. Does not handle
#   empty password accounts. See UNIX /etc/shadow format.
#   entry example: `$1$jp5rCMS4$mhvf4utonDubW5M00z0Ow0`
#
#   An empty password will lead to an error and be notified.
#
# @parameter login User login
# @parameter password User hashed password
#
# @class_prefix user_password_hash
# @class_parameter login
# @agent_support = ["cfengine-community"]

bundle agent user_password_hash(login, password)
{
  vars:
      "old_class_prefix"  string => canonify("user_password_hash_${login}");
      "args"               slist => { "${login}" };
      "report_param"      string => join("_", args);
      "full_class_prefix" string => canonify("user_password_hash_${report_param}");
      "class_prefix"      string => string_head("${full_class_prefix}", "1000");

      # number of days since epoch
      "now"               int => now();
      "epoch_days_str" string => eval("${now}/86400", math, infix);
      "epoch_days"        int => int("${epoch_days_str}");

  classes:
      "user_exists" expression => userexists("${login}");

      # with variables that are not unique, the emptyness detection is quite tricky
      # either the variable is not defined, or the variable value is ""
      "password_not_empty" not => strcmp("", "${password}");
      "args_defined" expression => "password_not_empty.user_exists";


  files:

    aix.args_defined::
      # On AIX, if password is supplied and user must exist, then the second field needs to be a ! to allow login
      "/etc/passwd"
        create        => "false",
        edit_line     => set_colon_field("${login}", "2", "!"),
        edit_defaults => ncf_empty_select("false"),
        classes       => classes_generic("${old_class_prefix}_aix_etc_shadow");

    !aix.args_defined::
      # Define password when user has already been created
      "/etc/shadow"
        create        => "false",
        edit_line     => set_user_field("${login}", 2, "${password}"),
        edit_defaults => ncf_empty_select("false"),
        classes       => classes_generic_two("${old_class_prefix}", "${class_prefix}");


      # set the last update date if password has been updated
      "/etc/shadow"
        create        => "false",
        edit_line     => set_user_field("${login}", 3, "${epoch_days}"),
        edit_defaults => ncf_empty_select("false"),
        if            => "${old_class_prefix}_repaired";

    aix.args_defined::
      "/etc/security/passwd"
        create        => "false",
        edit_line     => ncf_ensure_AIX_password("${login}", "${password}"),
        edit_defaults => ncf_empty_select("false"),
        classes       => classes_generic("${old_class_prefix}_aix_etc_security_passwd");

      # set the last update date if password has been updated
      "/etc/security/passwd"
        create        => "false",
        edit_line     => ncf_edit_lastupdate_AIX_password("${login}"),
        edit_defaults => ncf_empty_select("false"),
        if            => "${old_class_prefix}_repaired";

  methods:
    aix::
      "merge_classes"
        usebundle => _classes_combine_two("${old_class_prefix}_aix_etc_shadow", "${old_class_prefix}_aix_etc_security_passwd", "${old_class_prefix}");
    !args_defined::
      "error" usebundle => _classes_failure("${old_class_prefix}");
      "error" usebundle => _classes_failure("${class_prefix}");

      "report_error"
        usebundle => _log_v3("User ${login} does not exist. Setting password for user ${login}", "${login}", "${old_class_prefix}", "${class_prefix}", @{args}),
          ifvarclass => "!user_exists";

      "report_error"
        usebundle => _log_v3("Password entry empty, setting user ${login} password", "${login}", "${old_class_prefix}", "${class_prefix}", @{args}),
          ifvarclass => "!password_not_empty";

    args_defined::
      "report_success"
        usebundle => _log_v3("The setting of user ${login} password ", "${login}", "${old_class_prefix}", "${class_prefix}", @{args}),
          ifvarclass => "(${old_class_prefix}_reached|${class_prefix}_reached).password_not_empty";
}

