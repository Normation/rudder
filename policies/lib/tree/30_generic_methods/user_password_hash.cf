#####################################################################################
# Copyright 2017 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name User password hash
# @description Ensure a user's password. Password must respect `$id$salt$hashed` format
#  as used in the UNIX /etc/shadow file.
# @documentation User must exists, password must be pre-hashed. Does not handle
#   empty password accounts. See UNIX /etc/shadow format.
#   entry example: `$1$jp5rCMS4$mhvf4utonDubW5M00z0Ow0`
#
#   An empty password will lead to an error and be notified.
#
# @parameter login User login
# @parameter password User hashed password
#
# @class_prefix user_password_hash
# @class_parameter login
# @agent_support = ["cfengine-community"]

bundle agent user_password_hash(login, password)
{
  vars:
      "class_prefix" string => canonify("user_password_hash_${login}");

      # number of days since epoch
      "now"               int => now();
      "epoch_days_str" string => eval("${now}/86400", math, infix);
      "epoch_days"        int => int("${epoch_days_str}");

  classes:
      "pass3"       expression => "pass2";
      "pass2"       expression => "pass1";
      "pass1"       expression => "any";
      "user_exists" expression => userexists("${login}");

      # with variables that are not unique, the emptiness detection is quite tricky
      # either the variable is not defined, or the variable value is ""
      "password_not_empty"                       not => strcmp("", "${password}");
      "user_exist_and_password_not_empty" expression => "password_not_empty.user_exists";

  files:
    user_exist_and_password_not_empty::
      # Define password when user has already been created
      "/etc/shadow"
               create => "false",
            edit_line => set_user_field("${login}", 2, "${password}"),
        edit_defaults => ncf_empty_select("false"),
              classes => classes_generic_two("${report_data.method_id}", "${class_prefix}");

      # set the last update date if password has been updated
      "/etc/shadow"
               create => "false",
            edit_line => set_user_field("${login}", 3, "${epoch_days}"),
        edit_defaults => ncf_empty_select("false");

  methods:
    pass3.!user_exist_and_password_not_empty::
      "${report_data.method_id}" usebundle => _classes_failure("${class_prefix}");

      "${report_data.method_id}" usebundle => log_rudder_v4("${login}", "User ${login} does not exist. Can't set user ${login} password", ""),
                                        if => "!user_exists.password_not_empty";

      "${report_data.method_id}" usebundle => log_rudder_v4("${login}", "Password parameter empty. Can't set user ${login} uid to ${uid}", ""),
                                        if => "user_exists.!password_not_empty";

      "${report_data.method_id}" usebundle => log_rudder_v4("${login}", "Password parameter empty and user ${login} does not exist. Can't set user ${login} uid to ${uid}", ""),
                                        if => "!user_exists.!password_not_empty";

    pass3.user_exist_and_password_not_empty::
      "${report_data.method_id}" usebundle => log_rudder_v4("${login}", "User ${login} password definition", "");

}

