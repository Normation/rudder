#####################################################################################
# Copyright 2017 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name File key-value present with option
# @description Ensure that the file contains a pair of "key separator value", with options on the spacing around the separator
# @documentation Edit (or create) the file, and ensure it contains an entry key -> value with arbitrary separator between the key and its value.
# If the key is already present, the method will change the value associated with this key.
#
# @parameter path File name to edit (absolute path on the target node)
# @parameter key Key to define
# @parameter value Value to define
# @parameter separator Separator between key and value, for example "=" or " " (without the quotes)
# @parameter option Option for the spacing around the separator: strict, which prevent spacing (space or tabs) around separators, or lax which accepts any number of spaces around separators
# @parameter_constraint separator "allow_whitespace_string" : true
# @parameter_constraint option "select" : [ "strict", "lax" ]
#
#
# @parameter_rename file path
# @class_prefix file_key_value_present
# @class_parameter path
# @agent_support = ["cfengine-community", "dsc"]

bundle agent file_key_value_present_option(path, key, value, separator, option)
{
  vars:
      "old_class_prefix" string => canonify("file_key_value_present_${path}");
      "args"              slist => { "${path}", "${key}", "${value}","${separator}", "${option}" };

      "report_param"      string => join("_", args);
      "full_class_prefix" string => canonify("file_key_value_present_${report_param}");
      "class_prefix"      string => string_head("${full_class_prefix}", "1000");

      "updated_full_class_prefix" string => canonify("file_key_value_present_option_${report_param}");
      "updated_class_prefix"      string => string_head("${updated_full_class_prefix}", "1000");

      "keys[${key}]" string => "${value}";

    pass1.strict_spacing::
      "report_message" string => "Ensure line in format key${separator}value in ${path}";

    pass1.!strict_spacing::
      "report_message" string => "Ensure line in format key ${separator} value in ${path}";

  classes:
      "strict_spacing" expression => strcmp("option", "strict");

      "pass2" expression => "pass1";
      "pass1" expression => "any";

  files:
      "${path}"
        create        => "true",
        edit_line     => ncf_maintain_keys_values_option("file_key_value_present_option.keys", "${separator}", "${option}"),
        edit_defaults => ncf_empty_select("false"),
        classes       => classes_generic_two("${old_class_prefix}", "${class_prefix}"),
        # This comment is necessary, see https://www.rudder-project.org/redmine/issues/10153
        comment       => "Editing file ${path} to set ${key}${separator}${value}";

  methods:
    pass2::
      "sanitize"          usebundle => _classes_sanitize("${class_prefix}");
      "sanitize"          usebundle => _classes_sanitize("${old_class_prefix}");
      "copy_class_prefix" usebundle => _classes_copy("${class_prefix}", "${updated_class_prefix}");
      "report"            usebundle => _log_v3("Ensure line in format key${separator}value in ${path}", "${path}", "${old_class_prefix}", "${class_prefix}", @{args});
}
