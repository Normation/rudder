#####################################################################################
# Copyright 2013 Normation SAS
# Copyright 2016 Janos Mattyasovszky
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name         File check is symlink to
# @description  Checks if first file is symlink to second file
# @documentation This bundle will define a condition `file_check_symlinkto_${target}_{ok, reached, kept}` if the file `${path}`
# is a symbolic link to `${target}`, or `file_check_symlinkto_${target}_{not_ok, reached, not_kept, failed}` if
# if it is not a symbolic link, or any of the files does not exist. The symlink's path is resolved to the 
# absolute path and checked against the target file's path, which must also be an absolute path.
#
# @parameter path Symbolic link (absolute path on the target node)
# @parameter target Target file (absolute path on the target node)
# @deprecated Use [file_symlink_present](#_file_symlink_present) with policy_mode_override set to audit instead
# 
# @parameter_rename symlink path
# @class_prefix file_check_symlinkto
# @class_parameter path
# @agent_support = ["cfengine-community"]

bundle agent file_check_symlinkto(path, target)
{
  vars:
      "class_prefix" string => canonify("file_check_symlinkto_${path}");
      "real_path"    string => execresult("/bin/readlink -f \"${path}\"", "noshell");

  classes:
      "pass3"           expression => "pass2";
      "pass2"           expression => "pass1";
      "pass1"           expression => "any";
      "file_exists"     expression => fileexists("${target}");
      "symlink_to_file" expression => strcmp("${real_path}", "${target}");
      "is_symlink"      expression => islink("${path}");
      "is_ok"           expression => "file_exists.is_symlink.symlink_to_file";

  methods:
    pass3.is_ok::
      "${report_data.method_id}" usebundle => _classes_success("${report_data.method_id}");
      "${report_data.method_id}" usebundle => _classes_success("${class_prefix}");
    pass3.!is_ok::
      "${report_data.method_id}" usebundle => _classes_failure("${report_data.method_id}");
      "${report_data.method_id}" usebundle => _classes_failure("${class_prefix}");

    pass3::
      "${report_data.method_id}" usebundle => log_rudder_v4("${path}", "Check if ${path} points to ${target}", "");
}
