#####################################################################################
# Copyright 2020 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################
#
# @name Variable string from Augeas
# @description Use Augeas binaries to call Augtool commands and options to get a node label's value.
#
# @documentation Augeas is a tool that provides an abstraction layer for all the complexities that turn around editing files with regular expressions.
# It's a tree based hierarchy tool, that handle system configuration files where you can securely modify your files. To do so you have to provide
# the path to the node label's value.
#
# This method aims to use `augtool` to extract a specific information from a configuration file into a rudder variable.
# If Augeas is not installed on the agent, or if it fails to execute, it will produces an error.
#
# * **variable prefix**: target variable prefix
# * **variable name**: target variable name
# * **path**: augeas node path, use to describe the location of the target information we want to extract
# * **lens**: augeas lens to use, optional
# * **file**: absolute file path to target, optional
#
# Actually there are two ways you can use this method:
#
# * Either by providing the augeas **path** to the node's label and let **lens** and **file** empty.
# ** this way augeas will load the common files and lens automatically
# * Or by using a given **file** path and a specific **lens**.
# ** better performances since only one lens is loaded
# ** support custom lens, support custom paths
#
# This mechanism is the same as in the `file_augeas_set` method.
#
# #### With autoload
#
# Let's consider that you want to obtain the value of the ip address of the first line in the `/etc/hosts`:
#
# (Note that the `label` and `value` parameters mentioned are naming examples of **variable prefix** and **variable name**, the augeas
# **path** `/etc/hosts/1/ipaddr`
# represents the `ipaddr` node label's value (in the augeas mean) in the first line of the file `/etc/hosts`).
#
# ```
# variable_string_from_augeas("label","value","/etc/hosts/1/ipaddr", "", "");
# ```
#
# #### Without autoload
#
# Here we want the same information as in the first example, but we will force the lens to avoid loading unnecessary files.
#
# ```
# variable_string_from_augeas("label","value","/etc/hosts/1/ipaddr","Hosts","/etc/hosts");
# ```
#
# #### Difference with `file augeas command`
#
# This method is very similar to the `file augeas command` one, both execute an `augtool` command an dump its output in a rudder variable.
# But their goal is really different:
#
# * This one will parse the output of the augeas `print` that we want to make it directly usable, but will be less flexible in its input.
# * The `file augeas command` offers much more possibilities to execute an augeas command to modify a file, but the output will be unparsed and most likely
#   unusable as a rudder variable, expect to dump an error or configuration somewhere.
#
# @parameter prefix The prefix of the variable name
# @parameter name   The variable to define, the full name will be prefix.name
# @parameter path            The path to the file and node label
# @parameter lens            The lens specified by the user in case they want to load a specified lens associated with its file
# @parameter file            The absolute path to the file specified by the user in case they want to load a specified file associated with its lens
# @parameter_constraint file "allow_empty_string" : true
# @parameter_constraint lens "allow_empty_string" : true
# @parameter_rename variable_prefix prefix
# @parameter_rename variable_name name
# @class_prefix variable_string_from_augeas
# @class_parameter name
# @agent_support = ["cfengine-community"]


bundle agent variable_string_from_augeas(prefix, name, path, lens, file)
{
 vars:
     "old_class_prefix" string => canonify("variable_string_from_augeas_${name}");
     "promisers" slist => { @{this.callers_promisers}, cf_null }, policy => "ifdefined";
     "class_prefix" string => canonify(join("_", "promisers"));
     "args" slist => {"${prefix}", "${name}", "${path}", "${lens}", "${file}"};


   pass1.file_defined::
     "aug_cmd" string => "printf \"set /augeas/load/${lens}/lens \"${lens}.lns\" \n set /augeas/load/${lens}/incl \"${file}\" \n load \n get /files${path}\n\" | ${ncf_paths.path[augtool]} --noautoload";

   pass1.!file_defined::
     "aug_cmd" string => "printf \"get /files${path}\n\" | ${ncf_paths.path[augtool]}";

   pass1::
     "case" string => execresult("${aug_cmd}", "useshell");
     "data" data => "{}";
     "data" data => data_regextract("= (.*)", "$(case)");
     "${prefix}.${name}" string => "${data[1]}";

 classes:
    "pass2" expression => "pass1";
    "pass1";

   pass2::
     "variable_defined" expression => isvariable("data[1]");
     "augeas_binaries" expression => fileexists("${ncf_paths.path[augtool]}");

   pass1::
     "file_defined" expression => not(strcmp("${file}",""));

 methods:
    pass2.augeas_binaries.variable_defined::
       "success" usebundle => _classes_success("${old_class_prefix}");
       "success" usebundle => _classes_success("${class_prefix}");
       "report" usebundle => _log("Getting the node value from ${path}", "${old_class_prefix}", "${class_prefix}", @{args});

    pass2.augeas_binaries.!variable_defined::
      "failure" usebundle => _classes_failure("${old_class_prefix}");
      "failure" usebundle => _classes_failure("${class_prefix}");
      "report" usebundle => _log("Augeas binaries does exist, but your request has failed. Getting the node value from ${path}","${old_class_prefix}", "${class_prefix}", @{args});

    pass2.!augeas_binaries::
      "failure" usebundle => _classes_failure("${old_class_prefix}");
      "failure" usebundle => _classes_failure("${class_prefix}");
      "report" usebundle => _log("Augeas binaries does not exist.", "${old_class_prefix}", "${class_prefix}", @{args});

}
