#####################################################################################
# Copyright 2020 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name User group
# @description Define secondary group for a user
# @documentation Ensure that a user is within a group
#
# #### Behavior
#
# Ensure that the user belongs in the given secondary group (non-exclusive)
#
# ##### Parameters
#
# `login`      : the user login
# `group_name`: secondary group name the user should belong to (non-exclusive)
#
# #### Examples
#
# To ensure that user `test` belongs in group `dev`
#
# ```
#  user_group("test", "dev")
# ```
# Note that it will make sure that user test is in group dev, but won't remove it
# from other groups it may belong to
#
# @parameter login           User login
# @parameter group_name     Secondary group name for the user
#
#
# @parameter_rename user login
# @class_prefix user_group
# @class_parameter login
# @agent_support = ["cfengine-community"]

bundle agent user_group(login, group_name) {
  vars:
      "old_class_prefix"      string => canonify("user_group_${login}");

      "args"                   slist => { "${login}", "${group_name}" };
      "report_param"          string => join("_", args);
      "full_class_prefix"     string => canonify("user_group_${report_param}");
      "class_prefix"          string => string_head("${full_class_prefix}", "1000");

      "add_user_to_group_cmd"   string => "${paths.usermod} -a -G ${group_name} ${login}";
      "full_inner_class_prefix" string => canonify("command_execution_${add_user_to_group_cmd}");
      "inner_class_prefix"      string => string_head("${full_inner_class_prefix}", "1000");


    user_exists.group_exists::
      "groups_test"           string => execresult("${ncf_paths.path[id]} -Gn ${login} # with ${group_name}", "useshell");
      "current_groups"         slist => string_split("${groups_test}", " ", "999999");

    # if we needed to change the group, check groups afterwards
    pass2.!within_group::
      "groups_test_post_change"   string => execresult("${ncf_paths.path[id]} -Gn ${login} #post change with ${group_name}", "useshell"),
                                      if => "${inner_class_prefix}_reached";
      "current_groups_post_change" slist => string_split("${groups_test_post_change}", " ", "999999"),
                                      if => "${inner_class_prefix}_reached";
      
  classes:
      "user_exists"   expression => userexists("${login}");
      "group_exists"  expression => groupexists("${group_name}");

      "should_report"     expression => "${report_data.should_report}";

    pass1.!pass2::
      # check if the required group is in the current groups
      "within_group"  expression => strcmp("${current_groups}", "${group_name}");
  
  
    pass2::
      # group corrected?
      "group_corrected" expression => strcmp("${current_groups_post_change}", "${group_name}"),
                                if => "${inner_class_prefix}_reached";
    any::
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";

  methods:
    pass2.!within_group.user_exists.group_exists::
     "disable_reporting_${full_class_prefix}"
                usebundle => disable_reporting;

      "adduser" usebundle => command_execution("${add_user_to_group_cmd}");
      "reenable_reporting_${full_class_prefix}"
                usebundle => enable_reporting,
                       if => "should_report";


    pass3.within_group::
      "success" usebundle => _classes_success("${old_class_prefix}");
      "success" usebundle => _classes_success("${class_prefix}");


    pass3.(!user_exists|!group_exists)::
      "error" usebundle => _classes_failure("${old_class_prefix}");
      "error" usebundle => _classes_failure("${class_prefix}");

      "report_failure"
        usebundle => _log_v3("User ${login} or group ${group_name} don't exist,", "${login}", "${old_class_prefix}", "${class_prefix}", @{args});

      
    pass3.user_exists.group_exists.!within_group::
      # error if inner_class_prefix_error or not group_corrected
      "error" usebundle => _classes_failure("${old_class_prefix}"),
                     if => "${inner_class_prefix}_error|!group_corrected";
      "error" usebundle => _classes_failure("${class_prefix}"),
                     if => "${inner_class_prefix}_error|!group_corrected";
      
      # repaired if group_corrected
      "repaired" usebundle => _classes_repaired("${old_class_prefix}"),
                     if => "!${inner_class_prefix}_error.group_corrected";
      "repaired" usebundle => _classes_repaired("${class_prefix}"),
                     if => "!${inner_class_prefix}_error.group_corrected";
    pass3.user_exists.group_exists::
      "report"
        usebundle => _log_v3("Secondary group ${group_name} for user ${login}", "${login}", "${old_class_prefix}", "${class_prefix}", @{args});
}
