#####################################################################################
# Copyright 2020 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name User group
# @description Define secondary group for a user
# @documentation Ensure that a user is within a group
#
# #### Behavior
#
# Ensure that the user belongs in the given secondary group (non-exclusive)
#
# ##### Parameters
#
# `login`      : the user login
# `group_name`: secondary group name the user should belong to (non-exclusive)
#
# #### Examples
#
# To ensure that user `test` belongs in group `dev`
#
# ```
#  user_group("test", "dev")
# ```
# Note that it will make sure that user test is in group dev, but won't remove it
# from other groups it may belong to
#
# @parameter login           User login
# @parameter group_name     Secondary group name for the user
#
#
# @parameter_rename user login
# @class_prefix user_group
# @class_parameter login
# @agent_support = ["cfengine-community"]

bundle agent user_group(login, group_name) {
  vars:
      "class_prefix" string => canonify("user_group_${login}");

      "inner_result" string => "inner_${report_data.method_id}";

      "add_user_to_group_cmd" string => "${paths.usermod} -a -G ${group_name} ${login}";


    user_exists.group_exists::
      "groups_test"    string => execresult("${ncf_paths.path[id]} -Gn ${login} # with ${group_name}", "useshell");
      "current_groups"  slist => string_split("${groups_test}", " ", "999999");

    # if we needed to change the group, check groups afterwards
    pass2.!within_group::
      "groups_test_post_change"   string => execresult("${ncf_paths.path[id]} -Gn ${login} #post change with ${group_name}", "useshell"),
                                      if => "${inner_result}_reached";
      "current_groups_post_change" slist => string_split("${groups_test_post_change}", " ", "999999"),
                                      if => "${inner_result}_reached";
      
  classes:
      "user_exists"   expression => userexists("${login}");
      "group_exists"  expression => groupexists("${group_name}");

      "user_and_group_exist" expression => "user_exists.group_exists";

    pass1.!pass2::
      # check if the required group is in the current groups
      "within_group" expression => strcmp("${current_groups}", "${group_name}");

      "run_add_user_to_group_cmd" expression => "!within_group.user_exists.group_exists";
      
    pass2::
      # group corrected?
      "group_corrected" expression => strcmp("${current_groups_post_change}", "${group_name}"),
                                if => "${inner_result}_reached";

    any::
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";

  methods:
    pass2.run_add_user_to_group_cmd::
      "${report_data.method_id}" usebundle => call_method("command_execution");
      "${report_data.method_id}" usebundle => command_execution("${add_user_to_group_cmd}");
      "${report_data.method_id}" usebundle => call_method_classes("${inner_result}");
      "${report_data.method_id}" usebundle => call_method_end("command_execution");


    pass3.run_add_user_to_group_cmd::
      # error if inner_result_error or not group_corrected
      "${report_data.method_id}" usebundle => _classes_failure("${report_data.method_id}"),
                                        if =>  "${inner_result}_error|!group_corrected";
                                                   
      "${report_data.method_id}" usebundle => _classes_failure("${class_prefix}"),
                                        if =>  "${inner_result}_error|!group_corrected";

      # repaired if group_corrected
      "${report_data.method_id}" usebundle => _classes_repaired("${report_data.method_id}"),
                                        if => "!${inner_result}_error.group_corrected";
      "${report_data.method_id}" usebundle => _classes_repaired("${class_prefix}"),
                                        if => "!${inner_result}_error.group_corrected";

    pass3.within_group::
      "${report_data.method_id}" usebundle => _classes_success("${report_data.method_id}");
      "${report_data.method_id}" usebundle => _classes_success("${class_prefix}");

    pass3.!user_and_group_exist::
      "${report_data.method_id}" usebundle => _classes_failure("${report_data.method_id}");
      "${report_data.method_id}" usebundle => _classes_failure("${class_prefix}");
      "${report_data.method_id}" usebundle => log_rudder_v4("${login}", "User ${login} or group ${group_name} don't exist", "");


    pass3.user_and_group_exist::
      "${report_data.method_id}" usebundle => log_rudder_v4("${login}", "Secondary group ${group_name} for user ${login}", "");
}
