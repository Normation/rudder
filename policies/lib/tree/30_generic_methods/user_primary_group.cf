#####################################################################################
# Copyright 2017 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name User primary group
# @description Define the primary group of the user. User must already exist.
# @documentation This method does not create the user.
#
# @parameter login User's login
# @parameter primary_group User's primary group
# 
# @class_prefix user_primary_group
# @class_parameter login
# @agent_support = ["cfengine-community"]

bundle agent user_primary_group(login, primary_group)
{
  vars:
      "class_prefix"  string => canonify("user_primary_group_${login}");
      
  classes:
      "user_exists"  expression => userexists("${login}");
      "group_exists" expression => groupexists("${primary_group}");

      "user_and_group_exist" expression => "user_exists.group_exists";

      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";


  users:
      "${login}"
               policy => "present",
        group_primary => "${primary_group}",
              classes => classes_generic_two("${report_data.method_id}", "${class_prefix}"),
                   if => "user_and_group_exist";

  methods:
    pass3.!user_and_group_exist::
      "${report_data.method_id}" usebundle => _classes_failure("${report_data.method_id}");
      "${report_data.method_id}" usebundle => _classes_failure("${class_prefix}");

      "${report_data.method_id}" usebundle => log_rudder_v4("${login}", "Group ${primary_group} does not exist. Can't set user ${login} primary_group to ${primary_group}", ""),
                                        if => "user_exists";
      
      "${report_data.method_id}" usebundle => log_rudder_v4("${login}", "User ${login} does not exist. Can't set user ${login} primary_group to ${primary_group}", ""),
                                        if => "group_exists";

      "${report_data.method_id}" usebundle => log_rudder_v4("${login}", "User ${login} and group ${primary_group} do not exist. Can't set user ${login} primary_group to ${primary_group}", ""),
                                        if => "!user_exists.!group_exists";

    pass3.user_and_group_exist::
      "${report_data.method_id}" usebundle => log_rudder_v4("${login}", "User ${login} primary_group set to ${primary_group}", "");
}

