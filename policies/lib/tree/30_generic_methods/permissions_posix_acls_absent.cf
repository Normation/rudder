#####################################################################################
# Copyright 2019 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Permissions POSIX ACLs absent
# @description Ensure that files or directories has no ACLs set
#
# @documentation The `permissions_*acl_*` manage the POSIX ACL on files and directories.
#
# #### Parameters
#
# ##### Path
#
# Path can be globbing with the following format:
#
# * * matches any filename or directory at one level, e.g. *.cf will match all files in one directory that end in .cf but it won't search across directories. */*.cf on the other hand will look two levels deep.
# * ? matches a single letter
# * [a-z] matches any letter from a to z
# * {x,y,anything} will match x or y or anything.
#
# ##### Recursive
# 
# Can be:
# 
# * `true` to apply the given aces to folder and sub-folders and files.
# * or `false` to apply to the strict match of `Path`
#
# If left blank, recursivity will automatically be set to `false`
#
# #### Example
# The method has basically the same effect as `setfacl -b <path>`.
# 
# Given a file with the following getfacl output:
#
# ~~~~
# root@server# getfacl /tmp/myTestFile 
# getfacl: Removing leading '/' from absolute path names
# # file: tmp/myTestFile
# # owner: root
# # group: root
# user::rwx
# user:vagrant:rwx
# group::r--
# mask::rwx
# other::---
#
# ~~~~
#
# It will remove all ACLs, and only let classic rights, here:
#
# ~~~~
# root@server# getfacl myTestFile 
# # file: myTestFile
# # owner: root
# # group: root
# user::rwx
# group::r--
# other::---
# 
# root@server# ls -l myTestFile
# -rwxr----- 1 root root 0 Mar 22 11:24 myTestFile
# root@server# 
# 
# ~~~~
#
# @parameter path Path of the file or directory
# @parameter recursive Should ACLs cleanup be recursive, "true" or "false" (defaults to "false")
# @parameter_constraint recursive "allow_empty_string" : true
# @parameter_constraint recursive "select" : [ "", "true", "false" ]
# 
# @class_prefix permissions_posix_acls_absent
# @class_parameter path
# @agent_support = ["cfengine-community"]

bundle agent permissions_posix_acls_absent(path, recursive)
{
  vars:
      "class_prefix"                   string => canonify("permissions_posix_acls_absent_${path}");
      "wc_path"                        string => "/usr/bin/wc";
      "file_list"                      slist  => findfiles("${path}");
      "file_list_length"               int    => length("file_list");
      "max_range"                      string => execresult("/usr/bin/expr ${file_list_length} - 1", "useshell");
    pass1.!max_range_is_null::
      "indices"                        slist  => expandrange("[0-${max_range}]", 1);
    pass1.max_range_is_null::
      "indices"                        slist  => { "0" };
    pass1::
      "file[${indices}]"               string => nth("file_list", "${indices}");
      "inner_class_prefix[${indices}]" string => canonify("${report_data.method_id}_${indices}");
    pass2::
      "repaired[${indices}]"           string => "repaired: ${file[${indices}]}",
                                           if => "${inner_class_prefix[${indices}]}_repaired";
      "error[${indices}]"              string => "error: ${file[${indices}]}",
                                           if => "${inner_class_prefix[${indices}]}_error";
      "success[${indices}]"            string => "success: ${file[${indices}]}",
                                           if => "${inner_class_prefix[${indices}]}_kept";

      "repaired_list"                  slist  => getvalues("repaired");
      "error_list"                     slist  => getvalues("error");
      "success_list"                   slist  => getvalues("success");

      "report_list"                    slist  => { "@{error_list}", "@{repaired_list}", "@{success_list}" };
      "report_string"                  string => join("$(const.endl)", report_list),
                                       policy => "ifdefined";

  defaults:
      "recursive" string => "false", if_match_regex => "";

  classes:
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";

      "getfacl_present"        expression => isexecutable("${paths.getfacl}");
      "setfacl_present"        expression => isexecutable("${paths.setfacl}");
      "acls_binary_present"    expression => "getfacl_present.setfacl_present";
      "is_recursive"           expression => strcmp("true", "${recursive}");
      "files_found"            expression => isgreaterthan("${file_list_length}", "0");
      "path_exists_${indices}" expression => fileexists("${file[${indices}]}");

      "acls_found_${indices}"  expression => returnszero("if [ ${const.dollar}(${paths.getfacl} -R --skip-base ${file[${indices}]} | ${wc_path} -c) -ne 0 ]; then /bin/true; else /bin/false; fi 2>/dev/null #${report_data.method_id}", "useshell"),
                                       if => "is_recursive.path_exists_${indices}";
      "acls_found_${indices}"  expression => returnszero("if [ ${const.dollar}(${paths.getfacl} --skip-base ${file[${indices}]} | ${wc_path} -c) -ne 0 ]; then /bin/true; else /bin/false; fi 2>/dev/null #{${report_data.method_id}", "useshell"),
                                       if => "!is_recursive.path_exists_${indices}";

    acls_binary_present.!(global_dry_run|dry_run)::
      # Recursive clean up
      "acls_cleanup_${indices}" expression => returnszero("${paths.setfacl} -R -b ${file[${indices}]} #${report_data.method_id}", "useshell"),
                                        if => "is_recursive.path_exists_${indices}.acls_found_${indices}";
      # Non recursive clean up
      "acls_cleanup_${indices}" expression => returnszero("${paths.setfacl} -b ${file[${indices}]} #${report_data.method_id}", "useshell"),
                                        if => "!is_recursive.path_exists_${indices}.acls_found_${indices}";


  methods:
    acls_binary_present::
      # Nothing to do
      "${report_data.method_id}" usebundle => _classes_success("${inner_class_prefix[${indices}]}"),
                                        if => "!acls_found_${indices}.path_exists_${indices}";

      # Executed setfacl -b
      "${report_data.method_id}" usebundle => _classes_repaired("${inner_class_prefix[${indices}]}"),
                                        if => "acls_cleanup_${indices}";

      # It failed
      "${report_data.method_id}" usebundle => _classes_failure("${inner_class_prefix[${indices}]}"),
                                        if => and( "!acls_cleanup_${indices}",
                                                   "acls_found_${indices}|!path_exists_${indices}");

      # Sanitize the classes
      "${report_data.method_id}" usebundle => _classes_sanitize("${inner_class_prefix[${indices}]}");
      "${report_data.method_id}" usebundle => _classes_combine_two("${class_prefix}", "${inner_class_prefix[${indices}]}", "${class_prefix}");
      "${report_data.method_id}" usebundle => _classes_sanitize("${class_prefix}");
      "${report_data.method_id}"  usebundle => _classes_copy("${class_prefix}", "${report_data.method_id}");

    !files_found|!acls_binary_present::
      "${report_data.method_id}" usebundle => _classes_failure("${class_prefix}");
      "${report_data.method_id}" usebundle => _classes_failure("${report_data.method_id}");

     # Recursive report
     pass3.is_recursive.files_found.acls_binary_present::
      "${report_data.method_id}" usebundle => log_rudder_v4("${path}", "${report_string}${const.endl}Clean POSIX acls recursively on ${path}", "");
     pass3.is_recursive.!files_found.acls_binary_present::
      "${report_data.method_id}" usebundle => log_rudder_v4("${path}", "Could not find any file or directory matching ${path}, clean POSIX acl recursively on ${path}", "");
     pass3.!acls_binary_present::
      "${report_data.method_id}" usebundle => log_rudder_v4("${path}", "No binaries for setfacl/getfacl could be found in ${paths.setfacl} nor ${paths.getfacl}, clean POSIX acl recursively on ${path}", "");

     # Non-recursive report
     pass3.!is_recursive.acls_binary_present.files_found::
      "${report_data.method_id}" usebundle => log_rudder_v4("${path}", "${report_string}${const.endl}Clean POSIX acls on ${path}", "");
     pass3.!is_recursive.acls_binary_present.!files_found::
      "${report_data.method_id}" usebundle => log_rudder_v4("${path}", "Could not find any file or directory matching ${path}, clean POSIX acl on ${path}", "");

}
