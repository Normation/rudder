#####################################################################################
# Copyright 2017 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name File content
# @description Enforce the content of a file
# @documentation Enforce the content of a file.
# The enforce parameter changes the edition method:
#
# * If *enforce* is set to *true* the file content will be forced
# * If *enforce* is set to *false* the file content will be forced line by line.
#   Which means that each line managed can not be duplicated and the order will
#   not be guaranteed.
#
# In most cases, the *enforce* parameter should be set to *true*.
# When *enforce* is set to *false*, and the managed lines are:
#
# ```
# Bob
# Alice
# Charly
# ```
#
# Will be compliant with the following file contents:
#
# ```
# Bob
# Alice
# Charly
# ```
#
# ```
# Charly
# Bob
# Alice
# Charly
# ```
#
# ```
# Bob
# Charly
# Alice
# ```
#
# @parameter path  File name to edit (absolute path on the target node)
# @parameter lines Line(s) to add in the file - if lines is a list, please use @{lines} to pass the iterator rather than iterating over each values
# @parameter enforce Enforce the file to contain only line(s) defined (true or false)
# @parameter_constraint enforce  "select" : [ "true", "false" ]
#
# 
# @parameter_rename file path
# @class_prefix file_lines_present
# @class_parameter path
# @agent_support = ["cfengine-community", "dsc"]

bundle agent file_content(path, lines, enforce)
{
  vars:
      "old_class_prefix" string => canonify("file_lines_present_${path}");

    # We need to detect if lines is an iterator or a scalar
    !pass1::
      "length_list" int => length("lines");

    pass2::
      # we need to reset the value to 0, otherwise in the next call of this generic method, the previous
      # value will be reused if lines is a scalar
      "length_list" int => "0";

    pass1.!islist::
      "args"              slist => { "${path}", "${lines}", "${enforce}" };

    pass1.islist::
      "args"              slist => { "${path}", "@{lines}", "${enforce}" };

    pass1::
      "report_param"      string => join("_", args);
      "full_class_prefix" string => canonify("file_lines_present_${report_param}");
      "class_prefix"      string => string_head("${full_class_prefix}", "1000");



  classes:
    !pass2::
      "islist" expression => isgreaterthan("$(length_list)", "1");

      "pass2" expression => "pass1";
      "pass1" expression => "any";

  files:
    pass2.!islist::
      "${path}"
        create        => "true",
        edit_line     => insert_lines("${lines}"),
        edit_defaults => ncf_empty_select("${enforce}"),
        classes       => classes_generic_two("${old_class_prefix}", "${class_prefix}");

    pass2.islist::
      "${path}"
        create        => "true",
        edit_line     => insert_lines("@{lines}"), # If it's a list, we don't want to iterate each time over the element
        edit_defaults => ncf_empty_select("${enforce}"),
        classes       => classes_generic_two("${old_class_prefix}", "${class_prefix}");

  methods:
    pass2::
      "sanitize" usebundle => _classes_sanitize("${old_class_prefix}");
      "sanitize" usebundle => _classes_sanitize("${class_prefix}");
      "report" usebundle => _log_v3("Insert content into ${path}", "${path}", "${old_class_prefix}", "${class_prefix}", @{args});
}
