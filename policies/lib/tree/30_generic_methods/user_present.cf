#####################################################################################
# Copyright 2017 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name User present
# @description Ensure a user exists on the system.
# @documentation This method does not create the user's home directory.
#  Primary group will be created and set with default one, following the useradd default behavior.
#  As in most UNIX system default behavior user creation will fail if a group with
#  the user name already exists.
#
# @parameter login User login
#
# @class_prefix user_present
# @class_parameter login
# @agent_support = ["cfengine-community", "dsc"]

bundle agent user_present(login)
{
  vars:
    "class_prefix"  string => canonify("user_present_${login}");

  classes:
    any::
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";
      
      "user_exists"  expression => userexists("${login}");
      "group_exists" expression => groupexists("${login}");

  users:
      "${login}"
         policy => "present",
        classes => classes_generic_two("${report_data.method_id}", "${class_prefix}"),
             if => "!user_exists.!group_exists";

  methods:
    pass3.!user_exists.group_exists::
      "${report_data.method_id}" usebundle => _classes_failure("${report_data.method_id}");
      "${report_data.method_id}" usebundle => _classes_failure("${class_prefix}");
      "${report_data.method_id}" usebundle => log_rudder_v4("${login}", "Can't create user ${login} as group ${login} already exists", "");

    pass3.user_exists::
      "${report_data.method_id}" usebundle => _classes_success("${report_data.method_id}");
      "${report_data.method_id}" usebundle => _classes_success("${class_prefix}");
      "${report_data.method_id}" usebundle => log_rudder_v4("${login}", "Presence of user ${login}", "");

    pass3.!group_exists::
      "${report_data.method_id}" usebundle => log_rudder_v4("${login}", "Presence of user ${login}", "");

}
