#####################################################################################
# Copyright 2013 Normation SAS
# Copyright 2016 Janos Mattyasovszky
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name File check is special
# @description Checks if a file exists and is a special file
#
# @parameter path      File name
# @parameter file_type File type to check, can be "block device", "character device", "directory", "FIFO/pipe", "regular file", "socket", "symlink"
# 
#
# @parameter_rename file_name path
# @class_prefix file_check
# @class_parameter path
# @agent_support = ["cfengine-community"]
# This bundle will define a condition file_check_${file_type}_${path}_{ok, reached, kept} if the
# file is a special file of type ${file_type}, or file_check_${file_type}_${path}_{not_ok, reached, not_kept, failed} if
# the file is not a special file or does not exist

bundle agent file_check_special(path, file_type)
{
  vars:
      "file_has_type"       string => filestat("${path}", "type");

      "old_class_prefix"    string => canonify("file_check_${file_type}_${path}");

      "args"                 slist => { "${path}", "${file_type}" };
      "report_param"        string => join("_", args);
      "full_class_prefix"   string => canonify("file_check_${report_param}");
      "class_prefix"        string => string_head("${full_class_prefix}", "1000");

  classes:
      "file_exists"     expression => fileexists("${path}");
      "file_is_special" expression => strcmp("${file_has_type}", "${file_type}");
      "exists_special"  expression => "file_exists.file_is_special";


  methods:
    exists_special::
      "file_exists_and_is_special"
        usebundle => _classes_success("${old_class_prefix}");
      "file_exists_and_is_special"
        usebundle => _classes_success("${class_prefix}");

    !exists_special::
      "file_doesnt_exists_or_is_not_special"
        usebundle => _classes_failure("${old_class_prefix}");
      "file_doesnt_exists_or_is_not_special"
        usebundle => _classes_failure("${class_prefix}");

    any::
      "report"
        usebundle => _log_v3("Check if ${path} exists and is a ${file_type}", "${path}", "${old_class_prefix}", "${class_prefix}", @{args});
}
