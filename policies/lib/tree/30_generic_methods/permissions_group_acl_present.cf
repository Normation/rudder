#####################################################################################
# Copyright 2019 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Permissions group POSIX acl entry present
# @description Verify that an ace is present on a file or directory for a given group.
# This method will make sure the given ace is present in the POSIX ACL of the target for the given group.
#
# @documentation The `permissions_*acl_*` manage the POSIX ACL on files and directories.
# 
# Please note that the mask will be automatically recalculated when editing ACLs.
#
# #### Parameters
#
# ##### Path
#
# Path can be a regex with the following format:
#
# * `*` matches any filename or directory at one level, e.g. `*.cf` will match all files in one directory that end in .cf but it won't search across directories. `*/*.cf` on the other hand will look two levels deep.
# * `?` matches a single letter
# * `[a-z]` matches any letter from a to z
# * `{x,y,anything}` will match x or y or anything.
#
# ##### Recursive
# 
# Can be:
# 
# * `true` to apply the given aces to folder and sub-folders and files.
# * or `false` to apply to the strict match of `Path`
#
# If left blank, recursivity will automatically be set to `false`
#
# ##### Group
#
# `Group` to enfoorce the ace, being the Linux account name.
# This method can only handle one groupname.
#
# ##### ACE
#
# The operator can be:
# * `+` to add the given ACE to the current ones.
# * `-` to remove the given ACE to the current ones.
# * `=` to force the given ACE to the current ones.
# * `empty` if no operator is specified, it will be interpreted as `=`.
#
# ACE must respect the classic:
# 
# * `^[+-=]?(?=.*[rwx])r?w?x?$`
#
# #### Example
# 
# Given a file with the following getfacl output:
#
# ~~~~
# root@server# getfacl /tmp/myTestFile 
# getfacl: Removing leading '/' from absolute path names
# # file: tmp/myTestFile
# # owner: root
# # group: root
# user::rwx
# group::r--
# group:bob:rwx
# mask::rwx
# other::---
#
# ~~~~
# 
# Applying this method with the following parameters:
# 
# * `path`: /tmp/myTestFile
# * `recursive`: false
# * `group`: bob
# * `ace`: -rw
#
# Will transform the previous ACLs in:
#
# ~~~~
# root@server# getfacl /tmp/myTestFile 
# getfacl: Removing leading '/' from absolute path names
# # file: tmp/myTestFile
# # owner: root
# # group: root
# user::rwx
# group::r--
# group:bob:--x
# mask::r-x
# other::---
#
# ~~~~
#
#
# @parameter path       Path of the file or directory
# @parameter recursive  Recursive Should ACLs cleanup be recursive, "true" or "false" (defaults to "false")
# @parameter group      Group name
# @parameter ace        ACE to enforce for the given group.
# 
# @parameter_constraint recursive "select" : [ "", "true", "false" ]
# @parameter_constraint recursive "allow_empty_string" : true
#
# @parameter_constraint ace       "regex" : "^[+-=]?(?=.*[rwx])r?w?x?$"
#
# @class_prefix permissions_group_acl_present
# @class_parameter path
# @agent_support = ["cfengine-community"]

bundle agent permissions_group_acl_present(path, recursive, group, ace)
{
  vars:
      "class_prefix"                   string => canonify("permissions_group_acl_present_${path}");
      "group_ace"                      string => regex_replace("group:${group}:${ace}", " ", "", "g");
      "applied_aces"                    slist => { "${group_ace}" };

      "file_list"                      slist  => findfiles("${path}");
      "file_list_length"               int    => length("file_list");
      "max_range"                      string => execresult("/usr/bin/expr ${file_list_length} - 1", "useshell");
    pass1.!max_range_is_null::
      "indices"                        slist  => expandrange("[0-${max_range}]", 1);
    pass1.max_range_is_null::
      "indices"                        slist  => { "0" };
    pass1::
      "file[${indices}]"               string => nth("file_list", "${indices}");
      "inner_class_prefix[${indices}]" string => canonify("${report_data.method_id}_${indices}");
    pass2::
      "repaired[${indices}]"           string => "repaired: ${file[${indices}]}",
                                           if => "${inner_class_prefix[${indices}]}_repaired";
      "error[${indices}]"              string => "error: ${file[${indices}]}",
                                           if => "${inner_class_prefix[${indices}]}_error";
      "success[${indices}]"            string => "success: ${file[${indices}]}",
                                           if => "${inner_class_prefix[${indices}]}_kept";

      "repaired_list"                  slist  => getvalues("repaired");
      "error_list"                     slist  => getvalues("error");
      "success_list"                   slist  => getvalues("success");

      "report_list"                    slist  => { "@{error_list}", "@{repaired_list}", "@{success_list}" };
      "report_string"                  string => join("$(const.endl)", report_list),
                                       policy => "ifdefined";


  defaults:
      "recursive" string => "false", if_match_regex => "";

  classes:
      "pass3"                  expression => "pass2";
      "pass2"                  expression => "pass1";
      "pass1"                  expression => "any";
      "max_range_is_null"      expression => strcmp("${max_range}", "0");
      "is_recursive"           expression => strcmp("true", "${recursive}");
      "files_found"            expression => isgreaterthan("${file_list_length}", "0");
      "path_exists_${indices}" expression => fileexists("${file[${indices}]}");
      "isdir_${indices}"       expression => isdir("${file[${indices}]}");
      "isrecursive_${indices}" expression => and( "isdir_${file[${indices}]}",
                                                  "is_recursive");

  files:
    pass2::
      "${file[${indices}]}"
        depth_search => recurse_with_base("inf"),
        acl          => add_posix_acl(@{applied_aces}),
        classes      => classes_generic("${inner_class_prefix[${indices}]}"),
        if           => "path_exists_${indices}.isrecursive_${indices}";

      "${file[${indices}]}"
        acl          => add_posix_acl(@{applied_aces}),
        classes      => classes_generic("${inner_class_prefix[${indices}]}"),
        if           => "path_exists_${indices}.!isrecursive_${indices}";

  methods:
    !files_found::
      "${report_data.method_id}" usebundle =>  _classes_failure("${class_prefix}");
      "${report_data.method_id}" usebundle =>  _classes_failure("${report_data.method_id}");
      "${report_data.method_id}" usebundle => log_rudder_v4("${path}", "No files could be found matching ${path}, set POSIX acl ${group_ace}", "");

    pass3.files_found::
      "${report_data.method_id}" usebundle => _classes_failure("${inner_class_prefix[${indices}]}"),
                                        if => "!path_exists_${indices}";
      "${report_data.method_id}" usebundle => _classes_sanitize("${inner_class_prefix[${indices}]}");

    pass3.files_found::
      "${report_data.method_id}" usebundle => _classes_combine_two("${class_prefix}", "${inner_class_prefix[${indices}]}", "${class_prefix}");
      "${report_data.method_id}" usebundle => _classes_sanitize("${class_prefix}");
      "${report_data.method_id}" usebundle => _classes_copy("${class_prefix}", "${report_data.method_id}");

    is_recursive.pass3.files_found::
      "${report_data.method_id}" usebundle => log_rudder_v4("${path}", "${report_string} ${const.endl}Set POSIX acl ${group_ace} recursively on ${path}", "");

    !is_recursive.pass3.files_found::
      "${report_data.method_id}" usebundle => log_rudder_v4("${path}", "${report_string} ${const.endl}Set POSIX acl ${group_ace} on ${path}", "");

}
