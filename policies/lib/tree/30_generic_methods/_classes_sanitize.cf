#####################################################################################
# Copyright 2016 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Classes sanitize
# @description Sanitize a class prefix, i.e. error > repaired > kept and there cannot be any overlap
# @documentation This bundle will undefine class ${prefix}_{kept,repaired,not_ok,ok,reached}
# based on the overlapping of ${prefix}_{kept,repaired,not_ok,ok,reached}
#
# @parameter prefix      The prefix of the source class to copy
#
# @class_prefix 
# @class_parameter 
# @agent_support = ["cfengine-community"]

bundle agent _classes_sanitize(prefix)
{
  vars:
    !pass1::
      "complete_suffix" slist => { "not_kept", "kept", "not_ok", "ok", "not_repaired", "repaired", "failed", "error" };

    # this is a way to remove the class without side effect
      "error_suffix"    slist => { "not_kept", "not_ok", "not_repaired", "failed", "error" };
      "repaired_suffix" slist => { "ok", "repaired", "not_kept" };
      "success_suffix"  slist => { "ok", "kept", "not_repaired" };


      "cancel_if_repaired" slist => difference( "success_suffix", "repaired_suffix" );
      "cancel_if_error"    slist => difference( "complete_suffix", "error_suffix" );

    worst_is_error.pass1.!pass2::
      "ignored_kept_and_repaired" string => "", classes => if_ok_cancel("${prefix}_${cancel_if_error}");
    worst_is_repaired.pass1.!pass2::
      "ignored_repaired"          string => "", classes => if_ok_cancel("${prefix}_${cancel_if_repaired}");

  classes:
      "worst_is_error"    expression => "${prefix}_error|${prefix}_failed";
      "worst_is_repaired" expression => "${prefix}_repaired.!${prefix}_error.!${prefix}_failed";

      "pass2"             expression => "pass1";
      "pass1"             expression => "any";
}
