#####################################################################################
# Copyright 2015 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name File ensure key-value in INI section
# @rename file_key_value_present_in_ini_section
# @deprecated Use [file_key_value_present_in_ini_section](#_file_key_value_present_in_ini_section) instead.
# @description Ensure that a key-value pair is present in a section in a specific location. The objective of this method is to handle INI-style files.
#
# @parameter path File name to edit (absolute path on the target node)
# @parameter section Name of the INI-style section under which the line should be added or modified (not including the [] brackets)
# @parameter name Name of the key to add or edit
# @parameter value Value of the key to add or edit
#
#
# @parameter_rename file path
# @class_prefix file_ensure_key_value_present_in_ini_section
# @class_parameter path
# @agent_support = ["cfengine-community"]

bundle agent file_ensure_key_value_present_in_ini_section(path, section, name, value)
{
  vars:
      "old_class_prefix"        string => canonify("file_ensure_key_value_present_in_ini_section_${path}");

      "args"                     slist => { "${path}", "${section}", "${name}", "${value}" };
      "report_param"            string => join("_", args);
      "full_class_prefix"       string => canonify("file_ensure_key_value_present_in_ini_section_${report_param}");
      "class_prefix"            string => string_head("${full_class_prefix}", "1000");

      "full_inner_class_prefix" string => canonify("file_key_value_present_in_ini_section_${report_param}");
      "inner_class_prefix"      string => string_head("${full_inner_class_prefix}", "1000");

      "canonified_path"    string => canonify("${path}");

  classes:
      "should_report"    expression => "${report_data.should_report}";

  methods:
      "disable_reporting_${class_prefix}"
                           usebundle => disable_reporting;
      "action"             usebundle => file_key_value_present_in_ini_section("${path}", "${section}", "${name}", "${value}");
      "reenable_reporting_${class_prefix}"
                           usebundle => enable_reporting,
                          ifvarclass => "should_report";
      "class copy"         usebundle => _classes_copy("file_key_value_present_in_ini_section_${canonified_path}", "${old_class_prefix}"),
                          ifvarclass => "file_key_value_present_in_ini_section_${canonified_path}_reached";
      "new result classes" usebundle => _classes_copy("${inner_class_prefix}", "${class_prefix}"),
                          ifvarclass => "${inner_class_prefix}_reached";
      "report"            usebundle  => _log_v3("Set value for key in section ${section} into ${path}", "${path}", "${old_class_prefix}", "${class_prefix}", @{args});
}

