#####################################################################################
# Copyright 2013-5 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Log default
# @description Standard default logging output
#
# @parameter message              The common part of the message to display
# @parameter class_parameter      The class_parameter of reporting - not used in this logger
# @parameter old_class_prefix     The prefix of the class for different states (<4.3 version)
# @parameter class_prefix         The prefix of the class for different states (4.3 version)
# @parameter args                 The arguments used to call the generic method (slist)
#
# @class_prefix _logger_default
# @class_parameter old_class_prefix
# @agent_support = ["cfengine-community"]

bundle agent _log_default(message, class_parameter, old_class_prefix, class_prefix, args)
{
  vars:
      "canonified_prefix" string => canonify("${old_class_prefix}");
      "c_class_prefix"    string => canonify("${class_prefix}");
      "class_prefix_length"   int => string_length("${class_prefix}");

      "arg_list" string => join(",", "args");

  classes:
      # Use the full class prefix if:
      # - it is defined
      # - its length is smaller than 1000 character (classes are limited to 1023 characters, so if the prefix
      #   is too long, then classes are not defined and it can't be used
      # Note that if we don't use the full class_prefix, we fallback to the previous use case, where classes collision happen

      "class_prefix_null"    expression => strcmp("cf_null", "${class_prefix}");
      "class_prefix_empty"   expression => strcmp("", "${class_prefix}");
      "class_prefix_defined" expression => "!class_prefix_null.!class_prefix_empty";
      "class_prefix_size_ok" expression => isgreaterthan("1000", "${class_prefix_length}");
      "use_class_prefix"     expression => "class_prefix_defined.class_prefix_size_ok";

  reports:
    debug.use_class_prefix::
      "${configuration.debug} Promise called with ${arg_list} - using class_prefix for reporting"; # full debug information

    debug.!use_class_prefix::
      "${configuration.debug} Promise kept, not doing anything: ${message}"
        ifvarclass => "${canonified_prefix}_kept.!${canonified_prefix}_repaired.!${canonified_prefix}_not_ok";

    debug.use_class_prefix::
      "${configuration.debug} Promise kept, not doing anything: ${message}"
        ifvarclass => "${c_class_prefix}_kept.!${c_class_prefix}_repaired.!${c_class_prefix}_not_ok";

    info.!use_class_prefix::
      "${configuration.info} Promise repaired, made a change: ${message}"
        ifvarclass => "${canonified_prefix}_repaired.!${canonified_prefix}_not_ok";

    info.use_class_prefix::
      "${configuration.info} Promise repaired, made a change: ${message}"
        ifvarclass => "${c_class_prefix}_repaired.!${c_class_prefix}_not_ok";

    !use_class_prefix:: # We always want to log errors
      "${configuration.error} Promise could not be repaired, error encountered: ${message}"
        ifvarclass => "${canonified_prefix}_not_ok";

    use_class_prefix:: # We always want to log errors
       "${configuration.error} Promise could not be repaired, error encountered: ${message}"
        ifvarclass => "${c_class_prefix}_not_ok";
}
