#####################################################################################
# Copyright 2015 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name File key-value in INI section
# @description Ensure that a key-value pair is present in a section in a specific location. The objective of this method is to handle INI-style files.
#
# @parameter path File name to edit (absolute path on the target node)
# @parameter section Name of the INI-style section under which the line should be added or modified (not including the [] brackets)
# @parameter name Name of the key to add or edit
# @parameter value Value of the key to add or edit
#
#
# @parameter_rename file path
# @class_prefix file_key_value_present_in_ini_section
# @class_parameter path
# @agent_support = ["cfengine-community"]

bundle agent file_key_value_present_in_ini_section(path, section, name, value)
{
  vars:
      "class_prefix"                 string => canonify("file_key_value_present_in_ini_section_${path}");
      "inner_class_prefix"           string => "${report_data.method_id}_inner";
      "content[${section}][${name}]" string => "${value}";

  classes:
      "pass3"        expression => "pass2";
      "pass2"        expression => "pass1";
      "pass1"        expression => "any";
      # check if file is present or not
      # if not, we will create it with the section name and an empty line
      "file_present" expression => fileexists("${path}");

  files:
    pass3::
      "${path}"
        create        => "true",
        edit_line     => insert_lines("[${section}]
"),
        if            => "!file_present";

      "${path}"
        edit_line     => set_variable_values_ini("file_key_value_present_in_ini_section.content", "${section}"),
        edit_defaults => ncf_empty_select("false"),
        classes       => classes_generic("${inner_class_prefix}"),
        comment       => "Editing file ${path} to set ${name} = ${value} in section ${section}";

  methods:
    pass3::
      "${report_data.method_id}" usebundle => _classes_sanitize("${inner_class_prefix}");
      "${report_data.method_id}" usebundle => _classes_copy("${inner_class_prefix}", "${report_data.method_id}");
      "${report_data.method_id}" usebundle => _classes_copy("${inner_class_prefix}", "${class_prefix}");
      "${report_data.method_id}" usebundle => log_rudder_v4("${path}", "Set line key=value in section ${section} into ${path}", "");
}

