#####################################################################################
# Copyright 2017 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Sharedfile to node
# @description This method shares a file with another Rudder node
# @documentation This method shares a file with another Rudder node using a unique file identifier.
#
# Read the Rudder documentation for a [high level overview of file sharing between nodes](https://docs.rudder.io/reference/current/usage/advanced_configuration_management.html#_share_files_between_nodes).
#
# The file will be kept on the policy server and transmitted to the destination node's policy server if it is different.
# It will be kept on this server for the destination node to download as long as it is not replaced by a new
# file with the same id or remove by expiration of the TTL.
#
# #### Parameters
#
# This section describes the generic method parameters.
#
# #### remote_node
#
# The node you want to share this file with. The uuid of a node
# is visible in the Nodes details (in the Web interface) or by entering
# `rudder agent info` on the target node.
#
# ##### file_id
#
# This is a name that will be used to identify the file in the target node. It should be unique
# and describe the file content.
#
# ##### file_path
#
# The local absolute path of the file to share.
#
# ##### ttl
#
# The TTL can be:
#
# * A simple integer, in this case it is assumed to be a number of *seconds*
# * A string including units indications, the possible units are:
#
# * *days*, *day* or *d*
# * *hours*, *hour*, or *h*
# * *minutes*, *minute*, or *m*
# * *seconds*, *second* or *s*
#
# The ttl value can look like *1day 2hours 3minutes 4seconds* or can be abbreviated in the form *1d 2h 3m 4s*, or without spaces *1d2h3m4s* or any combination like *1day2h 3minute 4seconds*
# Any unit can be skipped, but the decreasing order needs to be respected.
#
# ##### file_id
#
# This is a name that will be used to identify the file once stored on the server. It should be unique
# and describe the file content.
#
# #### Example:
#
# We have a node *A*, with uuid `2bf1afdc-6725-4d3d-96b8-9128d09d353c` which wants to share
# the `/srv/db/application.properties` with node *B* with uuid `73570beb-2d4a-43d2-8ffc-f84a6817849c`.
#
# We want this file to stay available for one year for node *B* on its policy server.
#
# The node *B* wants to download it into `/opt/application/etc/application.properties`.
#
# They have to agree (i.e. it has to be defined in the policies of both nodes) on the id of the file,
# that will be used during the exchange, here it will be `application.properties`.
#
# To share the file, node *A* will use:
#
# ```
# sharedfile_to_node("73570beb-2d4a-43d2-8ffc-f84a6817849c", "application.properties", "/srv/db/application.properties", "356 days")
# ```
#
# To download the file, node *B* will use [sharedfile_from_node](#_sharedfile_from_node) with:
#
# ```
# sharedfile_from_node("2bf1afdc-6725-4d3d-96b8-9128d09d353c", "application.properties", "/opt/application/etc/application.properties")
# ```
#
# @parameter remote_node  Which node to share the file with
# @parameter file_id      Unique name that will be used to identify the file on the receiver
# @parameter_constraint file_id "regex" : "^[A-z0-9._-]+$"
# @parameter file_path    Path of the file to share
# @parameter ttl          Time to keep the file on the policy server in seconds or in human readable form (see long description)
# @parameter_constraint ttl "regex" : "^(\d+\s*(days?|d))?(\d+\s*(hours?|h))?(\d+\s*(minutes?|m))?(\d+\s*(seconds?|s))?$"
#
# @parameter_rename target_uuid remote_node
# @class_prefix sharedfile_to_node
# @class_parameter file_id
# @agent_support = ["cfengine-community"]

bundle agent sharedfile_to_node(remote_node, file_id, file_path, ttl)
{
  vars:
      "class_prefix"  string => canonify("sharedfile_to_node_${file_id}");
      "canonified_path"   string => canonify("${file_path}");
      "endpoint"          string => "/rudder/relay-api/shared-files/${remote_node}/${g.uuid}/${file_id}";
      "url"               string => "https://${server_info.policy_server}${endpoint}";

      "hash"              string => execresult("sed -n '/^hash_value=/s/^hash_value=//p' ${file_path}.sign", "useshell"),
                      ifvarclass => "${canonified_path}_signed";

      "url_ttl"           string => execresult("echo ${ttl} | sed 's/ /+/g'", "useshell");

      "version_str"      string => execresult("rudder agent version", "useshell");
      "version_data"       data => data_regextract("Rudder agent (\d+)\.(\d+)\.(\d+)", "${version_str}");

  classes:
    any::
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";

      "${canonified_path}_signed" and => { fileexists("${file_path}.sign"), isnewerthan("${file_path}.sign","${file_path}") };

      # classes for _classes_combine_ifthenelse
      "${report_data.method_id}_exist_true"  expression => "${report_data.method_id}_exist_kept",
                                                  scope => "namespace";
      "${report_data.method_id}_exist_false" expression => "${report_data.method_id}_exist_repaired",
                                                  scope => "namespace";
      "${class_prefix}_exist_true"           expression => "${class_prefix}_exist_kept",
                                                  scope => "namespace";
      "${class_prefix}_exist_false"          expression => "${class_prefix}_exist_repaired",
                                                  scope => "namespace";

      "file_exists"  expression => fileexists("${file_path}");
      "check_failed" expression => "${report_data.method_id}_exist_error|${class_prefix}_exist_error";

  methods:
    pass3.!_ncf_path_exists_curl|check_failed|!file_exists::
      "${report_data.method_id}" usebundle => _classes_failure("${report_data.method_id}");
      "${report_data.method_id}" usebundle => _classes_failure("${class_prefix}");
    pass3.!_ncf_path_exists_curl::
      "${report_data.method_id}" usebundle => log_rudder_v4("${file_id}", "Unable to perform a HTTP queries on ${url}: curl is not installed", "");
    pass3.check_failed::
      "${report_data.method_id}" usebundle => log_rudder_v4("${file_id}", "Unable to contact HTTP server on ${url} from sharedfile_to_node", "");
    pass3.!file_exists::
      "${report_data.method_id}" usebundle => log_rudder_v4("${file_id}", "File ${file_path} does not exist", "");

    pass1.!pass2::
      "${report_data.method_id}" usebundle  => push_dry_run_mode("false");
    pass3::
      "${report_data.method_id}" usebundle  => pop_dry_run_mode();

    pass3._ncf_path_exists_curl.file_exists.!check_failed.pass3::
      "${report_data.method_id}" usebundle => _classes_combine_ifthenelse("${report_data.method_id}_exist", "success", "${report_data.method_id}_uploaded", "${report_data.method_id}");
      "${report_data.method_id}" usebundle => _classes_combine_ifthenelse("${class_prefix}_exist", "success", "${class_prefix}_uploaded", "${class_prefix}");
      "${report_data.method_id}" usebundle => log_rudder_v4("${file_id}", "Sharing ${file_path} with ${remote_node} under the name ${file_id} for ${ttl}", "");

  commands:
    _ncf_path_exists_curl::
      "/opt/rudder/bin/rudder-sign"
           args => "${file_path} 1.1",
        classes => if_ok("${canonified_path}_signed"),
             if => "!${canonified_path}_signed";

    pass2::
      "code=`/opt/rudder/bin/rudder-client -e ${endpoint}?hash=${hash} -r -- --head` || if [ $code -eq 404 ]; then exit 22; elif [ $code -eq 200 ]; then exit 0; else exit 254; fi"
        contain => in_shell,
        classes => classes_generic_return_single_code_two("${report_data.method_id}_exist", "${class_prefix}_exist", "0", "22", "254"), # 254 = http 400 or above, 22 = http 404
             if => "${canonified_path}_signed";

      "echo | cat ${file_path}.sign - ${file_path} | /opt/rudder/bin/rudder-client"
           args => "-e ${endpoint}?ttl=${url_ttl} -- --request PUT --output /dev/null --header 'Content-Type: application/octet-stream' --data-binary @-",
        contain => in_shell,
        classes => classes_generic_return_single_code_two("${report_data.method_id}_uploaded", "${class_prefix}_uploaded", "0", "999", "22"), # 22 = http 400 or above
             if => and( "${canonified_path}_signed",
                        or( "${report_data.method_id}_exist_repaired",
                            "${class_prefix}_exist_repaired"
                          )
                      );
}
