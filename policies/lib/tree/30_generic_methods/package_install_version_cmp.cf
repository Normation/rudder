#####################################################################################
# Copyright 2013 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Package install version compare
# @description Install a package or verify if it is installed in a specific version, or higher or lower version than a version specified
# @deprecated Use [package_present](#_package_present) instead.
# @documentation *Example*:
# ```
# methods:
#     "any" usebundle => package_install_version_cmp("postgresql", ">=", "9.1", "verify");
# ```
#
# @parameter name                Name of the package to install or verify
# @parameter version_comparator  Comparator between installed version and defined version, can be ==,<=,>=,<,>,!=
# @parameter package_version     The version of the package to verify (can be "latest" for latest version)
# @parameter action              Action to perform, can be add, verify (defaults to verify)
# @parameter_constraint version_comparator  "select" : [ "==", "<=", ">=", "<", ">" , "!=" ]
#
#
# @parameter_rename package_name name
# @class_prefix package_install
# @class_parameter name
# @agent_support = ["cfengine-community"]

bundle agent package_install_version_cmp(name, version_comparator, package_version, action)
{
  vars:
      "old_class_prefix"        string => canonify("package_install_${name}");

      "args"                     slist => { "${name}", "${version_comparator}", "${package_version}", "${action}" };
      "report_param"            string => join("_", args);
      "full_class_prefix"       string => canonify("package_install_${report_param}");
      "class_prefix"            string => string_head("${full_class_prefix}", "1000");

      # call is to package_install_version_cmp_update("${name}", "${version_comparator}", "${package_version}", "${action}", "true")
      "full_inner_class_prefix"  string => canonify("package_install_${report_param}_true");
      "inner_class_prefix"       string => string_head("${full_inner_class_prefix}", "1000");

  classes:
      "should_report"    expression => "${report_data.should_report}";

  methods:
      "disable_reporting_${class_prefix}"
                           usebundle => disable_reporting;
      "install or update"  usebundle => package_install_version_cmp_update("${name}", "${version_comparator}", "${package_version}", "${action}", "true");
      "reenable_reporting_${class_prefix}"
                           usebundle => enable_reporting,
                          ifvarclass => "should_report";
      "new result classes" usebundle => _classes_copy("${inner_class_prefix}", "${class_prefix}");

      "report"             usebundle => _log_v3("Install package ${name} version ${version_comparator} ${package_version}", "${name}", "${old_class_prefix}", "${class_prefix}", @{args});
}
