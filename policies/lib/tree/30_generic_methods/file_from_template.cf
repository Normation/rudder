#####################################################################################
# Copyright 2013 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name File from template
# @description Build a file from a legacy CFEngine template
# @deprecated This method uses CFEngine's templating which is deprecated and not portable across agents.
# Please use [file_from_template_mustache](#_file_from_template_mustache) or [file_from_template_jinja2](#_file_from_template_jinja2) instead.
# 
# @documentation See [file_from_template_type](#_file_from_template_type) for general documentation about
# templates usage.
#
# @parameter source_template Source file containing a template to be expanded (absolute path on the target node)
# @parameter path     Destination file (absolute path on the target node)
#
#
# @parameter_rename destination path
# @class_prefix file_from_template
# @class_parameter path
# @agent_support = ["cfengine-community", "dsc"]

bundle agent file_from_template(source_template, path)
{
  vars:
      "class_prefix"       string => canonify("file_from_template_${path}");
      "inner_class_prefix" string => "${report_data.method_id}_inner";

  classes:
      "pass3"           expression => "pass2";
      "pass2"           expression => "pass1";
      "pass1"           expression => "any";
      "template_exists" expression => fileexists("${source_template}");

  files:
    pass3.template_exists::
      "${path}"
        create          => "true",
        edit_template   => "${source_template}",
        edit_defaults   => ncf_empty_select("true"),
        ifvarclass      => "template_exists",
        classes         => classes_generic("${inner_class_prefix}");

  methods:
    pass3.!template_exists::
      "${report_data.method_id}" usebundle => _classes_failure("${report_data.method_id}");
      "${report_data.method_id}" usebundle => _classes_failure("${class_prefix}");
      "${report_data.method_id}" usebundle => log_rudder_v4("${path}", "The template source ${source_template} could not be found, build file ${path}", "");

    pass3.template_exists::
      "${report_data.method_id}" usebundle => _classes_sanitize("${inner_class_prefix}");
      "${report_data.method_id}" usebundle => _classes_copy("${inner_class_prefix}", "${report_data.method_id}");
      "${report_data.method_id}" usebundle => _classes_copy("${inner_class_prefix}", "${class_prefix}");
      "${report_data.method_id}" usebundle => log_rudder_v4("${path}", "Build file ${path} from template ${source_template}", "");

}
