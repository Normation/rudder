#####################################################################################
# Copyright 2013 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name File lines present
# @description Ensure that one or more lines are present in a file
# @documentation Edit the file, and ensure it contains the defined line(s). Regular expression can be used for the file name.
#
# @parameter path  File name to edit (absolute path on the target node)
# @parameter lines Line(s) to add in the file
#
# 
# @parameter_rename file path
# @class_prefix file_lines_present
# @class_parameter path
# @agent_support = ["cfengine-community", "dsc"]

bundle agent file_lines_present(path, lines)
{
  vars:
      "old_class_prefix"  string => canonify("file_lines_present_${path}");

      "args"               slist => { "${path}", "${lines}" };
      "report_param"      string => join("_", args);
      "full_class_prefix" string => canonify("file_lines_present_${report_param}");
      "class_prefix"      string => string_head("${full_class_prefix}", "1000");

      "full_inner_class_prefix" string => canonify("file_lines_present_${report_param}_false");
      "inner_class_prefix"      string => string_head("${full_inner_class_prefix}", "1000");

  classes:
      "should_report"    expression => "${report_data.should_report}";

  methods:
      "disable_reporting_${class_prefix}"
                              usebundle => disable_reporting;
      "enforce lines content" usebundle => file_content("${path}", "${lines}", "false");
      "reenable_reporting_${class_prefix}"
                              usebundle => enable_reporting,
                             ifvarclass => "should_report";
      "new result classes"    usebundle => _classes_copy("${inner_class_prefix}", "${class_prefix}");

      "report"                usebundle => _log_v3("Append content ${lines} if needed into ${path}", "${path}", "${old_class_prefix}", "${class_prefix}", @{args});
}
