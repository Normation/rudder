#####################################################################################
# Copyright 2013 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Permissions (recurse)
# @rename permissions_recursive
# @deprecated Use [permissions_recursive](#_permissions_recursive) instead.
# @description Verify if a file or directory has the right permissions recursively
#
# @parameter path  Path to the file / directory
# @parameter mode  Mode to enforce
# @parameter owner Owner to enforce
# @parameter group Group to enforce
# @parameter_constraint mode "allow_empty_string" : true
# @parameter_constraint owner "allow_empty_string" : true
# @parameter_constraint group "allow_empty_string" : true
# @class_prefix permissions
# @class_parameter path
# @agent_support = ["cfengine-community"]

bundle agent permissions_recurse(path, mode, owner, group)
{
  vars:
      "class_prefix" string => canonify("permissions_${path}");

  classes:
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";

  methods:
    pass3::
      "${report_data.method_id}" usebundle => call_method("permissions_type_recursion");
      "${report_data.method_id}" usebundle => permissions_type_recursion("${path}", "${mode}", "${owner}", "${group}", "all", "inf");
      "${report_data.method_id}" usebundle => call_method_classes("${class_prefix}");
      "${report_data.method_id}" usebundle => call_method_classes_caller;
      "${report_data.method_id}" usebundle => call_method_end("permissions_type_recursion");
      "${report_data.method_id}" usebundle => log_rudder_v4("${path}", "Ensure recursive permissions mode ${mode}, owner ${owner} and group ${group} on ${path}", "");
}
