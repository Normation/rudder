#####################################################################################
# Copyright 2019 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
######################################################################################

# @name Kernel module loaded
# @description Ensure that a given kernel module is loaded on the system
# @documentation Ensure that a given kernel module is loaded on the system.
#   If the module is not loaded, it will try to load it via modprobe.
#
# @parameter name Complete name of the kernel module, as seen by lsmod or listed in /proc/modules
#
#
# @parameter_rename module_name name
# @class_prefix kernel_module_loaded
# @class_parameter name
# @agent_support = ["cfengine-community"]

bundle agent kernel_module_loaded(name)
{
  vars:
      "canonified_module_name" string => canonify("${name}");
      "old_class_prefix"       string => canonify("kernel_module_loaded_${name}");
      "args"                    slist => { "${name}" };
      "report_param"           string => join("_", args);
      "full_class_prefix"      string => canonify("kernel_module_loaded_${report_param}");
      "class_prefix"           string => string_head("${full_class_prefix}", "1000");

  classes:
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";

    pass1.!pass2::
      "module_loaded_init_${canonified_module_name}"  expression => returnszero("/sbin/lsmod | cut -d ' '  -f 1 | ${paths.path[grep]} -q ^${name}$ #Initial check for loading ${name}", "useshell");
    pass1.!pass2.!(global_dry_run|dry_run)::
      "module_unloading_${canonified_module_name}" expression => returnszero("/sbin/modprobe ${name}", "useshell"),
        ifvarclass => "!module_loaded_init_${canonified_module_name}";
    pass3::
      "module_loaded_final_${canonified_module_name}" expression => returnszero("/sbin/lsmod | cut -d ' '  -f 1 | ${paths.path[grep]} -q ^${name}$ #Final check for loading ${name}", "useshell");

  methods:
    pass3::
      "failure" usebundle => _classes_failure("${old_class_prefix}"),
        ifvarclass => "!module_loaded_final_${name}";
      "failure" usebundle => _classes_failure("${class_prefix}"),
        ifvarclass => "!module_loaded_final_${name}";

      "repaired" usebundle => _classes_repaired("${old_class_prefix}"),
        ifvarclass => "!module_loaded_init_${canonified_module_name}.module_loaded_final_${name}";
      "repaired" usebundle => _classes_repaired("${class_prefix}"),
        ifvarclass => "!module_loaded_init_${canonified_module_name}.module_loaded_final_${name}";

      "success" usebundle => _classes_success("${old_class_prefix}"),
        ifvarclass => "module_loaded_init_${canonified_module_name}.module_loaded_final_${name}";
      "success" usebundle => _classes_success("${class_prefix}"),
        ifvarclass => "module_loaded_init_${canonified_module_name}.module_loaded_final_${name}";

      "report"  usebundle => _log_v3("Check that the kernel module ${name} is loaded on the system", "${name}", "${old_class_prefix}", "${class_prefix}", @{args});
}
