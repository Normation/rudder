#####################################################################################
# Copyright 2013 Normation SAS
# Copyright 2016 Janos Mattyasovszky
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name File check is hardlink
# @description Checks if two files are the same (hard links)
# @documentation This bundle will define a condition `file_check_hardlink_${path}_{ok, reached, kept}` if the
# two files `${path}` and `${path_2}` are hard links of each other, or `file_check_hardlink_${path}_{not_ok, reached, not_kept, failed}` if
# if the files are not hard links.
#
# @parameter path   File name #1 (absolute path on the target node)
# @parameter path_2   File name #2 (absolute path on the target node)
#
#
# @parameter_rename file_name_1 path
# @parameter_rename file_name_2 path_2
# @class_prefix file_check_hardlink
# @class_parameter path
# @agent_support = ["cfengine-community"]

bundle agent file_check_hardlink(path, path_2)
{
  vars:
      "old_class_prefix"  string => canonify("file_check_hardlink_${path}");
      "args"               slist => { "${path}", "${path_2}" };
      "report_param"      string => join("_", args);
      "full_class_prefix" string => canonify("file_check_hardlink_${report_param}");
      "class_prefix"      string => string_head("${full_class_prefix}", "1000");



      "file_1_devno"        string => filestat("${path}", "devno");
      "file_1_ino"          string => filestat("${path}", "ino");
      "file_2_devno"        string => filestat("${path_2}", "devno");
      "file_2_ino"          string => filestat("${path_2}", "ino");


  classes:
      "file_1_exists"           expression => fileexists("${path}");
      "file_2_exists"           expression => fileexists("${path_2}");
      "files_match_device"      expression => strcmp("${file_1_devno}", "${file_2_devno}");
      "files_match_inode"       expression => strcmp("${file_1_ino}",   "${file_2_ino}");
      "files_are_hardlinks"     expression => "file_1_exists.file_2_exists.files_match_device.files_match_inode";


  methods:
    files_are_hardlinks::
      "files_are_hardlinks"
        usebundle => _classes_success("${old_class_prefix}");
      "files_are_hardlinks"
        usebundle => _classes_success("${class_prefix}");

    !files_are_hardlinks::
      "files_are_not_hardlinks"
        usebundle => _classes_failure("${old_class_prefix}");
      "files_are_not_hardlinks"
        usebundle => _classes_failure("${class_prefix}");

    any::
      "report"
        usebundle => _log_v3("Check if ${path} and ${path_2} are the same", "${path}", "${old_class_prefix}", "${class_prefix}", @{args});
}
