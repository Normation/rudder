#####################################################################################
# Copyright 2013 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Permissions type recursion
# @description Ensure that a file or directory is present and has the right mode/owner/group
# @documentation The method ensure that all files|directories|files and directories have
# the correct owner, group owner and permissions.
#
# The parameter *type* can be either: "*all*", "*files*" or "*directories*".
# The parameter *recursion* can be either: "*0,1,2,3,.... inf*"
# The level of recursion is the maximum depth of subfolder that will be managed by the method:
#
# * 0 being the current folder/file
# * 1 being the current folder/file and its subfolders
# * ..
# * inf being the file or the whole folder tree
#
# @parameter path      Path to edit
# @parameter mode      Mode of the path to edit
# @parameter owner     Owner of the path to edit
# @parameter group     Group of the path to edit
# @parameter type      Type of the path to edit (all/files/directories)
# @parameter recursion Recursion depth to enforce for this path (0, 1, 2, ..., inf)
#
# @parameter_constraint mode "allow_empty_string" : true
# @parameter_constraint owner "allow_empty_string" : true
# @parameter_constraint group "allow_empty_string" : true
#
# @class_prefix permissions
# @class_parameter path
# @agent_support = ["cfengine-community"]

bundle agent permissions_type_recursion(path, mode, owner, group, type, recursion)
{
  vars:
      "old_class_prefix"        string => canonify("permissions_${path}");
      "args"                     slist => { "${path}", "${mode}", "${owner}", "${group}", "${type}", "${recursion}" };
      "report_param"            string => join("_", args);
      "full_class_prefix"       string => canonify("permissions_${report_param}");
      "class_prefix"            string => string_head("${full_class_prefix}", "1000");

    pass3::
      #unset classes
      "cancel_mode"             string => "", classes => if_ok_cancel("permission_type_mode_set");
      "cancel_owner"            string => "", classes => if_ok_cancel("permission_type_owner_set");
      "cancel_group"            string => "", classes => if_ok_cancel("permission_type_group_set");
      
  classes:
      "is_type_all"         expression => strcmp("${type}", "all");
      "is_type_files"       expression => strcmp("${type}", "files");
      "is_type_directories" expression => strcmp("${type}", "directories");

      # Workaround for https://dev.cfengine.com/issues/7310
      "is_depth_zero"       expression => strcmp("${recursion}", "0");

      "target_exists"       expression => fileexists("${path}");
      "is_target_directory" expression => isdir("${path}");

      # define classes for mode, owner, group edition
      "permission_type_mode_set"   not => strcmp("", "${mode}"),
                                 scope => "namespace";
      "permission_type_owner_set"  not => strcmp("", "${owner}"),
                                 scope => "namespace";     
      "permission_type_group_set"  not => strcmp("", "${group}"),
                                 scope => "namespace";

      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";

      
  files:

    # all must be !pass3, as the classes that drive the body are unset in pass3
    !pass3.is_type_all.is_target_directory.!is_depth_zero::

      "${path}"
        create       => "false",
        perms        => ncf_mog_with_option("${mode}", "${owner}", "${group}"),
        depth_search => recurse_with_base("${recursion}"),
        classes      => classes_generic_two("${old_class_prefix}", "${class_prefix}");

    !pass3.is_type_all.((is_target_directory.is_depth_zero)|!is_target_directory)::

      "${path}"
        create       => "false",
        perms        => ncf_mog_with_option("${mode}", "${owner}", "${group}"),
        classes      => classes_generic_two("${old_class_prefix}", "${class_prefix}");

    !pass3.is_type_files.is_target_directory.!is_depth_zero::

      "${path}"
        create       => "false",
        perms        => ncf_mog_with_option("${mode}", "${owner}", "${group}"),
        depth_search => recurse("${recursion}"),
        file_select  => plain,
        classes      => classes_generic_two("${old_class_prefix}", "${class_prefix}");

    !pass3.is_type_files.((is_target_directory.is_depth_zero)|!is_target_directory)::

      "${path}"
        create       => "false",
        perms        => ncf_mog_with_option("${mode}", "${owner}", "${group}"),
        file_select  => plain,
        classes      => classes_generic_two("${old_class_prefix}", "${class_prefix}");

    !pass3.is_type_directories.is_target_directory.!is_depth_zero::

      "${path}"
        create       => "false",
        perms        => ncf_mog_with_option("${mode}", "${owner}", "${group}"),
        depth_search => recurse_with_base("${recursion}"),
        file_select  => dirs,
        classes      => classes_generic_two("${old_class_prefix}", "${class_prefix}");

    !pass3.is_type_directories.is_target_directory.is_depth_zero::

      "${path}"
        create       => "false",
        perms        => ncf_mog_with_option("${mode}", "${owner}", "${group}"),
        file_select  => dirs,
        classes      => classes_generic_two("${old_class_prefix}", "${class_prefix}");

  methods:

    is_type_directories.!is_target_directory::
      "error report if target is a file and we manage directory"
            usebundle => _classes_failure("${old_class_prefix}");
      "error report if target is a file and we manage directory"
            usebundle => _classes_failure("${class_prefix}");


    !target_exists::
      "error report if target doesn't exist"
        usebundle => _classes_failure("${old_class_prefix}");
      "error report if target doesn't exist"
        usebundle => _classes_failure("${class_prefix}");

    # need to sanitize classes as kept may be set when defining only the user or the group in recursive
    pass3::
      "sanitize" usebundle => _classes_sanitize("${old_class_prefix}");
      "sanitize" usebundle => _classes_sanitize("${class_prefix}");

      "report"             usebundle => _log_v3("Ensure permissions mode ${mode}, owner ${owner} and group ${group} on ${path} on type ${type} with ${recursion} recursion level", "${path}", "${old_class_prefix}", "${class_prefix}", @{args});
}
