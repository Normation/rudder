#####################################################################################
# Copyright 2014 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name File line in XML section
# @description Ensure that a line is present in a tag in a specific location. The objective of this method is to handle XML-style files. Note that if the tag is not present in the file, it won't be added, and the edition will fail.
#
# @parameter path File name to edit (absolute path on the target node)
# @parameter tag Name of the XML tag under which lines should be added (not including the <> brackets)
# @parameter line Line to ensure is present inside the section
#
#
# @parameter_rename file path
# @class_prefix file_line_present_in_xml_tag
# @class_parameter path
# @agent_support = ["cfengine-community"]

bundle agent file_line_present_in_xml_tag(path, tag, line)
{
  vars:
      "class_prefix"       string => canonify("file_line_present_in_xml_tag_${path}");
      "inner_class_prefix" string => "${report_data.method_id}_inner";

  classes:
      "pass3"              expression => "pass2";
      "pass2"              expression => "pass1";
      "pass1"              expression => "any";
      "opening_tag_exists" expression => regline("\s*<${tag}>\s*", "${path}");
      "closing_tag_exists" expression => regline("\s*</${tag}>\s*", "${path}");
      "tags_present"       expression => "opening_tag_exists.closing_tag_exists";

  files:
    pass3.tags_present::
      "${path}"
        edit_line     => ensure_line_in_xml_tag("${tag}", "${line}"),
        edit_defaults => ncf_empty_select("false"),
        classes       => classes_generic("${inner_class_prefix}");

  methods:
    pass3.!tags_present::
      "${report_data.method_id}" usebundle => _classes_failure("${report_data.method_id}");
      "${report_data.method_id}" usebundle => _classes_failure("${class_prefix}");
      "${report_data.method_id}" usebundle => log_rudder_v4("${path}", "Could not find XML tag ${tag} in file ${path}, insert line(s) in xml tag into ${path}", "");

    pass3.tags_present::
      "${report_data.method_id}" usebundle => _classes_sanitize("${inner_class_prefix}");
      "${report_data.method_id}" usebundle => _classes_copy("${inner_class_prefix}", "${class_prefix}");
      "${report_data.method_id}" usebundle => _classes_copy("${inner_class_prefix}", "${report_data.method_id}");
      "${report_data.method_id}" usebundle => log_rudder_v4("${path}", "Insert line(s) in xml tag into ${path}", "");
}
