#####################################################################################
# Copyright 2015 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Variable dict
# @description Define a variable that contains key,value pairs (a dictionary)
# @documentation To use the generated variable, you must use the form `${prefix.name[key]}` with each name replaced with the parameters of this method.
# 
# Be careful that using a global variable can lead to unpredictable content in case of multiple definition, which is implicitly the case when a technique has more than one instance (directive). 
# Please note that only global variables are available within templates.
#
# @parameter prefix The prefix of the variable name
# @parameter name   The variable to define, the full name will be prefix.name
# @parameter value           The variable content in JSON format
# 
# @parameter_rename variable_prefix prefix
# @parameter_rename variable_name name
# @parameter_constraint value  "valid_format" : "json"
# @class_prefix variable_dict
# @class_parameter name
# @agent_support = ["cfengine-community", "dsc"]

bundle agent variable_dict(prefix, name, value)
{
  vars:
      "old_class_prefix"  string => canonify("variable_dict_${name}");
      "args"               slist => { "${prefix}", "${name}", "${value}" };
      "report_param"      string => join("_", args);
      "full_class_prefix" string => canonify("variable_dict_${report_param}");
      "class_prefix"      string => string_head("${full_class_prefix}", "1000");

      # define the variable within the prefix namespace
      "${prefix}.${name}"  data => parsejson("${value}");

  classes:
     "variable_defined" expression => isvariable("${prefix}.${name}");

  methods:
    !variable_defined::
      "error"    usebundle => _classes_failure("${old_class_prefix}");
      "error"    usebundle => _classes_failure("${class_prefix}");

    variable_defined::
      "success"  usebundle => _classes_success("${old_class_prefix}");
      "success"  usebundle => _classes_success("${class_prefix}");

    any::
      "report"
        usebundle  => _log_v3("Set the dict ${prefix}.${name} to ${value}", "${name}", "${old_class_prefix}", "${class_prefix}", @{args});
}
