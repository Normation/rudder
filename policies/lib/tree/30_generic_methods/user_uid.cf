#####################################################################################
# Copyright 2017 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name User uid
# @description Define the uid of the user. User must already exists, uid must be non-allowed(unique).
# @documentation This method does not create the user.
#
# @parameter login User's login
# @parameter uid User's uid
# 
# @class_prefix user_uid
# @class_parameter login
# @agent_support = ["cfengine-community"]

bundle agent user_uid(login, uid)
{
  vars:
      "class_prefix"  string => "user_uid_${login}";
      "current_uid"      int => getuid(${login});

      "result_classes_prefix"  slist => {"${class_prefix}", "${report_data.method_id}"};
      
  classes:
      "user_exists"   expression => userexists("${login}");
      "user_diff_uid"        not => strcmp("${current_uid}", "${uid}");
      "user_free_uid"        not => userexists("${uid}");

      
      # we need to run user promise if user exist and uid is ok or uid is not ok and free
      "user_exists_uid_ok" expression => "user_exists.user_free_uid";

      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";

  users:
      "${login}"
         policy => "present",
            uid => "${uid}",
        classes => classes_generic_two("${report_data.method_id}", "${class_prefix}"),
             if => "user_exists_uid_ok.user_diff_uid";

  methods:

    pass3.!user_exists_uid_ok.user_diff_uid::
      "${report_data.method_id}" usebundle => _classes_failure("${result_classes_prefix}");

      "${report_data.method_id}" usebundle => log_rudder_v4("${login}", "User ${login} does not exist. Can't set user ${login} uid to ${uid}", ""),
                                        if => "!user_exists.user_free_uid";

      "${report_data.method_id}" usebundle => log_rudder_v4("${login}", "Uid ${uid} already in use. Can't set user ${login} uid to ${uid}", ""),
                                        if => "user_exists.!user_free_uid";

      "${report_data.method_id}" usebundle => log_rudder_v4("${login}", "Uid ${uid} already in use and user does not exists. Can't set user ${login} uid to ${uid}", ""),
                                        if => "!user_exists.!user_free_uid";

    pass3.!user_diff_uid::
      "${report_data.method_id}" usebundle => _classes_success("${result_classes_prefix}");
      "${report_data.method_id}" usebundle => log_rudder_v4("${login}", "User ${login} uid already set to ${uid}", "");

    pass3.user_exists_uid_ok.user_diff_uid::
      "${report_data.method_id}" usebundle => log_rudder_v4("${login}", "User ${login} uid set to ${uid}", "");

}

