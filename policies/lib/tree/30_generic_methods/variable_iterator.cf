#####################################################################################
# Copyright 2015 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Variable iterator
# @description Define a variable that will be automatically iterated over
# @documentation The generated variable is a special variable that is automatically
# iterated over. When you call a generic method with this variable as a parameter, n calls will be made,
# one for each items of the variable.
# Note: there is a limit of 10000 items 
#
# To use the generated variable, you must use the form `${prefix.name}` with each name replaced with the parameters of this method.
# 
# Be careful that using a global variable can lead to unpredictable content in case of multiple definition, which is implicitly the case when a technique has more than one instance (directive). 
# Please note that only global variables are available within templates.
#
# @parameter prefix The prefix of the variable name
# @parameter name   The variable to define, the full name will be prefix.name
# @parameter value           The variable content
# @parameter separator       Regular expression that is used to split the value into items ( usually: , )
# @parameter_constraint separator "allow_whitespace_string" : true
# 
#
# @parameter_rename variable_prefix prefix
# @parameter_rename variable_name name
# @class_prefix variable_iterator
# @class_parameter name
# @agent_support = ["cfengine-community"]

bundle agent variable_iterator(prefix, name, value, separator)
{
  vars:
      "class_prefix"     string => canonify("variable_iterator_${name}");
      # define the variable within the prefix namespace
      "${prefix}.${name}" slist => string_split("${value}", "${separator}", "10000");

  classes:
      "pass3"            expression => "pass2";
      "pass2"            expression => "pass1";
      "pass1"            expression => "any";
      "variable_defined" expression => isvariable("${prefix}.${name}");

  methods:
    pass3.!variable_defined::
      "${report_data.method_id}" usebundle => _classes_failure("${report_data.method_id}");
      "${report_data.method_id}" usebundle => _classes_failure("${class_prefix}");

    pass3.variable_defined::
      "${report_data.method_id}" usebundle => _classes_success("${report_data.method_id}");
      "${report_data.method_id}" usebundle => _classes_success("${class_prefix}");

    pass3::
      "${report_data.method_id}" usebundle => log_rudder_v4("${name}", "Set the iterator ${prefix}.${name} value to ${value}", "");
}
