#####################################################################################
# Copyright 2013 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Permissions (recursive)
# @description Verify if a file or directory has the right permissions recursively
# @documentation The method ensures that all files and directories under `path` have
# the correct owner, group owner and permissions.
#
# This method is in fact a call to the *permissions_type_recursion* method with "all" type and "inf" recursion.
#
# @parameter path  Path to the file / directory
# @parameter mode  Mode to enforce
# @parameter owner Owner to enforce
# @parameter group Group to enforce
# @parameter_constraint mode "allow_empty_string" : true
# @parameter_constraint owner "allow_empty_string" : true
# @parameter_constraint group "allow_empty_string" : true
# @class_prefix permissions
# @class_parameter path
# @agent_support = ["cfengine-community"]

bundle agent permissions_recursive(path, mode, owner, group)
{
  vars:
      "old_class_prefix"        string => canonify("permissions_${path}");

      "args"                     slist => { "${path}", "${mode}", "${owner}", "${group}" };
      "report_param"            string => join("_", args);
      "full_class_prefix"       string => canonify("permissions_${report_param}");
      "class_prefix"            string => string_head("${full_class_prefix}", "1000");

      "full_inner_class_prefix" string => canonify("permissions_${report_param}_all_inf");
      "inner_class_prefix"      string => string_head("${full_inner_class_prefix}", "1000");



  classes:
      "should_report"       expression => "${report_data.should_report}";

  methods:
      "disable_reporting_${class_prefix}"
                             usebundle => disable_reporting;
      "permission with recursion"
                             usebundle => permissions_type_recursion("${path}", "${mode}", "${owner}", "${group}", "all", "inf");
      "reenable_reporting_${class_prefix}"
                             usebundle => enable_reporting,
                            ifvarclass => "should_report";
      "new result classes"   usebundle => _classes_copy("${inner_class_prefix}", "${class_prefix}");

      "report"               usebundle => _log_v3("Ensure permissions mode ${mode}, owner ${owner} and group ${group} on ${path} with inf recursion level", "${path}", "${old_class_prefix}", "${class_prefix}", @{args});
}
