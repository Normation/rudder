#####################################################################################
# Copyright 2019 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Variable dict from osquery
# @description Define a variable that contains key,value pairs (a dictionary) from an osquery query
# @documentation To use the generated variable, you must use the form `${prefix.name[key]}` with each name replaced with the parameters of this method.
# 
# Be careful that using a global variable can lead to unpredictable content in case of multiple definition, which is implicitly the case when a technique has more than one instance (directive). 
# Please note that only global variables are available within templates.
#
# This method will define a dict variable from the output of an osquery query.
# The query will be executed at every agent run, and its result will be usable as a standard
# dict variable.
#
# #### Setup
#
# This method requires the presence of [osquery](https://osquery.io/) on the target nodes.
# It won't install it automatically. Check the correct way of doing so for your OS.
#
# #### Building queries
#
# To learn about the possible queries, read the [osquery schema](https://osquery.io/schema/) for your
# osquery version.
#
# You can test the queries before using them with the `osqueryi` command, see the example below.
#
# #### Examples
# 
# ```
# # To get the number of cpus on the machine
# variable_dict_from_osquery("prefix", "var1", "select cpu_logical_cores from system_info;");
# ```
#
# It will produce the dict from the output of:
#
# ```
# osqueryi --json "select cpu_logical_cores from system_info;"
# ```
#
# Hence something like:
#
# ```json
# [
#  {"cpu_logical_cores":"8"}
# ]
# ```
# 
# To access this value, use the `${prefix.var1[0][cpu_logical_cores]}` syntax.
#
# @parameter prefix The prefix of the variable name
# @parameter name   The variable to define, the full name will be prefix.name
# @parameter query           The query to execute (ending with a semicolon)
# 
# @parameter_rename variable_prefix prefix
# @parameter_rename variable_name name
# @class_prefix variable_dict_from_osquery
# @class_parameter name
# @agent_support = ["cfengine-community"]

bundle agent variable_dict_from_osquery(prefix, name, query)
{
  vars:
      "class_prefix"    string => canonify("variable_dict_from_osquery_${name}");
      "tmp_var_name"    string => canonify("${report_data.method_id}_tmp");
    pass2::
      "${prefix}.${name}" data => parsejson("${variable_dict_from_osquery_tmp.${tmp_var_name}}"),
                            if => "${tmp_var_name}_ok";

  classes:
    any::
      "pass3"            expression => "pass2";
      "pass2"            expression => "pass1";
      "pass1"            expression => "any";
    pass3::
      "variable_defined" expression => isvariable("${prefix}.${name}");

  methods:
    pass1.!pass2::
      # store string output in temp variable
      "${report_data.method_id}" usebundle => call_method("variable_string_from_command");
      "${report_data.method_id}" usebundle => variable_string_from_command("variable_dict_from_osquery_tmp", "${tmp_var_name}", "osqueryi --json \"${query}\" 2>/dev/null");
      "${report_data.method_id}" usebundle => call_method_classes("${tmp_var_name}");
      "${report_data.method_id}" usebundle => call_method_end("variable_string_from_command");

    pass3.!variable_defined::
      "${report_data.method_id}" usebundle => _classes_failure("${report_data.method_id}");
      "${report_data.method_id}" usebundle => _classes_failure("${class_prefix}");

    pass3.variable_defined::
      "${report_data.method_id}" usebundle => _classes_success("${report_data.method_id}");
      "${report_data.method_id}" usebundle => _classes_success("${class_prefix}");

    pass3::
      "${report_data.method_id}" usebundle => log_rudder_v4("${name}", "Set the dict ${prefix}.${name} to the result of the '${query}' query", "");
}
