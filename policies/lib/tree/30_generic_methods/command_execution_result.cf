#####################################################################################
# Copyright 2015 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Command execution result
# @description Execute a command and create result conditions depending on its exit code
# @action
# @documentation Execute a command and create result conditions
# depending on the exit codes given in parameters.
# If an exit code is not in the list it will lead to an error status.
# If you want 0 to be a success you have to list it in the **kept_codes** list
#
# @parameter command        Command to run
# @parameter kept_codes     List of codes that produce a kept status separated with commas (ex: 1,2,5)
# @parameter repaired_codes List of codes that produce a repaired status separated with commas (ex: 3,4,6)
#
# @class_prefix command_execution_result
# @class_parameter command
# @agent_support = ["cfengine-community"]

bundle agent command_execution_result(command, kept_codes, repaired_codes)
{
  vars:
      "class_prefix"  string => canonify("command_execution_result_${command}");

      "kept_list"     slist => splitstring("${kept_codes}", "\s*,\s*", "256");
      "repaired_list" slist => splitstring("${repaired_codes}", "\s*,\s*", "256");

  classes:
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";


  methods:
    pass3.dry_run::
      "${report_data.method_id}" usebundle  => _classes_noop("${report_data.method_id}");
      "${report_data.method_id}" usebundle  => _classes_noop("${class_prefix}");
    pass3::
      "${report_data.method_id}" usebundle  => log_rudder_v4("${command}", "Execute command", "${command}");

  commands:
    pass2.!pass3.!dry_run::
      "${command}"
        contain      => in_shell,
        classes      => classes_generic_return_code_list_two("${report_data.method_id}", "${class_prefix}", @{kept_list}, @{repaired_list});
}
