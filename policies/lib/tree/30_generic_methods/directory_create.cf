#####################################################################################
# Copyright 2014 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Directory create
# @description Create a directory if it doesn't exist
# @rename directory_present
# @deprecated Use [directory_present](#_directory_present) instead.
#
# @parameter path       Full path of directory to create (trailing '/' is optional)
#
#
# @parameter_rename target path
# @class_prefix directory_create
# @class_parameter path
# @agent_support = ["cfengine-community", "dsc"]

bundle agent directory_create(path)
{
  vars:
      "canonified_path" string => canonify("${path}");

      "old_class_prefix"  string => canonify("directory_create_${path}");
      "full_class_prefix" string => canonify("directory_create_${path}");
      "class_prefix"      string => string_head("${full_class_prefix}", "1000");
      "args"              slist => { "${path}" };

  classes:
      "should_report"    expression => "${report_data.should_report}";

  methods:
    "disable_reporting_${class_prefix}"     usebundle => disable_reporting;
    "action"             usebundle => directory_present("${path}");
    "reenable_reporting_${class_prefix}"    usebundle => enable_reporting,
                         ifvarclass => "should_report";

    "class copy"         usebundle  => _classes_copy("directory_present_${canonified_path}", "${old_class_prefix}"),
                         ifvarclass => "directory_present_${canonified_path}_reached";
    "new result classes" usebundle  => _classes_copy("directory_present_${canonified_path}","${class_prefix}"),
                         ifvarclass => "directory_present_${canonified_path}_reached";
    "report"             usebundle  => _log_v3("Create directory ${path}", "${path}", "${old_class_prefix}", "${class_prefix}", @{args});
}

