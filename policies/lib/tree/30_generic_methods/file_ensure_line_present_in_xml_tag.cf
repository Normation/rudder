#####################################################################################
# Copyright 2014 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name File ensure line in XML section
# @rename file_line_present_in_xml_tag
# @deprecated Use [file_line_present_in_xml_tag](#_file_line_present_in_xml_tag) instead.
# @description Ensure that a line is present in a tag in a specific location. The objective of this method is to handle XML-style files. Note that if the tag is not present in the file, it won't be added, and the edition will fail.
#
# @parameter path File name to edit (absolute path on the target node)
# @parameter tag Name of the XML tag under which lines should be added (not including the <> brackets)
# @parameter line Line to ensure is present inside the section
#
#
# @parameter_rename file path
# @class_prefix file_ensure_line_present_in_xml_tag
# @class_parameter path
# @agent_support = ["cfengine-community"]

bundle agent file_ensure_line_present_in_xml_tag(path, tag, line)
{
  vars:
      "class_prefix" string => canonify("file_ensure_line_present_in_xml_tag_${path}");

  classes:
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";

  methods:
    pass3::
      "${report_data.method_id}" usebundle => call_method("file_line_present_in_xml_tag");
      "${report_data.method_id}" usebundle => file_line_present_in_xml_tag("${path}", "${tag}", "${line}");
      "${report_data.method_id}" usebundle => call_method_classes("${class_prefix}");
      "${report_data.method_id}" usebundle => call_method_classes_caller;
      "${report_data.method_id}" usebundle => call_method_end("file_line_present_in_xml_tag");
      "${report_data.method_id}" usebundle => log_rudder_v4("${path}", "Insert line(s) into ${path}", "");
}
