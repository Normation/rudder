#####################################################################################
# Copyright 2013 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name File download
# @description Download a file if it does not exist, using curl with a fallback on wget
# @rename file_from_http_server
# @deprecated Use [file_from_http_server](#_file_from_http_server) instead.
# @documentation This method finds a HTTP command-line tool and downloads the given source
# into the destination.
# 
# It tries `curl` first, and `wget` as fallback.
#
# @parameter source      URL to download from
# @parameter path        File destination (absolute path on the target node)
#
# 
# @parameter_rename destination path
# @class_prefix file_download
# @class_parameter path
# @agent_support = ["cfengine-community", "dsc"]

bundle agent file_download(source, path)
{

  vars:


    any::
      "canonified_path"           string => canonify("${path}");

      "old_class_prefix"          string => "file_download_${canonified_path}";

      "args"                       slist => { "${source}", "${path}" };
      "report_param"              string => join("_", args);
      "full_class_prefix"         string => canonify("file_download_${report_param}");
      "class_prefix"              string => string_head("${full_class_prefix}", "1000");

      "full_inner_class_prefix"   string => canonify("file_from_http_server_${report_param}");
      "inner_class_prefix"        string => string_head("${full_inner_class_prefix}", "1000");


  classes:
      "should_report"         expression => "${report_data.should_report}";

  methods:
      "disable_reporting_${class_prefix}"
                               usebundle => disable_reporting;
      "action"                 usebundle => file_from_http_server("${source}", "${path}");
      "reenable_reporting_${class_prefix}"
                               usebundle => enable_reporting,
                              ifvarclass => "should_report";
      "class copy"             usebundle => _classes_copy("file_from_http_server_${canonified_path}", "${old_class_prefix}"),
                              ifvarclass => "file_from_http_server_${canonified_path}_reached";
      "new result classes"     usebundle => _classes_copy("${inner_class_prefix}", "${class_prefix}"),
                              ifvarclass => "${inner_class_prefix}_reached";
      "report"                 usebundle => _log_v3("Download ${source} into ${path}", "${path}", "${old_class_prefix}", "${class_prefix}", @{args});

}
