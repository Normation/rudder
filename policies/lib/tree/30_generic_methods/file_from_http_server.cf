#####################################################################################
# Copyright 2013 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name File from HTTP server
# @description Download a file if it does not exist, using curl with a fallback on wget
# @documentation This method finds a HTTP command-line tool and downloads the given source
# into the destination if it does not exist yet.
#
# This method **will NOT update the file after the first download** until its removal.
#
# On Linux based nodes it will tries `curl` first and fallback with `wget` if needed.
# On Windows based nodes, only `curl` will be used.
#
# @parameter source      URL to download from
# @parameter path File destination (absolute path on the target node)
#
#
# @parameter_rename destination path
# @class_prefix file_from_http_server
# @class_parameter path
# @agent_support = ["cfengine-community", "dsc"]

bundle agent file_from_http_server(source, path)
{
  vars:
    _ncf_path_exists_curl::
      "action_command" string => "${ncf_paths.path[curl]} -f -s -L -o ${path} ${source}";
    !_ncf_path_exists_curl._stdlib_path_exists_wget::
      "action_command" string => "${paths.path[wget]} -O ${path} ${source}";
    any::
      "class_prefix"   string => "file_from_http_server_${path}";


  classes:
      "pass3"       expression => "pass2";
      "pass2"       expression => "pass1";
      "pass1"       expression => "any";
    !pass3::
      "file_exists" expression => fileexists("${path}");

  methods:
    pass3.dry_run.!file_exists::
      "${report_data.method_id}" usebundle => _classes_failure("${report_data.method_id}");
      "${report_data.method_id}" usebundle => _classes_failure("${class_prefix}");
      "${report_data.method_id}" usebundle => log_rudder_v4("${path}", "Unable to find file ${path}. Download file from http server", "");
    pass3.!dry_run.(_ncf_path_exists_curl|_stdlib_path_exists_wget).!file_exists::
      "${report_data.method_id}" usebundle => call_method("command_execution");
      "${report_data.method_id}" usebundle => command_execution("${action_command}");
      "${report_data.method_id}" usebundle => call_method_classes("${class_prefix}");
      "${report_data.method_id}" usebundle => call_method_classes_caller;
      "${report_data.method_id}" usebundle => call_method_end("command_execution");
      "${report_data.method_id}" usebundle => log_rudder_v4("${path}", "Download ${source} into ${path}", "");

    pass3.!_ncf_path_exists_curl.!_stdlib_path_exists_wget.!file_exists::
      "${report_data.method_id}" usebundle => _classes_failure("${report_data.method_id}");
      "${report_data.method_id}" usebundle => _classes_failure("${class_prefix}");
      "${report_data.method_id}" usebundle => log_rudder_v4("${path}", "Unable to download ${source}: neither wget or curl are installed", "");

    pass3.file_exists::
      "${report_data.method_id}" usebundle => _classes_success("${report_data.method_id}");
      "${report_data.method_id}" usebundle => _classes_success("${class_prefix}");
      "${report_data.method_id}" usebundle => log_rudder_v4("${path}", "File ${path} already downloaded", ""),
                                        if => "!${report_data.method_id}_repaired";

}
