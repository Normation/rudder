#####################################################################################
# Copyright 2013 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name File from HTTP server
# @description Download a file if it does not exist, using curl with a fallback on wget
# @documentation This method finds a HTTP command-line tool and downloads the given source
# into the destination if it does not exist yet.
#
# This method **will NOT update the file after the first download** until its removal.
#
# On Linux based nodes it will tries `curl` first and fallback with `wget` if needed.
# On Windows based nodes, only `curl` will be used.
#
# @parameter source      URL to download from
# @parameter path File destination (absolute path on the target node)
#
#
# @parameter_rename destination path
# @class_prefix file_from_http_server
# @class_parameter path
# @agent_support = ["cfengine-community", "dsc"]

bundle agent file_from_http_server(source, path)
{

  vars:


    _ncf_path_exists_curl::
      "action_command"            string => "${ncf_paths.path[curl]} -f -s -L -o ${path} ${source}";


    !_ncf_path_exists_curl._stdlib_path_exists_wget::
      "action_command"            string => "${paths.path[wget]} -O ${path} ${source}";


    any::
      "canonified_path"    string => canonify("${path}");
      "canonified_action_command" string => canonify("${action_command}");

      "old_class_prefix"          string => "file_from_http_server_${canonified_path}";
      "args"                       slist => { "${source}", "${path}" };
      "report_param"              string => join("_", args);
      "full_class_prefix"         string => canonify("file_from_http_server_${report_param}");
      "class_prefix"              string => string_head("${full_class_prefix}", "1000");


  classes:

      "file_exists"    expression => fileexists("${path}");

      "should_report"  expression => "${report_data.should_report}";

  methods:
      "disable_reporting_${class_prefix}"
                        usebundle => disable_reporting;


    (_ncf_path_exists_curl|_stdlib_path_exists_wget).!file_exists::
      "action"          usebundle => command_execution("${action_command}");

    any::
      "reenable_reporting_${class_prefix}"
                        usebundle => enable_reporting,
                       ifvarclass => "should_report";
    (_ncf_path_exists_curl|_stdlib_path_exists_wget).!file_exists::
      "class copy"      usebundle => _classes_copy("command_execution_${canonified_action_command}", "${old_class_prefix}");

      "new result classes"
                        usebundle => _classes_copy("command_execution_${canonified_action_command}", "${class_prefix}");

      "report"          usebundle => _log_v3("Download ${source} into ${path}", "${path}", "${old_class_prefix}", "${class_prefix}", @{args}),
                       ifvarclass => "${class_prefix}_reached";


    !_ncf_path_exists_curl.!_stdlib_path_exists_wget.!file_exists::
      "force_failure_class"       usebundle => _classes_failure("${old_class_prefix}");
      "new result classes"        usebundle => _classes_failure("${class_prefix}");
      "report"                    usebundle => _log_v3("Unable to download ${source}: neither wget or curl are installed", "${path}", "${old_class_prefix}", "${class_prefix}", @{args});


    file_exists::
      "force_success_class"       usebundle => _classes_success("${old_class_prefix}"),
                                 ifvarclass => "!command_execution_${canonified_action_command}_repaired";
      "new result classes"        usebundle => _classes_success("${class_prefix}"),
                                 ifvarclass => "!${class_prefix}_action_repaired";
      "report"                    usebundle => _log_v3("File ${path} already downloaded", "${path}", "${old_class_prefix}", "${class_prefix}", @{args}),
                                 ifvarclass => "!command_execution_${canonified_action_command}_repaired";

}
