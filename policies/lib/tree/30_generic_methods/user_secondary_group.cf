#####################################################################################
# Copyright 2020 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name User secondary groups
# @description Define secondary groups for a user
# @documentation Make sure that a user belong to the listed groups
#
# #### Behavior
#
# Ensure that the user belongs in the given secondary group, if `force` is set,
# the user will be force to only be part of the listed `groups`.
#
# #### Examples
#
# ```yaml
# -name: bob must be in the printers group
#  method: user_secondary_groups
#  params:
#    login: bob
#    groups: printers
#    force: false
# ```
#
# ```yaml
# -name: jenkins must only be part of jenkins and docker
#  method: user_secondary_groups
#  params:
#    login: jenkins
#    groups: jenkins,docker
#    force: true
# ```
#
# @parameter login      User login
# @parameter groups     Comma separated secondary groups name
# @parameter force      Remove user from non-listed groups, "true" or "false" (defaults to "false")
#
# @parameter_constraint force "select" : [ "", "true", "false" ]
# @parameter_constraint force "allow_empty_string" : true
#
# @class_prefix user_secondary_groups
# @class_parameter login
# @agent_support = ["cfengine-community"]

bundle agent user_secondary_groups(login, groups, force) {
  vars:
      "class_prefix"  string => canonify("user_secondary_groups_${login}");
      "group_list"     slist => string_split("${groups}", ",", "999999");

      "result_classes_prefix" slist => {"${class_prefix}", "${report_data.method_id}"};

      "inner_result" string => "inner_${report_data.method_id}";

  defaults:
      "force" string => "false", if_match_regex => "";

  classes:
      "user_exists"         expression => userexists("${login}");
      "group_not_found"            not => groupexists("${group_list}");
      "purge_other_groups"  expression => strcmp("${force}", "true");
      
      "user_and_groups_exist" expression => "user_exists.!group_not_found";

      "fallback_user_group" expression => "!purge_other_groups.user_and_groups_exist";

    any::
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";

  users:
    pass2::
      "${login}"
                  policy => "present",
        groups_secondary => { @{group_list} },
                 classes => classes_generic_two("${class_prefix}", "${report_data.method_id}"),
                      if => "purge_other_groups.user_and_groups_exist";

  methods:
    # Without enforce, fallback to user_group, we need to use another bundle since we are using an iterator (group_list) here
    pass2.fallback_user_group::
      "${report_data.method_id}" usebundle => run_user_group("${login}","${group_list}", "${inner_result}");

    # Result class definition
    pass3.fallback_user_group::
      "${report_data.method_id}" usebundle => _classes_copy("${inner_result}","${result_classes_prefix}");

    pass3.!user_and_groups_exist::
      "${report_data.method_id}" usebundle => _classes_failure("${result_classes_prefix}");

      "${report_data.method_id}" usebundle => log_rudder_v4("${login}", "User ${login} does not exist. Can't set up secondary groups", ""),
                                        if => "!user_exists.!group_not_found";

      "${report_data.method_id}" usebundle => log_rudder_v4("${login}", "Some groups do not exist. Can't set up secondary groups", ""),
                                        if => "user_exists.group_not_found";

      "${report_data.method_id}" usebundle => log_rudder_v4("${login}", "Some groups do not exist and user ${login} does not exist. Can't set up secondary groups", ""),
                                        if => "!user_exists.group_not_found";

    # Reporting
    pass3.user_and_groups_exist::
     "${report_data.method_id}" usebundle => log_rudder_v4("${login}", "Setting secondary groups for user ${login}", "");

}

bundle agent run_user_group(login, group, inner_result) {
  classes:
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";

  methods:
    pass3::
      "${report_data.method_id}" usebundle => call_method("user_group_${group}");
      "${report_data.method_id}" usebundle => user_group("${login}","${group}");
      "${report_data.method_id}" usebundle => call_method_classes("${inner_result}");
      "${report_data.method_id}" usebundle => call_method_end("user_group_${group}");

}