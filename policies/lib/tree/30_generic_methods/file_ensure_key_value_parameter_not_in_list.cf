#####################################################################################
# Copyright 2017 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name File ensure key-value parameter not in list
# @rename file_key_value_parameter_absent_in_list
# @deprecated Use [file_key_value_parameter_absent_in_list](#_file_key_value_parameter_absent_in_list) instead.
# @description Ensure that a parameter doesn't exist in a list of parameters, on one single line, in the right hand side of a key->values line
# @documentation Edit the file, and ensure it does not contain the defined parameter in the list of values on the right hand side of a key->values line.
# If the parameter is there, it will be removed. Please note that the parameter can be a regular expression. It will also remove any whitespace character between the `parameter` and `parameter_separator`
# Optionally, you can define leading and closing character to enclose the parameters
#
# #### Example
# 
# If you have an initial file (`/etc/default/grub`) containing
# 
# ```
# GRUB_CMDLINE_XEN="dom0_mem=16G dom0_max_vcpus=32"
# ```
#
# To remove parameter `dom0_max_vcpus=32` in the right hand side of the line, you'll need the following policy
#
# ```
# file_ensure_key_value_parameter_not_in_list("/etc/default/grub", "GRUB_CMDLINE", "=", "dom0_max_vcpus=32", " ", "\"", "\"");
# ```
#
# @parameter path File name to edit (absolute path on the target node)
# @parameter key Full key name
# @parameter key_value_separator character used to separate key and value in a key-value line
# @parameter parameter_regex Regular expression matching the sub-value to ensure is not present in the list of parameters that form the value part of that line
# @parameter parameter_separator Character used to separate parameters in the list
# @parameter leading_char_separator leading character of the parameters
# @parameter closing_char_separator closing character of the parameters
# @parameter_constraint key_value_separator "allow_whitespace_string" : true
# @parameter_constraint parameter_separator "allow_whitespace_string" : true
# @parameter_constraint leading_char_separator "allow_empty_string" : true
# @parameter_constraint closing_char_separator "allow_empty_string" : true
#
#
# @parameter_rename file path
# @class_prefix file_ensure_key_value_parameter_not_in_list
# @class_parameter path
# @agent_support = ["cfengine-community"]

bundle agent file_ensure_key_value_parameter_not_in_list(path, key, key_value_separator, parameter_regex, parameter_separator, leading_char_separator, closing_char_separator)
{
  vars:
      "old_class_prefix"        string => canonify("file_ensure_key_value_parameter_not_in_list_${path}");

      "args"                     slist => { "${path}", "${key}", "${key_value_separator}", "${parameter_regex}", "${parameter_separator}", "${leading_char_separator}", "${closing_char_separator}" };
      "report_param"            string => join("_", args);
      "full_class_prefix"       string => canonify("file_ensure_key_value_parameter_not_in_list_${report_param}");
      "class_prefix"            string => string_head("${full_class_prefix}", "1000");

      "full_inner_class_prefix" string => canonify("file_key_value_parameter_absent_in_list_${report_param}");
      "inner_class_prefix"      string => string_head("${full_inner_class_prefix}", "1000");


      "canonified_path"    string => canonify("${path}");


  classes:
      "should_report"   expression => "${report_data.should_report}";

  methods:
      "disable_reporting_${class_prefix}"
                           usebundle => disable_reporting;
      "action"             usebundle => file_key_value_parameter_absent_in_list("${path}", "${key}", "${key_value_separator}", "${parameter_regex}", "${parameter_separator}", "${leading_char_separator}", "${closing_char_separator}");
      "reenable_reporting_${class_prefix}"    usebundle => enable_reporting,
                          ifvarclass => "should_report";
      "class copy"         usebundle => _classes_copy("file_key_value_parameter_absent_in_list_${canonified_path}", "${old_class_prefix}"),
                          ifvarclass => "file_key_value_parameter_absent_in_list_${canonified_path}_reached";
      "new result classes" usebundle => _classes_copy("${inner_class_prefix}", "${class_prefix}"),
                          ifvarclass => "${inner_class_prefix}_reached";
      "report"             usebundle => _log_v3("Ensure parameter not in line ${key}${key_value_separator} values in ${path}", "${path}", "${old_class_prefix}", "${class_prefix}", @{args});
}
