#####################################################################################
# Copyright 2019 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Variable dict from file type
# @description Define a variable that contains key,value pairs (a dictionary) from a JSON, CSV or YAML file
# @documentation To use the generated variable, you must use the form `${prefix.name[key]}` with each name replaced with the parameters of this method.
# 
# Be careful that using a global variable can lead to unpredictable content in case of multiple definition, which is implicitly the case when a technique has more than one instance (directive). 
#
# This method will load data from various file formats (yaml, json, csv). 
#
# #### CSV parsing
#
# The input file must use CRLF as line delimiter
# to be readable (as stated in RFC 4180).
# 
# #### Examples
# 
# ```
# # To read a json file with format auto detection 
# variable_dict_from_file_type("prefix", "var", "/tmp/file.json", "");
# # To force yaml reading on a non file without yaml extension
# variable_dict_from_file_type("prefix", "var", "/tmp/file", "YAML");
# ```
#
# If `/tmp/file.json` contains:
#
# ```json
# {
#   "key1": "value1"
# }
# ```
#
# You will be able to access the `value1` value with `${prefix.var[key1]}`.
# 
# @parameter prefix The prefix of the variable name
# @parameter name   The variable to define, the full name will be prefix.name
# @parameter file_name       The file name to load data from
# @parameter file_type       The file type, can be "JSON", "CSV", "YAML" or "auto" for auto detection based on file extension, with a fallback to JSON (default is "auto")
# @parameter_constraint file_type "allow_empty_string" : true
# @parameter_constraint file_type "select" : [ "", "auto", "JSON", "YAML", "CSV" ]
# 
# @parameter_rename variable_prefix prefix
# @parameter_rename variable_name name
# @class_prefix variable_dict_from_file_type
# @class_parameter name
# @agent_support = ["cfengine-community"]

bundle agent variable_dict_from_file_type(prefix, name, file_name, file_type)
{
  vars:
      "old_class_prefix"  string => canonify("variable_dict_from_file_type_${name}");
      "args"               slist => { "${prefix}", "${name}", "${file_name}", "${file_type}" };
      "report_param"      string => join("_", args);
      "full_class_prefix" string => canonify("variable_dict_from_file_type_${report_param}");
      "class_prefix"      string => string_head("${full_class_prefix}", "1000");

      # define the variable within the prefix namespace
      "${prefix}.${name}"  data => readdata("${file_name}", "${file_type}");

  defaults:
      "file_type"         string => "auto", if_match_regex => "";

  classes:
     "variable_defined" expression => isvariable("${prefix}.${name}");

  methods:
    !variable_defined::
      "error"    usebundle => _classes_failure("${old_class_prefix}");
      "error"    usebundle => _classes_failure("${class_prefix}");

    variable_defined::
      "success"  usebundle => _classes_success("${old_class_prefix}");
      "success"  usebundle => _classes_success("${class_prefix}");

    any::
      "report"
        usebundle  => _log_v3("Set the dict ${prefix}.${name} to the content of ${file_name} (format ${file_type})", "${name}", "${old_class_prefix}", "${class_prefix}", @{args});
}
