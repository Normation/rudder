#####################################################################################
# Copyright 2019 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Variable string escaped
# @description Define a variable from another string variable and escape regular expression characters in it.
# @documentation To use the generated variable, you must use the form `${<name>_escaped}` where <name> is the composed complete name
# of the variable you want to escape.
#
# Please note that the variable you want to escape must be defined before this method evaluation.
#
# #### Example:
#
# With a variable defined by the generic method `variable_string`, named `my_prefix.my_variable` and valued to:
#
# ````
#  something like [] that
# ````
#
# Passing `my_prefix.my_variable` as `name` parameter to this method will result in a
# variable named `my_prefix.my_variable_escaped` and valued to:
#
# ````
# something\ like\ \[\]\ that
# ````
#
# @parameter name   The variable to define, the full name will be prefix.name
#
# @parameter_rename variable_name name
# @class_prefix variable_string_escaped
# @class_parameter name
# @agent_support = ["cfengine-community"]

bundle agent variable_string_escaped(name)
{
  vars:
      "class_prefix"    string => canonify("variable_string_escaped_${name}");
      # define the variable within the same namespace
      "${name}_escaped" string => escape("${${name}}");

  classes:
      "pass3"            expression => "pass2";
      "pass2"            expression => "pass1";
      "pass1"            expression => "any";
      "variable_defined" expression => isvariable("${name}_escaped");

  methods:
    pass3.!variable_defined::
      "${report_data.method_id}" usebundle => _classes_failure("${report_data.method_id}");
      "${report_data.method_id}" usebundle => _classes_failure("${class_prefix}");

    pass3.variable_defined::
      "${report_data.method_id}" usebundle => _classes_success("${report_data.method_id}");
      "${report_data.method_id}" usebundle => _classes_success("${class_prefix}");

    pass3::
      "${report_data.method_id}" usebundle => log_rudder_v4("${name}", "Set the string ${name}_escaped to the escaped value of ${name}", "");
}

