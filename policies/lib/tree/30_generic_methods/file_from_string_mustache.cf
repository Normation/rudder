#####################################################################################
# Copyright 2016 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name File from a mustache string
# @description Build a file from a mustache string
# @documentation Build a file from a mustache string.
# Complete mustache documentation is available in the *file\_from\_template\_mustache* method documentation.
#
# @parameter template        String containing a template to be expanded
# @parameter path     Destination file (absolute path on the target node
#
#
# @parameter_rename destination path
# @class_prefix file_from_string_mustache
# @class_parameter path
# @agent_support = ["cfengine-community"]
# This bundle will define a condition file_from_string_mustache_${path}_{kept,repaired,not_ok,ok,reached}

bundle agent file_from_string_mustache(template, path)
{
  vars:
      "class_prefix"       string => canonify("file_from_string_mustache_${path}");
      "inner_class_prefix" string => "${report_data.method_id}_inner";
      "content"            string => "EMPTY_RUDDER_TEMPLATE";
      "content"            string => string_mustache("${template}", datastate());

  classes:
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";
      "content_not_updated" expression => strcmp("${content}", "EMPTY_RUDDER_TEMPLATE");

  files:
    pass3.!content_not_updated::
      "${path}"
        create        => "true",
        edit_line     => insert_lines("${content}"),
        edit_defaults => ncf_empty_select("true"),
        classes       => classes_generic("${inner_class_prefix}");

  methods:
    pass3.content_not_updated::
      "${report_data.method_id}" usebundle => _classes_failure("${report_data.method_id}");
      "${report_data.method_id}" usebundle => _classes_failure("${class_prefix}");
    pass3.!content_not_updated::
      "${report_data.method_id}" usebundle => _classes_sanitize("${inner_class_prefix}");
      "${report_data.method_id}" usebundle => _classes_copy("${inner_class_prefix}", "${class_prefix}");
      "${report_data.method_id}" usebundle => _classes_copy("${inner_class_prefix}", "${report_data.method_id}");
    pass3::
      "${report_data.method_id}" usebundle => log_rudder_v4("${path}", "Build file ${path} from string template", "");
}
