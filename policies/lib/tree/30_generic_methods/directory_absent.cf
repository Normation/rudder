#####################################################################################
# Copyright 2017 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Directory absent
# @description Ensure a directory's absence
# @documentation If `recursive` is false, only an empty directory can be deleted.
#
# @parameter path       Directory to remove
# @parameter recursive  Should deletion be recursive, "true" or "false" (defaults to "false")
# @parameter_constraint recursive "allow_empty_string" : true
# 
#
# @parameter_rename target path
# @class_prefix directory_absent
# @class_parameter path
# @agent_support = ["cfengine-community", "dsc"]

bundle agent directory_absent(path, recursive)
{
  vars:
      "class_prefix" string => canonify("directory_absent_${path}");

  defaults:
      "recursive"    string => "false", if_match_regex => "";

  classes:
      "is_recursive"           expression => strcmp("true", "${recursive}");

    pass2::
      "directory_exists_after" expression => isdir("${path}");
      "path_exists_after"      expression => fileexists("${path}");

    any::
      "pass3"                  expression => "pass2";
      "pass2"                  expression => "pass1";
      "pass1"                  expression => "any";

  files:

    pass1.is_recursive::
      "${path}/."
        delete        => tidy,
        file_select   => all,
        depth_search  => recurse_with_base("inf"),
        classes       => classes_generic_two("${report_data.method_id}_inside", "${class_prefix}_inside");

    pass1::
      "${path}/."
        delete        => tidy,
        file_select   => all,
        classes       => classes_generic_two("${report_data.method_id}", "${class_prefix}"),
        if            => "!${report_data.method_id}_inside_error";

  methods:

    # If path was not empty, we need to trigger an error manually as the files promise will be kept
    # Because of https://tracker.mender.io/browse/CFE-1570
    pass3.directory_exists_after::
      "${report_data.method_id}" usebundle => _classes_failure("${class_prefix}");
      "${report_data.method_id}" usebundle => _classes_failure("${report_data.method_id}");
      "${report_data.method_id}" usebundle => _classes_sanitize("${class_prefix}");
      "${report_data.method_id}" usebundle => _classes_sanitize("${report_data.method_id}");

    pass3::
      # Use classes of the first promise when it failed
      "${report_data.method_id}" usebundle => _classes_copy("${report_data.method_id}_inside", "${report_data.method_id}"),
                                        if => "${report_data.method_id}_inside_error";
      "${report_data.method_id}" usebundle => _classes_copy("${report_data.method_id}_inside", "${class_prefix}"),
                                        if => "${report_data.method_id}_inside_error";

      "${report_data.method_id}" usebundle => log_rudder_v4("${path}", "Remove directory ${path}", "");

  reports:
    pass3.info.path_exists_after.!directory_exists_after::
      "${configuration.info} Found a non-directory object with the name ${path} while ensuring this directory did not exist";
}
