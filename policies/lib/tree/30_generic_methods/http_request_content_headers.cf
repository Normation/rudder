#####################################################################################
# Copyright 2014 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name HTTP request sending content with headers
# @description Make an HTTP request with a specific header
# @action We don't know when HTTP methods cause side effect, this can be an action or not depending on your server behavior
# @documentation Perform a HTTP request on the URL, method and headers provided 
# and send the content provided. Will return an error if the request failed.
#
# @parameter method Method to call the URL (POST, PUT)
# @parameter url URL to send content to
# @parameter content Content to send
# @parameter headers Headers to include in the HTTP request
# @parameter_constraint headers "allow_empty_string" : true
#
# @class_prefix http_request_content_headers
# @class_parameter url
# @agent_support = ["cfengine-community"]

bundle agent http_request_content_headers(method, url, content, headers)
{
  vars:
      "class_prefix" string => canonify("http_request_content_headers_${url}");

  classes:
    any::
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";

  methods:
    pass3.!_ncf_path_exists_curl::
      "${report_data.method_id}" usebundle => _classes_failure("${report_data.method_id}");
      "${report_data.method_id}" usebundle => _classes_failure("${class_prefix}");
      "${report_data.method_id}" usebundle => log_rudder_v4("${url}", "Unable to perform a HTTP ${method} on ${url}: curl is not installed", "");
    pass3::
      "${report_data.method_id}" usebundle => log_rudder_v4("${url}", "Performing a HTTP ${method} request on ${url} with specific content", "");


  commands:
    pass2::
      "/bin/echo \"${content}\" | ${ncf_paths.path[curl]}"
        args    => "${url} -L -X ${method} -H '${headers}' -o /dev/null -s -f -d @-",
        contain => in_shell,
        classes => classes_generic_two("${report_data.method_id}", "${class_prefix}");

}

