#####################################################################################
# Copyright 2014 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Service started with service path
# @description Ensure that a service is running using the appropriate method, specifying the path of the service in the ps output, or using Windows task manager
# 
# @parameter name Service name (as recognized by systemd, init.d, Windows, etc...)
# @parameter path Service with its path, as in the output from 'ps'
#
#
# @parameter_rename service_name name
# @parameter_rename service_path path
# @class_prefix service_started
# @class_parameter name
# @agent_support = ["cfengine-community"]

bundle agent service_started_path(name, path)
{
  vars:
      "class_prefix" string => "service_started_${name}";

  classes:
      "needs_start" expression => "${report_data.method_id}_ncf_services_check_error";

      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";

  methods:
    pass2.!pass3::
      # Get service status
      "${report_data.method_id}" usebundle => call_method("ncf_services_check");
      "${report_data.method_id}" usebundle => ncf_services("${path}", "is-active-process");
      "${report_data.method_id}" usebundle => call_method_end("ncf_services_check");
    pass3.needs_start::
      # If service is running, stop it
      "${report_data.method_id}" usebundle => call_method("ncf_services_start");
      "${report_data.method_id}" usebundle => ncf_services("${name}", "start");
      # Use stop result as method result
      "${report_data.method_id}" usebundle => call_method_classes("${class_prefix}");
      "${report_data.method_id}" usebundle => call_method_classes_caller;
      "${report_data.method_id}" usebundle => call_method_end("ncf_services_start");
    pass3.!needs_start::
      # Define success classes is check_running was not kept
      "${report_data.method_id}" usebundle => _classes_success("${class_prefix}");
      "${report_data.method_id}" usebundle => _classes_success("${report_data.method_id}");
    pass3::
      # Report
      "${report_data.method_id}" usebundle => log_rudder_v4("${name}", "Ensure that service ${name} is running", "");
}
