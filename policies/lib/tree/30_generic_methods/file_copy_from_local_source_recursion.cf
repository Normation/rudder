#####################################################################################
# Copyright 2013 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name File copy from local source recurse
# @rename file_from_local_source_recursion
# @deprecated Use [file_from_local_source_recursion](#_file_from_local_source_recursion) instead.
# @description Ensure that a file or directory is copied from a local source
#
# @parameter source      Source file (absolute path on the target node)
# @parameter path        Destination file (absolute path on the target node)
# @parameter recursion   Recursion depth to enforce for this path (0, 1, 2, ..., inf)
#
# 
# @parameter_rename destination path
# @class_prefix file_copy_from_local_source
# @class_parameter path
# @agent_support = ["cfengine-community"]

bundle agent file_copy_from_local_source_recursion(source, path, recursion)
{
  vars:
      "class_prefix"  string => canonify("file_copy_from_local_source_${path}");
      "canonified_path"    string => canonify("${path}");

  classes:
      "pass3"         expression => "pass2";
      "pass2"         expression => "pass1";
      "pass1"         expression => "any";

  methods:
    pass3::
      "${report_data.method_id}" usebundle => call_method("file_from_local_source_recursion");
      "${report_data.method_id}" usebundle => file_from_local_source_recursion("${source}", "${path}", "${recursion}");
      "${report_data.method_id}" usebundle => call_method_classes("${class_prefix}");
      "${report_data.method_id}" usebundle => call_method_classes_caller;
      "${report_data.method_id}" usebundle => call_method_end("file_from_local_source_recursion");
      "${report_data.method_id}" usebundle => log_rudder_v4("${path}", "Copying ${path} from local ${source}, recursion level ${recursion}", "");
}
