#####################################################################################
# Copyright 2017 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Variable dict merge tolerant
# @description Define a variable resulting of the merge of two other variables, allowing merging undefined variables
# @documentation To use the generated variable, you must use the form `${prefix.name[key]}` with each name replaced with the parameters of this method.
#
# See [variable_dict_merge](#_variable_dict_merge) for usage documentation. The only difference is that this method
# will not fail if one of the variables do not exist, and will return the other one. If both are undefined, the method will still fail.
#
# @parameter prefix The prefix of the variable name
# @parameter name   The variable to define, the full name will be prefix.name
# @parameter first_variable  The first variable, which content will be overridden in the resulting variable if necessary (written in the form prefix.name)
# @parameter second_variable The second variable, which content will override the first in the resulting variable if necessary (written in the form prefix.name)
#
# 
# @parameter_rename variable_prefix prefix
# @parameter_rename variable_name name
# @class_prefix variable_dict_merge_tolerant
# @class_parameter name
# @agent_support = ["cfengine-community"]

bundle agent variable_dict_merge_tolerant(prefix, name, first_variable, second_variable)
{
  vars:
      "class_prefix"    string => canonify("variable_dict_merge_tolerant_${name}");

    pass1::
      # define the variable within the prefix namespace
      "${prefix}.${name}" data => mergedata("${first_variable}", "${second_variable}"),
                            if => "first_variable_defined.second_variable_defined";
      "${prefix}.${name}" data => mergedata("${first_variable}"),
                            if => "first_variable_defined.!second_variable_defined";
      "${prefix}.${name}" data => mergedata("${second_variable}"),
                            if => "!first_variable_defined.second_variable_defined";


  classes:
      "pass3"                   expression => "pass2";
      "pass2"                   expression => "pass1";
      "pass1"                   expression => "any";
      "first_variable_defined"  expression => isvariable("${first_variable}");
      "second_variable_defined" expression => isvariable("${second_variable}");
      "variable_defined"        expression => isvariable("${prefix}.${name}");

  methods:
    pass3.!variable_defined::
      "${report_data.method_id}" usebundle => _classes_failure("${report_data.method_id}");
      "${report_data.method_id}" usebundle => _classes_failure("${class_prefix}");

    pass3.variable_defined::
      "${report_data.method_id}" usebundle => _classes_success("${report_data.method_id}");
      "${report_data.method_id}" usebundle => _classes_success("${class_prefix}");

    pass3::
      "${report_data.method_id}" usebundle => log_rudder_v4("${name}", "Set the dict ${prefix}.${name} to the content of the tolerant merge of ${first_variable} and ${second_variable}", "");
}
