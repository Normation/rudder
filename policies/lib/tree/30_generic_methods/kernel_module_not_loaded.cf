#####################################################################################
# Copyright 2019 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
######################################################################################

# @name Kernel module not loaded
# @description Ensure that a given kernel module is not loaded on the system
# @documentation Ensure that a given kernel module is not loaded on the system.
#   If the module is loaded, it will try to unload it using modprobe.
#
# @parameter name Complete name of the kernel module, as seen by lsmod or listed in /proc/modules
#
#
# @parameter_rename module_name name
# @class_prefix kernel_module_not_loaded
# @class_parameter name
# @agent_support = ["cfengine-community"]


bundle agent kernel_module_not_loaded(name)
{
  vars:
      "c_name"       string => canonify("${name}");
      "class_prefix" string => canonify("kernel_module_not_loaded_${name}");

  classes:
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";

    pass1.!pass2::
      "${c_name}_was_not_loaded"  not => returnszero("/sbin/lsmod | cut -d ' '  -f 1 | grep -q ^${name}$ #Initial check for unloading ${name}", "useshell");
    pass1.!pass2.!(global_dry_run|dry_run)::
      "${c_name}_unload"   expression => returnszero("/sbin/modprobe -r ${name}", "useshell"),
                                   if => and( "!${c_name}_was_not_loaded",
                                              "!(global_dry_run|dry_run)"
                                            );
    pass3::
      "${c_name}_is_not_loaded"   not => returnszero("/sbin/lsmod | cut -d ' '  -f 1 | grep -q ^${name}$ #Final check for unloading ${name}", "useshell");

  methods:
    "pass3.!${c_name}_is_not_loaded"::
      "${report_data.method_id}" usebundle => _classes_failure("${report_data.method_id}");
      "${report_data.method_id}" usebundle => _classes_failure("${class_prefix}");

    "pass3.!${c_name}_was_not_loaded.${c_name}_is_not_loaded"::
      "${report_data.method_id}" usebundle => _classes_repaired("${report_data.method_id}");
      "${report_data.method_id}" usebundle => _classes_repaired("${class_prefix}");

    "pass3.${c_name}_was_not_loaded.${c_name}_is_not_loaded"::
      "${report_data.method_id}" usebundle => _classes_success("${report_data.method_id}");
      "${report_data.method_id}" usebundle => _classes_success("${class_prefix}");

    pass3::
      "${report_data.method_id}" usebundle => log_rudder_v4("${name}", "Check that the kernel module ${name} is not loaded on the system", "");
}
