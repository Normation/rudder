#####################################################################################
# Copyright 2018 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Monitoring template
# @description Add a monitoring template to a node (requires a monitoring plugin)
#
# @documentation
# This method assigns monitoring templates to a Rudder node. The Rudder plugin respective to
# each monitoring platform will apply those templates to the node.
#
# @parameter template Name of the monitoring template
# 
# @class_prefix monitoring_template
# @class_parameter template
# @agent_support = ["cfengine-community"]

bundle agent monitoring_template(template)
{
  vars:
      "monitoring_file"    string => "/var/rudder/tmp/rudder_monitoring.csv";
      "class_prefix"       string => canonify("monitoring_template_${template}");
      "inner_class_prefix" string => canonify("inner_${report_data.method_id}");

  classes:
      "pass3" expression => "pass2";
      "pass2" expression => "pass1";
      "pass1" expression => "any";

  methods:
    pass3::
      "${report_data.method_id}" usebundle => call_method("file_ensure_lines_present");
      "${report_data.method_id}" usebundle => file_ensure_lines_present("${monitoring_file}", "template,${template}");
      "${report_data.method_id}" usebundle => call_method_classes("${inner_class_prefix}");
      "${report_data.method_id}" usebundle => call_method_end("file_ensure_lines_present");

      # As the monitoring file is cleaned up by the system technique, we want to avoid to report a repair everytime
      # so repaired and success cases are reported as success
      # Success/Repaired
    "pass3.${inner_class_prefix}_ok"::
      "${report_data.method_id}" usebundle => _classes_success("${report_data.method_id}");
      "${report_data.method_id}" usebundle => _classes_success("${class_prefix}");
    "pass3.!${inner_class_prefix}_ok"::
      "${report_data.method_id}" usebundle => _classes_error("${report_data.method_id}");
      "${report_data.method_id}" usebundle => _classes_error("${class_prefix}");
    pass3::
      "${report_data.method_id}" usebundle => log_rudder_v4("${template}", "Host follows ${template} monitoring template", "");
}
