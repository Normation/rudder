dn: cn=schema
objectclass: top
#*************************************************************************
# Copyright 2011 Normation SAS
#*************************************************************************
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#*************************************************************************
# CMDB schema
#
# Depends upon core.schema, cosine.schema, nis.schema and cmdb.schema
# CMDB OID
#######################################################
####################### WARNING #######################
#######################################################
# This OID is necessary for OpenLDAP -> OpenDS schema tool,
# but makes OpenLDAP crashes with a non-meaningfull error message
# if cmdb.schema (where it is already declared) is included
#######################################################
####################### /WARNING ######################
#######################################################
#######################################################
################## Attributes #########################
#######################################################
### UUIDs ###
attributeTypes: ( 1.3.6.1.4.1.35061.2.1.102
  NAME 'directiveId'
  DESC 'Unique identifier for a directive'
  SUP uuid )
attributeTypes: ( 1.3.6.1.4.1.35061.2.1.103
  NAME 'targetDirectiveId'
  DESC 'Unique identifier for a directive'
  SUP uuid )
attributeTypes: ( 1.3.6.1.4.1.35061.2.1.104
  NAME 'groupCategoryId'
  DESC 'Unique identifier for a group category'
  SUP uuid )
attributeTypes: ( 1.3.6.1.4.1.35061.2.1.105
  NAME 'techniqueCategoryId'
  DESC 'Unique identifier for a rudder category'
  SUP uuid )
attributeTypes: ( 1.3.6.1.4.1.35061.2.1.106
  NAME 'techniqueId'
  DESC 'Unique identifier for a technique from Reference technique library'
  SUP uuid )
attributeTypes: ( 1.3.6.1.4.1.35061.2.1.107
  NAME 'activeTechniqueId'
  DESC 'Unique identifier for a technique in Active technique library'
  SUP uuid )
attributeTypes: ( 1.3.6.1.4.1.35061.2.1.108
  NAME 'nodeGroupId'
  DESC 'Unique identifier for a node group'
  SUP uuid )
attributeTypes: ( 1.3.6.1.4.1.35061.2.1.109
  NAME 'ruleId'
  DESC 'Unique identifier for a rule'
  SUP uuid )
attributeTypes: ( 1.3.6.1.4.1.35061.2.1.110
  NAME 'apiAccountId'
  DESC 'Unique identifier for an API Account'
  SUP uuid )
attributeTypes: ( 1.3.6.1.4.1.35061.2.1.111
  NAME 'ruleCategoryId'
  DESC 'Unique identifier for a Rule category'
  SUP uuid )
#######################################################################
attributeTypes: ( 1.3.6.1.4.1.35061.2.1.201
  NAME 'techniqueLibraryVersion'
  DESC 'The version'
  EQUALITY caseIgnoreMatch
  SUBSTR caseIgnoreSubstringsMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15{256} )
attributeTypes: ( 1.3.6.1.4.1.35061.2.1.202
  NAME 'techniqueVersion'
  DESC 'The version'
  EQUALITY caseIgnoreMatch
  SUBSTR caseIgnoreSubstringsMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15{256} )
attributeTypes: ( 1.3.6.1.4.1.35061.2.1.203
  NAME 'initTimestamp'
  DESC 'Date and time of initialization of the object'
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.24
  EQUALITY generalizedTimeMatch
  ORDERING generalizedTimeOrderingMatch )
attributeTypes: ( 1.3.6.1.4.1.35061.2.1.204
  NAME 'jsonNodeGroupQuery'
  DESC 'JSON structure that represent a query for a group of nodes'
  EQUALITY caseIgnoreMatch
  SUBSTR caseIgnoreSubstringsMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15{256} )
attributeTypes: ( 1.3.6.1.4.1.35061.2.1.205
  NAME 'ruleTarget'
  DESC 'Target of the directive. It is something of the form targetType:targetUuid'
  EQUALITY caseIgnoreMatch
  SUBSTR caseIgnoreSubstringsMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15{256} )
attributeTypes: ( 1.3.6.1.4.1.35061.2.1.206
  NAME 'creationDate'
  DESC 'Creation date of the item'
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.24
  EQUALITY generalizedTimeMatch
  ORDERING generalizedTimeOrderingMatch )
#
# A policy variable and its values.
# The expected format is:
# variableName[index]:variableValue
#
attributeTypes: ( 1.3.6.1.4.1.35061.2.1.208
  NAME 'directiveVariable'
  DESC 'Pair of variable:value'
  EQUALITY caseIgnoreMatch
  SUBSTR caseIgnoreSubstringsMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15{256} )
attributeTypes: ( 1.3.6.1.4.1.35061.2.1.210
  NAME 'acceptationTimestamp'
  DESC 'Creation date of a user policy'
  EQUALITY caseIgnoreMatch
  SUBSTR caseIgnoreSubstringsMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 )
attributeTypes: ( 1.3.6.1.4.1.35061.2.1.211.0
  NAME 'state'
  DESC 'Define the state of an item '
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
  EQUALITY caseIgnoreMatch
  SUBSTR caseIgnoreSubstringsMatch )
attributeTypes: ( 1.3.6.1.4.1.35061.2.1.212
  NAME 'isEnabled'
  DESC 'Define if the object is currently activated or not (and so should be ignore)'
  EQUALITY booleanMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.7  )
attributeTypes: ( 1.3.6.1.4.1.35061.2.1.213
  NAME 'isDynamic'
  DESC 'Define if the group is dynamic'
  EQUALITY booleanMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.7  )
attributeTypes: ( 1.3.6.1.4.1.35061.2.1.214
  NAME 'isSystem'
  DESC 'Define if the CR/Group/PI/UPT/Node is created by the system'
  EQUALITY booleanMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.7  )
attributeTypes: ( 1.3.6.1.4.1.35061.2.1.215
  NAME 'isBroken'
  DESC 'Define if the node is broken'
  EQUALITY booleanMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.7  )
attributeTypes: ( 1.3.6.1.4.1.35061.2.1.216
  NAME 'isPolicyServer'
  DESC 'Define if this node configuration refers to a policy server'
  EQUALITY booleanMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.7  )
attributeTypes: ( 1.3.6.1.4.1.35061.2.1.217
  NAME 'directivePriority'
  DESC 'The priority of the object compare to other. Higher has more priority'
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.27
  EQUALITY integerMatch
  ORDERING integerOrderingMatch )
attributeTypes: ( 1.3.6.1.4.1.35061.2.1.218
  NAME 'longDescription'
  DESC 'A long field for text (HTLM expected)'
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
  EQUALITY caseIgnoreMatch
  SUBSTR caseIgnoreSubstringsMatch )
attributeTypes: ( 1.3.6.1.4.1.35061.2.1.219
  NAME 'serial'
  DESC 'The serial of the Rule'
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.27
  EQUALITY integerMatch
  ORDERING integerOrderingMatch )
attributeTypes: ( 1.3.6.1.4.1.35061.2.1.226
  NAME 'creationTimestamp'
  DESC 'Creation date of an object - can be different than the createTimestamp operational attribute'
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.24
  EQUALITY generalizedTimeMatch
  ORDERING generalizedTimeOrderingMatch )
attributeTypes: ( 1.3.6.1.4.1.35061.2.1.229
  NAME 'tag'
  DESC 'ID of tag'
  SUP uuid )
### node configuration
attributeTypes: ( 1.3.6.1.4.1.35061.2.1.230
  NAME 'nodeConfig'
  DESC 'Attribute used to store a structured hash of a node configuration'
  EQUALITY caseIgnoreMatch
  SUBSTR caseIgnoreSubstringsMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15{4096} )
### Policy mode, common for Nodes/Directive at first, Surely Rules and groups later
attributeTypes: ( 1.3.6.1.4.1.35061.2.1.231
  NAME 'policyMode'
  DESC 'Policy mode (Enforce/Verify) for this element '
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
  EQUALITY caseIgnoreMatch
  SUBSTR caseIgnoreSubstringsMatch )
### Tags key=value, stored in JSON
attributeTypes: ( 1.3.6.1.4.1.35061.2.1.235
  NAME 'serializedTags'
  DESC 'key=value tags stored in JSON'
  EQUALITY caseIgnoreMatch
  SUBSTR caseIgnoreSubstringsMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 )
### API principal and tokens
attributeTypes: ( 1.3.6.1.4.1.35061.2.1.250
  NAME 'apiToken'
  DESC 'The token used to authenticate an API principal'
  EQUALITY caseIgnoreMatch
  SUBSTR caseIgnoreSubstringsMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15{256} )
attributeTypes: ( 1.3.6.1.4.1.35061.2.1.251
  NAME 'apiTokenCreationTimestamp'
  DESC 'Last creation date of the API Token'
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.24
  EQUALITY generalizedTimeMatch
  ORDERING generalizedTimeOrderingMatch )
attributeTypes: ( 1.3.6.1.4.1.35061.2.1.252
  NAME 'expirationTimestamp'
  DESC 'Date and time on which the token expires'
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.24
  EQUALITY generalizedTimeMatch
  ORDERING generalizedTimeOrderingMatch )
attributeTypes: ( 1.3.6.1.4.1.35061.2.1.253
  NAME 'apiAcl'
  DESC 'JSON serialization of ACL for an API token'
  EQUALITY caseIgnoreMatch
  SUBSTR caseIgnoreSubstringsMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 )
attributeTypes: ( 1.3.6.1.4.1.35061.2.1.254
  NAME 'apiAccountKind'
  DESC 'Kind of API account (public API, user-bounded, system)'
  EQUALITY caseIgnoreMatch
  SUBSTR caseIgnoreSubstringsMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 )
attributeTypes: ( 1.3.6.1.4.1.35061.2.1.255
  NAME 'apiAuthorizationKind'
  DESC 'Kind of API account (public API, user-bounded, system)'
  EQUALITY caseIgnoreMatch
  SUBSTR caseIgnoreSubstringsMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 )
attributeTypes: ( 1.3.6.1.4.1.35061.2.1.301
  NAME 'parameterName'
  DESC 'Name of parameter that matches [a-zA-Z0-9_]+'
  EQUALITY caseExactMatch
  SUBSTR caseIgnoreSubstringsMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 )
attributeTypes: ( 1.3.6.1.4.1.35061.2.1.302
  NAME 'parameterValue'
  DESC 'Value of a parameter'
  EQUALITY caseExactMatch
  SUBSTR caseIgnoreSubstringsMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 )
attributeTypes: ( 1.3.6.1.4.1.35061.2.1.304
  NAME 'propertyName'
  DESC 'Name of property that matches [a-zA-Z0-9_]+'
  EQUALITY caseExactMatch
  SUBSTR caseIgnoreSubstringsMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 )
attributeTypes: ( 1.3.6.1.4.1.35061.2.1.305
  NAME 'propertyValue'
  DESC 'Value of a property'
  EQUALITY caseExactMatch
  SUBSTR caseIgnoreSubstringsMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 )
attributeTypes: ( 1.3.6.1.4.1.35061.2.1.307
  NAME 'propertyProvider'
  DESC 'Provider for properties and parameter'
  EQUALITY caseExactMatch
  SUBSTR caseIgnoreSubstringsMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 )
#
# A key=value serialisation, with being json.
# It's the same than serializedNodeProperty but for
# other elements (like groups).
attributeTypes: ( 1.3.6.1.4.1.35061.2.1.306
  NAME 'serializedProperty'
  DESC 'Serialization of a property, typically a key=value pair)'
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
  EQUALITY caseExactMatch
  SUBSTR caseIgnoreSubstringsMatch )
#### Nodes
attributeTypes: ( 1.3.6.1.4.1.35061.2.1.351
  NAME 'serializedAgentRunInterval'
  DESC 'Serialization of the defined agent run interval (interval in minutes, start minutes, start hour, splay in minutes)'
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
  EQUALITY caseExactMatch
  SUBSTR caseIgnoreSubstringsMatch )
attributeTypes: ( 1.3.6.1.4.1.35061.2.1.352
  NAME 'serializedNodeProperty'
  DESC 'Serialization of a node property, typically a key=value pair)'
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
  EQUALITY caseExactMatch
  SUBSTR caseIgnoreSubstringsMatch )
attributeTypes: ( 1.3.6.1.4.1.35061.2.1.353
  NAME 'serializedHeartbeatRunConfiguration'
  DESC 'Serialization of the defined heartbeat configuration defined for that node'
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
  EQUALITY caseExactMatch
  SUBSTR caseIgnoreSubstringsMatch )
attributeTypes: ( 1.3.6.1.4.1.35061.2.1.354
  NAME 'agentReportingProtocol'
  DESC 'Protocol used by agent for reporting'
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
  EQUALITY caseExactMatch
  SUBSTR caseIgnoreSubstringsMatch )
attributeTypes: ( 1.3.6.1.4.1.35061.2.1.355
  NAME 'securityTag'
  DESC 'security tag'
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
  EQUALITY caseExactMatch
  SUBSTR caseIgnoreSubstringsMatch )
#######################################################
################  Object Classes ######################
#######################################################
#
# Rudder mains objects:
# * nodes and policy server
# * node group categories
# * node groups
# * library of active technique categories
# * activeTechnique
# * directive
# * rules
#
### nodes (simple and policy server) for Rudder ###
objectClasses: ( 1.3.6.1.4.1.35061.2.2.1
  NAME 'rudderNode'
  DESC 'The Node itself'
  SUP top
  STRUCTURAL
  MUST ( nodeId $ cn $ isSystem )
  MAY ( description $ serializedNodeProperty $ serializedAgentRunInterval $ securityTag $
  serializedHeartbeatRunConfiguration $ agentReportingProtocol $ policyMode $ state $ isBroken) )
objectClasses: ( 1.3.6.1.4.1.35061.2.2.2
  NAME 'rudderPolicyServer'
  DESC 'The Node representation of a policy server'
  SUP rudderNode
  STRUCTURAL )
### groups ###
objectClasses: ( 1.3.6.1.4.1.35061.2.2.10
  NAME 'groupCategory'
  DESC 'The group category'
  SUP top
  STRUCTURAL
  MUST ( groupCategoryId $ cn )
  MAY ( description $ isSystem ) )
objectClasses: ( 1.3.6.1.4.1.35061.2.2.11
  NAME 'nodeGroup'
  DESC 'A node group representation'
  SUP top
  STRUCTURAL
  MUST ( nodeGroupId $
  cn $ isDynamic )
  MAY ( nodeId $ description $ jsonNodeGroupQuery $
  isEnabled $ isSystem $ serializedProperty ) )
objectClasses: ( 1.3.6.1.4.1.35061.2.2.12
  NAME 'specialRuleTarget'
  DESC 'A special target (other than a nodeGroup), for example: all servers'
  SUP top
  STRUCTURAL
  MUST ( ruleTarget $ cn )
  MAY (  description $ isEnabled $ isSystem ) )
### active technique library ###
objectClasses: ( 1.3.6.1.4.1.35061.2.2.20
  NAME 'activeTechniqueLibraryVersion'
  DESC 'An object class to contain information about the user library (version, initialisation timestamp)'
  SUP top
  AUXILIARY
  MAY ( initTimestamp $ techniqueLibraryVersion ) )
objectClasses: ( 1.3.6.1.4.1.35061.2.2.21
  NAME 'techniqueCategory'
  DESC 'The Rudder category'
  SUP top
  STRUCTURAL
  MUST ( techniqueCategoryId $ cn )
  MAY ( description $ isSystem ) )
objectClasses: ( 1.3.6.1.4.1.35061.2.2.22
  NAME 'activeTechnique'
  DESC 'The Rudder category'
  SUP top
  STRUCTURAL
  MUST ( activeTechniqueId $ techniqueId $ acceptationTimestamp)
  MAY ( isEnabled $ isSystem ) )
objectClasses: ( 1.3.6.1.4.1.35061.2.2.23
  NAME 'directive'
  DESC 'Rudder Directive (real)'
  SUP top
  STRUCTURAL
  MUST ( directiveId $ techniqueVersion )
  MAY ( cn $ description $ longDescription $ isEnabled $ isSystem $
  directivePriority $ directiveVariable $ policyMode $ serializedTags) )
### rules ###
objectClasses: ( 1.3.6.1.4.1.35061.2.2.30
  NAME 'rule'
  DESC 'A rule'
  SUP top
  STRUCTURAL
  MUST ( ruleId )
  MAY ( cn $ description $ longDescription $
  isEnabled $ isSystem $
  ruleTarget $ serial $
  directiveId $ tag $ serializedTags ) )
objectClasses: ( 1.3.6.1.4.1.35061.2.2.31
  NAME 'ruleCategory'
  DESC 'Rule categories'
  SUP top
  STRUCTURAL
  MUST ( ruleCategoryId $ cn )
  MAY ( description $ isSystem ) )
#
# Node configurations (structured hashes about node configuration)
#
objectClasses: ( 1.3.6.1.4.1.35061.2.2.110
  NAME 'nodeConfigurations'
  DESC 'Store node configurations'
  SUP top
  STRUCTURAL
  MUST ( cn )
  MAY ( description $ nodeConfig  ) )
#
# API Accounts
#
objectClasses: ( 1.3.6.1.4.1.35061.2.2.106
  NAME 'apiAccount'
  DESC 'A principal for the REST API'
  SUP top
  STRUCTURAL
  MUST ( apiAccountId $ cn $ creationTimestamp $
  apiToken $ apiTokenCreationTimestamp)
  MAY ( description  $ isEnabled $ apiAccountKind $
  apiAuthorizationKind $ apiAcl $ expirationTimestamp ) )
#
# Parameters
#
objectClasses: ( 1.3.6.1.4.1.35061.2.2.120
  NAME 'parameter'
  DESC 'A parameter of the format key - value'
  SUP top
  STRUCTURAL
  MUST ( parameterName )
  MAY ( parameterValue $ description $ propertyProvider) )
#
# Application properties
#
objectClasses: ( 1.3.6.1.4.1.35061.2.2.121
  NAME 'property'
  DESC 'A property of the format key - value'
  SUP top
  STRUCTURAL
  MUST ( propertyName )
  MAY ( propertyValue $ description ) )
