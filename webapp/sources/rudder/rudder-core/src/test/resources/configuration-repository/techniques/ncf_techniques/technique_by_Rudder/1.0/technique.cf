# @name Test Technique created through Rudder API
# @description This Technique exists only to see if Rudder creates Technique correctly.
# @version 1.0
# @parameter {"name":"technique_parameter","id":"1aaacd71-c2d5-482c-bcff-5eee6f8da9c2","description":" a long description, with line 
#  break within"}

bundle agent technique_by_Rudder(technique_parameter)
{
  vars:
    "resources_dir" string => "${this.promise_dirname}/resources";
  classes:
    "pass3" expression => "pass2";
    "pass2" expression => "pass1";
    "pass1" expression => "any";
  methods:
    "id1_${report_data.directive_id}" usebundle => _method_reporting_context_v4("Customized component", "${node.properties[apache_package_name]}","id1"),
                                             if => concat("(debian)");
    "id1_${report_data.directive_id}" usebundle => package_install_version("${node.properties[apache_package_name]}", "2.2.11"),
                                             if => concat("(debian)");
    "id2_${report_data.directive_id}" usebundle => disable_reporting,
                                             if => concat("(debian.windows)");
    "id2_${report_data.directive_id}" usebundle => _method_reporting_context_v4("Command execution", "Write-Host \"testing special characters ` è &é 'à é \"","id2"),
                                             if => concat("(debian.windows)");
    "id2_${report_data.directive_id}" usebundle => command_execution("Write-Host \"testing special characters ` è &é 'à é \""),
                                             if => concat("(debian.windows)");
    "id2_${report_data.directive_id}" usebundle => enable_reporting,
                                             if => concat("(debian.windows)");
    "id3_${report_data.directive_id}" usebundle => _method_reporting_context_v4("Customized component", "${node.properties[apache_package_name]}","id3"),
                                             if => concat("package_install_version_",canonify("${node.properties[apache_package_name]}"),"_repaired");
    "id3_${report_data.directive_id}" usebundle => service_start("${node.properties[apache_package_name]}"),
                                             if => concat("package_install_version_",canonify("${node.properties[apache_package_name]}"),"_repaired");
    "id4_${report_data.directive_id}" usebundle => _method_reporting_context_v4("Package install", "openssh-server","id4"),
                                             if => concat("redhat");
    "id4_${report_data.directive_id}" usebundle => package_install("openssh-server"),
                                             if => concat("redhat");
    "id5_${report_data.directive_id}" usebundle => _method_reporting_context_v4("Command execution", "/bin/echo \"testing special characters ` è &é 'à é \"\\","id5"),
                                             if => concat("any");
    "id5_${report_data.directive_id}" usebundle => command_execution("/bin/echo \"testing special characters ` è &é 'à é \"\\"),
                                             if => concat("any");
    "id6_${report_data.directive_id}" usebundle => _method_reporting_context_v4("Package state windows", "vim","id6"),
                                             if => concat("dsc");
    "id6_${report_data.directive_id}" usebundle => package_state_windows("vim"),
                                             if => concat("dsc");
    "id7_${report_data.directive_id}" usebundle => _method_reporting_context_v4("Not sure we should test it ...", "NA","id7"),
                                             if => concat("any");
    "id7_${report_data.directive_id}" usebundle => _logger("NA", "NA"),
                                             if => concat("any");

}
