# SPDX-License-Identifier: GPL-3.0-or-later
# SPDX-FileCopyrightText: 2021 Normation SAS

#######################################################
#
# Site specific promises
#
#######################################################

bundle common g
{
  vars:

      "rudder_base"                string => "/opt/rudder";
      "rudder_rm"                  string => "/bin/rm";
      "rudder_cp"                  string => "/bin/cp";
      "rudder_var"                 string => "/var/rudder";
      "rudder_log"                 string => "/var/log/rudder";
      "rudder_bin"                 string => "${rudder_base}/bin";

      "rudder_curl"                string => "/usr/bin/curl",
                                   unless => fileexists("${rudder_base}/bin/curl");

      "rudder_curl"                string => "${rudder_bin}/curl",
                                       if => fileexists("${rudder_base}/bin/curl");

      "rudder_command"             string => "${rudder_bin}/rudder";
      "rudder_sbin"                string => "${rudder_base}/sbin";
      "rudder_var_tmp"             string => "${rudder_var}/tmp"; # tmp generated data
      "rudder_base_sbin"           string => "${rudder_base}/sbin"; #folder where tools are installed
      "rudder_inventories"         string => "${rudder_var}/inventories";
      "rudder_reports"             string => "${rudder_var}/reports";
      "rudder_disable_agent_file"  string => "${rudder_base}/etc/disable-agent";
      "rudder_disable_inventory_file" string => "${rudder_base}/etc/disable-inventory";
      "rudder_force_audit_agent"   string => "${rudder_base}/etc/force-audit-agent";
      "rudder_capabilities_file"   string => "${va.rudder_capabilities_file}";
      "rudder_ncf"                 string => "${rudder_var}/ncf";
      "crontab"                    string => "/etc/crontab";
      "gzip"                       string => "/bin/gzip";

    aix::

      "gzip"                       string => "/usr/bin/gzip";

    any::
      "gzip"                       string => "/bin/gzip";
      "uuid_file"                   string => "${rudder_roles.uuid_file}";
      "uuid"                        string => "${rudder_roles.uuid}";
      "server_shares_folder"        string => "${var_rudder}/share/${uuid}/promises/shares";
      "rudder_var_reports"          string => "${rudder_var}/reports";
      "davuser"                     string => "${system_common.davuser}";
      "davpw"                       string => "${system_common.davpw}";
      "ncf_excludedreps"            slist => { "50_techniques" };

      # Path where all the configurations (git with techniques, groups, ncf, etc) are stored
      "rudder_configuration_repository"
                                    string => "${system_common.rudder_configuration_repository}";

      "rudder_ncf_origin_common"    string => "/usr/share/ncf/tree";
      "rudder_ncf_origin_local"     string => "${rudder_configuration_repository}/ncf";

      "rudder_ncf_hash_file"          string => "ncf_hash_file";
      "rudder_ncf_origin_common_hash" string => "${rudder_ncf_origin_common}/${rudder_ncf_hash_file}";
      "rudder_ncf_origin_local_hash"  string => "${rudder_ncf_origin_local}/${rudder_ncf_hash_file}";

      "uncompressed_inventory_file_types" slist => { ".*.ocs" };
      "inventory_file_types"              slist => { "@{uncompressed_inventory_file_types}", ".*.gz" };
      "signed_inventory_file_types"       slist => { "@{inventory_file_types}", ".*\.sign" };

      "shared_files"                string => "${rudder_configuration_repository}/shared-files";

      # We would like to use date's "--rfc-3339=second" option here, but it is not available on older OSes (RHEL 3/4, AIX 5...)
      "execRun"                    string => execresult("/bin/date -u \"+%Y-%m-%d %T+00:00\"", "noshell");

      # Heartbeat interval, in minutes. Only used when in "changes-only" compliance mode
      # In this mode, we should only send a "start"/"end" message pair if changes occur,
      # or if this interval has elapsed since we last sent one
      "heartbeat_interval" string => "${system_common.heartbeat_interval}";
      "agent_run_interval" string => "${system_common.agent_run_interval}";

      "rudder_node_config_id" string => "${system_common.rudder_node_config_id}";

      "rudder_verify_certs_option" string => "--insecure";
    rudder_verify_certs::
      "rudder_verify_certs_option" string => "";

  classes:

      # Utilities
      "gzip_installed"                 expression => isexecutable("${gzip}");
      "curl_installed"                 expression => isexecutable("${rudder_curl}");
}

