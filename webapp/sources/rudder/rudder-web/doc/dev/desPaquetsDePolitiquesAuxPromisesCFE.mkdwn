
Des Package de politiques aux promesses CFEngines
=================================================

- ne pas confondre CFClerk et Rudder
- on parle de Rudder.


En rapide
---------

- Au départ: Policy Package (contient une Technique + des méta données + d'autres assets)

- Suite de liens:
Technique
    => Active Technique (une technique définie comme faisant partie de la
                             bibiothèque de l'utilisateur)
        => directive (variables de la Techniques liées)
            => rules (on sait sur quoi seront déployé les promesses)
                => Magic [cf "Transformation de rules en données d'entrée CFClerk"]
                    => Promises CFE + assets

- A l'arrivée: des promesses CFEngine exécutable avec l'ensemble des fichiers nécessaires à leur
  exécution.


Définition des noms
-------------------

### Politique / Policy

Terme abstrait qui définie aussi bien un package de templates et autres fichiers de configuration
qu'un ensemble de promosses CFengine déployées sur des serveurs.

Ce terme est à **proscrire** dès que l'on souhaite être précis (et donc dès que l'on fait du code)

### Paquet d'une Politique / Policy Package

Représente le répertoire (ou sa forme zippé) qui contient les l'ensemble des templates (promesses
cfengine, fichier de configuration) et méta-données qui définissent une politique abstraite.
Cette politique devra être instanciée avant de pouvoir être


### Technique

Représente la déscription abstraite de la politique:
- son nom, son rôle, son idéntifiant ;
- l'ensemble des paramètres qui doivent être fournis (par l'utilisateur et/ou le système),
  avec leur type, leur groupe et leur multiplicité


### directive

Une Technique + ses variables liées (par le système et/ou l'utilisateur)

Quelles variables définir ?
- les variables systèmes ne peuvent pas l'être
  Je n'aime pas trop "variable système", parce qu'on ne sait pas de quel système il s'agit:
  - Rudder / CFClerk ?
  - le noeud cible ?
  - l'hôte de Rudder / CFClerk ?
  Utiliser "Variables d'environnement", l'environnement étant le contexte d'évaluation dans lequel CFClerk résout les
  dépendances à la fin ?
- les variables facultatives ne le sont pas forcément


### rule

Une directive liée à une "cible" sur lesquelles elle doit être déployée
- cible ?
  - un ensemble énuméré de serveurs ?
  - un groupe ?
  - un chemin
  - une cible virutelle ("tous les serveurs", etc)

### Promesse + assets

L'ensemble des fichiers CFEngine et des autres ressources (fichier de configuration, images, etc)
dont toutes les variables ont été remplacées par des valeurs, et dans les répertoires de leur
serveur de destination


### Transformation de rules en données d'entrée CFClerk

Le passage des rules aux "promises + assets" n'est pas direct:

- Rudder transforme la cible en un ensemble de répertoire de destinations
- Rudder ajoute les données de la cible à l'environnement (ex: IP, hostname, etc)
- Pour chaque répertoire de destination, CFClerk:
  - calcule les dépendances de Policy
  - calcule des variables systèmes qui sont ajoutées à l'environnement
  - vérifie que toutes les variables sont liées
  - compile les templates de promises en promises
  - copie les promises résustantes dans un répertoire temporaire
  - copie toutes les autres ressources du package dans le destination à leur place
    dans le répertoire temporaire
    (définir "à leur place", à mon sens, par convention, ca peut être simplement
     chemin_de_destination/policy_id/{copie verbatim du répertoire de ressources} )
- Si l'étape précédente s'achève avec succès pour tous les chemins, CFClerk
  déplace les répertoires temporaire vers les chemins réel
  (ce afin d'éviter qu'une rules ne soit appliquée qu'à un sous
   ensemble des éléments de la cible)


Remarques
---------

- on se fiche des assets entre le policy package et la fin: c'est un problème successment de
  CFClerk
  - les copier au bon endroit ;
  - peut-être les parser pour remplacer des variables de l'environnement (server_ip, etc)
    (mais c'est plutôt aux règles CFEngine de faire ça)

- CFClerk n'a besoin que:
  - des variables liées (données par la directive + gestion des dépendences et variables systèmes);
  - des promesses à parser / lier: données par le chemin vers le paquet + convention structure paquet ;
  - les fichiers de configuration à copier: donnés par le chemin vers le paquet + convention structure paquet ;
  - de l'endroit où mettre les promesses compilées: donné par les serveurs de la rule +
    conventions sur les répertoires à destination des serveurs

- est-ce qu'il n'y a qu'une seule technique par policy package ? (oui ?)

- point difficile: format des parametres des techniques ?

Valeurs de variables paramétrées
================================

=> rudder-core: com.normation.rudder.services.policies.ParameterizedValueLookupService

A service that handle parameterized value of
directive variables.

The parameterization is to be taken in the context of
a rule (i.e, a directive applied to
a target), and in the scope of one node of the target
(as if you were processing one node at a time).

The general parameterized value are of the form:
${...}
were "..." is the parameter to lookup.

We handle 2 kinds of parameterizations:
1/ ${CONFIG_RULE_ID.ACCESSOR}
   where:
   - CONFIG_RULE_ID is a valid id of a rule in the system
   - ACCESSOR is an accessor for that rule, explained below.
2/ ${node.ACCESSOR}
   where:
   - "node" is a keyword ;
   - ACCESSOR is an accessor for that node, explained below.
 *
Accessor are keywords which allows to reach value in a context, exactly like
properties in object oriented programming.
 *
Accessors for node
------------------
  ${node.id} : internal ID of the node (generally an UUID)
  ${node.hostname} : hostname of the node
  ${node.admin} : login (or username) of the node administrator, or root, or at least
                  the login to use to run the agent
  ${node.policyserver.ACCESSOR} : information about the policyserver of the node.
                                   ACCESSORs are the same than for ${node}

Accessors for rule
--------------------------------
Accessor for rule are of two forms:
- ${CONFIG_RULE_ID.VAR_NAME}
  where VAR_NAME is the name of a variable of the technique implemented
  by the directive referenced by the given rule ;
  The following constraint are applied on a VAR_NAME accessor:
  - if the variable is monovalued, the targeted variable must have only one value
    (the target variable may be multivalued with exaclty one value) ;
  - if the variable is multivalued and is not part of a group,
    there is no constraints on the target ;
  - if the variable is mutlivalued and is part of group, there is no constraints
    on the target **BUT** if other members of the group don't have the same
    cardinality than the result of the lookup, you will have problems.

- ${CONFIG_RULE_ID.target.ACCESSOR}
  - where "target" is an accessor which change the context of following
    accessors to the target of the rule (group, etc)
    Target Accessor are the same as node accessors, but are multivalued.

Important notice:
-----------------
For a given rule, ALL parameterized value are processed in the
same order, and order is kept.

That means  (for example) that if a parameterized value references two target accessors,
information regarding the same node will be put at the same index.
