---
description: Get node (minimal)
method: GET
url: /api/latest/nodes/node1?include=minimal
response:
  code: 200
  content: >-
    {
      "action":"nodeDetails",
      "id":"node1",
      "result":"success",
      "data":{
        "nodes":[
          {
            "id":"node1",
            "hostname":"node1.localhost",
            "status":"accepted"
          }
        ]
      }
    }
---
description: Get node (full) before v20
method: GET
url: /api/nodes/node1?include=full
headers:
  - "X-API-VERSION: 19"
response:
  code: 200
  content: >-
    {
      "action":"nodeDetails",
      "id":"node1",
      "result":"success",
      "data":{
        "nodes":[
          {
            "id":"node1",
            "hostname":"node1.localhost",
            "status":"accepted",
            "state":"enabled",
            "os":{
              "type":"Linux",
              "name":"Debian",
              "version":"10.6",
              "fullName":"Buster",
              "kernelVersion":"4.19"
            },
            "ram":1,
            "machine":{
              "id":"machine1",
              "type":"Virtual",
              "provider":"vbox"
            },
            "ipAddresses":[
              "192.168.0.10"
            ],
            "description":"",
            "lastInventoryDate":"2021-01-30T01:20:00+01:00",
            "policyServerId":"root",
            "managementTechnology":[
              {
                "name":"Rudder",
                "version":"7.0.0",
                "capabilities":[],
                "nodeKind":"node"
              }
            ],
            "properties":[],
            "policyMode":"enforce",
            "timezone":{"name":"UTC","offset":"+00"},
            "accounts":["root","httpd"],
            "environmentVariables":{"THE_VAR":"THE_VAR value!"},
            "fileSystems":[
              {"mountPoint":"none","name":"swap","totalSpace":0},
              {"mountPoint":"/","name":"ext4","freeSpace":11517,"totalSpace":52524}
            ],
            "managementTechnologyDetails":{
              "cfengineKeys":[
                "-----BEGIN RSA PUBLIC KEY-----\nMIIBCAKCAQEAlntroa72gD50MehPoyp6mRS5fzZpsZEHu42vq9KKxbqSsjfUmxnT\nRsi8CDvBt7DApIc7W1g0eJ6AsOfV7CEh3ooiyL/fC9SGATyDg5TjYPJZn3MPUktg\nYBzTd1MMyZL6zcLmIpQBH6XHkH7Do/RxFRtaSyicLxiO3H3wapH20TnkUvEpV5Qh\nzUkNM8vHZuu3m1FgLrK5NCN7BtoGWgeyVJvBMbWww5hS15IkCRuBkAOK/+h8xe2f\nhMQjrt9gW2qJpxZyFoPuMsWFIaX4wrN7Y8ZiN37U2q1G11tv2oQlJTQeiYaUnTX4\nz5VEb9yx2KikbWyChM1Akp82AV5BzqE80QIBIw==\n-----END RSA PUBLIC KEY-----"
              ],
              "cfengineUser":"root"
            },
            "networkInterfaces":[{"name":"enp0s3","ipAddresses":["10.0.2.15"],"gateway":[],"mask":[],"subnet":[],"status":"Up","speed":"1000"}],
            "processes":[{"pid":54432,"name":"/bin/true","cpuUsage":34.5,"memory":4235.0}],
            "software":[
              {"id":"","name":"s05","version":"1.0"},
              {"id":"","name":"s06","version":"1.0"},
              {"id":"","name":"s07","version":"1.0"},
              {"id":"","name":"s08","version":"1.0"},
              {"id":"","name":"s09","version":"1.0"},
              {"id":"","name":"s10","version":"1.0"},
              {"id":"","name":"s11","version":"1.0"},
              {"id":"","name":"s12","version":"1.0"},
              {"id":"","name":"s13","version":"1.0"}
              ],
            "softwareUpdate":[
              {"name":"s00","version":"2.15.6~RC1","arch":"x86_64","from":"yum","kind":"defect","description":"Some explanation","severity":"critical","ids":["RHSA-2020-4566","CVE-2021-4034"]},
              {"name":"s01","version":"1-23-RELEASE-1","arch":"x86_64","from":"apt","kind":"none","source":"default-repo"},
              {"name":"s01","version":"1-24-RELEASE-64","arch":"x86_64","from":"apt","kind":"security","source":"security-backports","severity":"backport","ids":["CVE-2021-4034"]}
            ]
          }
        ]
      }
    }
---
description: Get node (full)
method: GET
url: /api/latest/nodes/node1?include=full
response:
  code: 200
  content: >-
    {
      "action" : "nodeDetails",
      "id" : "node1",
      "result" : "success",
      "data" : {
        "nodes" : [
          {
            "id" : "node1",
            "hostname" : "node1.localhost",
            "status" : "accepted",
            "state" : "enabled",
            "os" : {
              "type" : "Linux",
              "name" : "Debian",
              "version" : "10.6",
              "fullName" : "Buster",
              "kernelVersion" : "4.19"
            },
            "ram" : 1460132,
            "machine" : {
              "id" : "machine1",
              "type" : "Virtual",
              "provider" : "vbox"
            },
            "ipAddresses" : [
              "192.168.0.10"
            ],
            "description" : "",
            "lastInventoryDate" : "2021-01-30T01:20:00+01:00",
            "policyServerId" : "root",
            "managementTechnology" : [
              {
                "name" : "Rudder",
                "version" : "7.0.0",
                "capabilities" : [],
                "nodeKind" : "node"
              }
            ],
            "properties" : [],
            "policyMode" : "enforce",
            "timezone" : {
              "name" : "UTC",
              "offset" : "+00"
            },
            "accounts" : [
              "root",
              "httpd"
            ],
            "environmentVariables" : {
              "THE_VAR" : "THE_VAR value!"
            },
            "fileSystems" : [
              {
                "mountPoint" : "none",
                "name" : "swap",
                "totalSpace" : 1000000
              },
              {
                "mountPoint" : "/",
                "name" : "ext4",
                "freeSpace" : 12076449792,
                "totalSpace" : 55076449792
              }
            ],
            "managementTechnologyDetails" : {
              "cfengineKeys" : [
                "-----BEGIN RSA PUBLIC KEY-----\nMIIBCAKCAQEAlntroa72gD50MehPoyp6mRS5fzZpsZEHu42vq9KKxbqSsjfUmxnT\nRsi8CDvBt7DApIc7W1g0eJ6AsOfV7CEh3ooiyL/fC9SGATyDg5TjYPJZn3MPUktg\nYBzTd1MMyZL6zcLmIpQBH6XHkH7Do/RxFRtaSyicLxiO3H3wapH20TnkUvEpV5Qh\nzUkNM8vHZuu3m1FgLrK5NCN7BtoGWgeyVJvBMbWww5hS15IkCRuBkAOK/+h8xe2f\nhMQjrt9gW2qJpxZyFoPuMsWFIaX4wrN7Y8ZiN37U2q1G11tv2oQlJTQeiYaUnTX4\nz5VEb9yx2KikbWyChM1Akp82AV5BzqE80QIBIw==\n-----END RSA PUBLIC KEY-----"
              ],
              "cfengineUser" : "root"
            },
            "networkInterfaces" : [
              {
                "name" : "enp0s3",
                "ipAddresses" : [
                  "10.0.2.15"
                ],
                "gateway" : [],
                "mask" : [],
                "subnet" : [],
                "status" : "Up",
                "speed" : "1000"
              }
            ],
            "processes" : [
              {
                "pid" : 54432,
                "name" : "/bin/true",
                "cpuUsage" : 34.5,
                "memory" : 4235.0
              }
            ],
            "software" : [
              {
                "id" : "",
                "name" : "s05",
                "version" : "1.0"
              },
              {
                "id" : "",
                "name" : "s06",
                "version" : "1.0"
              },
              {
                "id" : "",
                "name" : "s07",
                "version" : "1.0"
              },
              {
                "id" : "",
                "name" : "s08",
                "version" : "1.0"
              },
              {
                "id" : "",
                "name" : "s09",
                "version" : "1.0"
              },
              {
                "id" : "",
                "name" : "s10",
                "version" : "1.0"
              },
              {
                "id" : "",
                "name" : "s11",
                "version" : "1.0"
              },
              {
                "id" : "",
                "name" : "s12",
                "version" : "1.0"
              },
              {
                "id" : "",
                "name" : "s13",
                "version" : "1.0"
              }
            ],
            "softwareUpdate" : [
              {
                "name" : "s00",
                "version" : "2.15.6~RC1",
                "arch" : "x86_64",
                "from" : "yum",
                "kind" : "defect",
                "description" : "Some explanation",
                "severity" : "critical",
                "ids" : [
                  "RHSA-2020-4566",
                  "CVE-2021-4034"
                ]
              },
              {
                "name" : "s01",
                "version" : "1-23-RELEASE-1",
                "arch" : "x86_64",
                "from" : "apt",
                "kind" : "none",
                "source" : "default-repo"
              },
              {
                "name" : "s01",
                "version" : "1-24-RELEASE-64",
                "arch" : "x86_64",
                "from" : "apt",
                "kind" : "security",
                "source" : "security-backports",
                "severity" : "backport",
                "ids" : [
                  "CVE-2021-4034"
                ]
              }
            ]
          }
        ]
      }
    }
---
description: List node with select and include managementTechnology
method: GET
url: /api/latest/nodes?include=minimal,managementTechnologyDetails&select=nodeAndPolicyServer&where=[{"objectType":"node","attribute":"nodeHostname","comparator":"eq","value":"node1.localhost"}]
response:
  code: 200
  content: >-
    {
      "action":"listAcceptedNodes",
      "result":"success",
      "data":{
        "nodes":[
          {
            "id":"node1",
            "hostname":"node1.localhost",
            "status":"accepted",
            "managementTechnologyDetails":{
              "cfengineKeys":[
                "-----BEGIN RSA PUBLIC KEY-----\nMIIBCAKCAQEAlntroa72gD50MehPoyp6mRS5fzZpsZEHu42vq9KKxbqSsjfUmxnT\nRsi8CDvBt7DApIc7W1g0eJ6AsOfV7CEh3ooiyL/fC9SGATyDg5TjYPJZn3MPUktg\nYBzTd1MMyZL6zcLmIpQBH6XHkH7Do/RxFRtaSyicLxiO3H3wapH20TnkUvEpV5Qh\nzUkNM8vHZuu3m1FgLrK5NCN7BtoGWgeyVJvBMbWww5hS15IkCRuBkAOK/+h8xe2f\nhMQjrt9gW2qJpxZyFoPuMsWFIaX4wrN7Y8ZiN37U2q1G11tv2oQlJTQeiYaUnTX4\nz5VEb9yx2KikbWyChM1Akp82AV5BzqE80QIBIw==\n-----END RSA PUBLIC KEY-----"
              ],
              "cfengineUser":"root"
            }
          }
        ]
      }
    }
---
description: List node with select and include managementTechnology
method: GET
url: /api/latest/nodes?include=minimal,managementTechnologyDetails&select=nodeAndPolicyServer&where=[{"objectType":"node","attribute":"nodeHostname","comparator":"eq","value":"node1.localhost"}]
response:
  code: 200
  content: >-
    {
      "action":"listAcceptedNodes",
      "result":"success",
      "data":{
        "nodes":[
          {
            "id":"node1",
            "hostname":"node1.localhost",
            "status":"accepted",
            "managementTechnologyDetails":{
              "cfengineKeys":[
                "-----BEGIN RSA PUBLIC KEY-----\nMIIBCAKCAQEAlntroa72gD50MehPoyp6mRS5fzZpsZEHu42vq9KKxbqSsjfUmxnT\nRsi8CDvBt7DApIc7W1g0eJ6AsOfV7CEh3ooiyL/fC9SGATyDg5TjYPJZn3MPUktg\nYBzTd1MMyZL6zcLmIpQBH6XHkH7Do/RxFRtaSyicLxiO3H3wapH20TnkUvEpV5Qh\nzUkNM8vHZuu3m1FgLrK5NCN7BtoGWgeyVJvBMbWww5hS15IkCRuBkAOK/+h8xe2f\nhMQjrt9gW2qJpxZyFoPuMsWFIaX4wrN7Y8ZiN37U2q1G11tv2oQlJTQeiYaUnTX4\nz5VEb9yx2KikbWyChM1Akp82AV5BzqE80QIBIw==\n-----END RSA PUBLIC KEY-----"
              ],
              "cfengineUser":"root"
            }
          }
        ]
      }
    }
---
description: Create a node without a manufacturer, old style
method: PUT
url: /api/latest/nodes
headers:
  - "Content-Type: application/json"
body: >-
  [
    {
      "id": "378740d3-c4a9-4474-8485-478e7e52db52",
      "hostname": "node1.hostname.local",
      "status": "accepted",
      "os": {
        "type": "linux",
        "name": "debian",
        "version": "9.5",
        "fullName": "Debian GNU/Linux 9 (stretch)",
        "servicePack": "string"
      },
      "policyServerId": "root",
      "machineType": "vmware",
      "state": "enabled",
      "policyMode": "enforce",
      "agentKey": {
        "value": "-----BEGIN CERTIFICATE-----\nMIIFqDCC[...]3tALNn\n-----END CERTIFICATE-----",
        "status": "certified"
      },
      "properties": [
        {
          "name": "datacenter",
          "value": "AMS2"
        },
        {
          "name": "some-json-property",
          "value": {
            "key": "value"
          }
        },
        {
          "name": "another-property",
          "value": [
            "arrvalue1",
            "arrvalue2"
          ]
        }
      ],
      "ipAddresses": [
        "192.168.180.90"
      ],
      "timezone": {
        "name": "CEST",
        "offset": "+0200"
      }
    }
  ]
response:
  code: 200
  content: >-
    {
      "action":"createNodes",
      "result":"success",
      "data":{
        "created":[
          "378740d3-c4a9-4474-8485-478e7e52db52"
        ],
        "failed":[]
      }
    }
---
description: Create a node with a manufacturer, new style
method: PUT
url: /api/latest/nodes
headers:
  - "Content-Type: application/json"
body: >-
  [
    {
      "id": "378740d3-c4a9-4474-8485-478e7e52db53",
      "hostname": "node2.hostname.local",
      "status": "accepted",
      "os": {
        "type": "linux",
        "name": "debian",
        "version": "9.5",
        "fullName": "Debian GNU/Linux 9 (stretch)",
        "servicePack": "string"
      },
      "policyServerId": "root",
      "machine": {
        "type":"Virtual",
        "provider":"vmware",
        "manufacturer":"corp inc.",
        "serialNumber": "ece12459-2b90-49c9-ab1e-72e38f797421"
      },
      "state": "enabled",
      "policyMode": "enforce",
      "agentKey": {
        "value": "-----BEGIN CERTIFICATE-----\nMIIFqDCC[...]3tALNn\n-----END CERTIFICATE-----",
        "status": "certified"
      },
      "properties": [
        {
          "name": "datacenter",
          "value": "AMS2"
        },
        {
          "name": "some-json-property",
          "value": {
            "key": "value"
          }
        },
        {
          "name": "another-property",
          "value": [
            "arrvalue1",
            "arrvalue2"
          ]
        }
      ],
      "ipAddresses": [
        "192.168.180.90"
      ],
      "timezone": {
        "name": "CEST",
        "offset": "+0200"
      }
    }
  ]
response:
  code: 200
  content: >-
    {
      "action":"createNodes",
      "result":"success",
      "data":{
        "created":[
          "378740d3-c4a9-4474-8485-478e7e52db53"
        ],
        "failed":[]
      }
    }
---
description: Create node with some validation errors
method: PUT
url: /api/latest/nodes
headers:
  - "Content-Type: application/json"
body: >-
  [
    {
      "id": "an-invalid-uuid-hihihi",
      "hostname": "node3.hostname.local",
      "status": "removed",
      "os": {
        "type": "linux",
        "name": "debian",
        "version": "9.5",
        "fullName": "Debian GNU/Linux 9 (stretch)",
        "servicePack": "string"
      },
      "properties": [],
      "ipAddresses": []
    },
    {
      "id": "378740d3-c4a9-4474-8485-478e7e52db54",
      "hostname": "node4.hostname.local",
      "status": "accepted",
      "os": {
        "type": "linux",
        "name": "debian",
        "version": "9.5",
        "fullName": "Debian GNU/Linux 9 (stretch)",
        "servicePack": "string"
      },
      "properties": [],
      "ipAddresses": []
    }
  ]
response:
  code: 500
  content: >-
    {
      "action": "createNodes",
      "result": "error",
      "data": {
        "created": [
          "378740d3-c4a9-4474-8485-478e7e52db54"
        ],
        "failed": [
          {
            "an-invalid-uuid-hihihi": [
              "[validation] Only ID matching the shape of an UUID (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx) are authorized but 'an-invalid-uuid-hihihi' provided",
              "[validation] Node 'status' must be one of 'accepted, pending' but 'removed' provided"
            ]
          }
        ]
      }
    }
---
description: Update given node information (node properties, policy mode...)
method: POST
url: /api/latest/nodes/378740d3-c4a9-4474-8485-478e7e52db54
body: >-
  {
    "properties": [
      {
        "name": "datacenter",
        "value": "AMS2"
      },
      {
        "name": "some-json-property",
        "value": {
          "key": "value"
        }
      }
    ],
    "policyMode": "enforce",
    "state": "preparing-eol"
  }
headers:
  - "Content-Type: application/json"
response:
  code: 200
  content: >-
    {
      "action":"updateNode",
      "id":"378740d3-c4a9-4474-8485-478e7e52db54",
      "result":"success",
      "data":{
            "id":"378740d3-c4a9-4474-8485-478e7e52db54",
            "properties": [
              {
                "name": "datacenter",
                "value": "AMS2"
              },
              {
                "name": "some-json-property",
                "value": {
                  "key": "value"
                }
              }
            ],
            "policyMode": "enforce",
            "state": "preparing-eol"
      }
    }
---
description: Update given node information (node properties, policy mode...) with query parameters
method: POST
url: /api/latest/nodes/378740d3-c4a9-4474-8485-478e7e52db54
headers:
  - "Content-Type: application/x-www-form-urlencoded"
body:
params:
  properties:
    - datacenter=AMS4
    - some-json-property={"key":"another-value"}
    - another-property=["arrvalue1", "arrvalue2"]
  policyMode: enforce
  state: ignored
response:
  code: 200
  content: >-
    {
      "action" : "updateNode",
      "id" : "378740d3-c4a9-4474-8485-478e7e52db54",
      "result" : "success",
      "data" : {
        "id" : "378740d3-c4a9-4474-8485-478e7e52db54",
        "properties" : [
          {
            "name" : "another-property",
            "value" : [
              "arrvalue1",
              "arrvalue2"
            ]
          },
          {
            "name" : "datacenter",
            "value" : "AMS4"
          },
          {
            "name" : "some-json-property",
            "value" : {
              "key" : "another-value"
            }
          }
        ],
        "policyMode" : "enforce",
        "state" : "ignored"
      }
    }
---
description: Delete given node
method: DELETE
url: /api/latest/nodes/378740d3-c4a9-4474-8485-478e7e52db54
response:
  code: 200
  content: >-
    {
      "action":"deleteNode",
      "result":"success",
      "data":{
        "nodes": [
          {
            "id":"378740d3-c4a9-4474-8485-478e7e52db54",
            "status":"deleted",
            "hostname":"node4.hostname.local",
            "osName":"Debian",
            "osVersion":"9.5",
            "machineType":"Physical"
          }
        ]
      }
    }
---
description: Check that the new node has a manufacturer
method: GET
url: /api/latest/nodes/378740d3-c4a9-4474-8485-478e7e52db53?include=minimal,machine
response:
  code: 200
  content: >-
    {
      "action":"nodeDetails",
      "id":"378740d3-c4a9-4474-8485-478e7e52db53",
      "result":"success",
      "data":{
        "nodes":[
          {
            "id":"378740d3-c4a9-4474-8485-478e7e52db53",
            "hostname":"node2.hostname.local",
            "status":"accepted",
            "machine": {
              "id":"45f70964-7ec9-ed75-61a5-ed7acbde17f4",
              "type":"Virtual",
              "provider":"vmware",
              "manufacturer":"corp inc.",
              "serialNumber": "ece12459-2b90-49c9-ab1e-72e38f797421"
            }
          }
        ]
      }
    }
---
description: List all pending nodes with configurable details level
method: GET
url: /api/latest/nodes/pending
response:
  code: 200
  content: >-
    {
      "action" : "listPendingNodes",
      "result" : "success",
      "data" : {
        "nodes" : [
          {
            "id" : "node1-pending",
            "hostname" : "node1-pending.localhost",
            "status" : "pending",
            "state" : "enabled",
            "os" : {
              "type" : "Linux",
              "name" : "Debian",
              "version" : "10.6",
              "fullName" : "Buster",
              "kernelVersion" : "4.19"
            },
            "ram" : 1460132,
            "machine" : {
              "id" : "machine1",
              "type" : "Virtual",
              "provider" : "vbox"
            },
            "ipAddresses" : [
              "192.168.0.10"
            ],
            "description" : "",
            "lastInventoryDate" : "2021-01-30T01:20:00+01:00",
            "policyServerId" : "root",
            "managementTechnology" : [
              {
                "name" : "Rudder",
                "version" : "7.0.0",
                "capabilities" : [],
                "nodeKind" : "node"
              }
            ],
            "properties" : [],
            "policyMode" : "enforce",
            "timezone" : {
              "name" : "UTC",
              "offset" : "+00"
            }
          },
          {
            "id" : "node2-pending",
            "hostname" : "node2-pending.localhost",
            "status" : "pending",
            "state" : "enabled",
            "os" : {
              "type" : "Linux",
              "name" : "Debian",
              "version" : "10.6",
              "fullName" : "Buster",
              "kernelVersion" : "4.19"
            },
            "ram" : 1460132,
            "machine" : {
              "id" : "machine1",
              "type" : "Virtual",
              "provider" : "vbox"
            },
            "ipAddresses" : [
              "192.168.0.10"
            ],
            "description" : "",
            "lastInventoryDate" : "2021-01-30T01:20:00+01:00",
            "policyServerId" : "root",
            "managementTechnology" : [
              {
                "name" : "Rudder",
                "version" : "7.0.0",
                "capabilities" : [],
                "nodeKind" : "node"
              }
            ],
            "properties" : [],
            "policyMode" : "enforce",
            "timezone" : {
              "name" : "UTC",
              "offset" : "+00"
            }
          }
        ]
      }
    }
---
description: Accept pending nodes
method: POST
url: /api/latest/nodes/pending
headers:
  - "Content-Type: application/json"
body: >-
  {
    "nodeId" : ["node1-pending"],
    "status" : "accepted"
  }
response:
  code: 200
  content: >-
    {
      "action" : "changePendingNodeStatus",
      "result" : "success",
      "data" : {
        "nodes" : [
          {
            "id" : "node1-pending",
            "status" : "accepted",
            "hostname" : "node1-pending.localhost",
            "osName" : "Debian",
            "osVersion" : "10.6",
            "machineType" : "Virtual"
          }
        ]
      }
    }
---
description: Refuse pending nodes
method: POST
url: /api/latest/nodes/pending
headers:
  - "Content-Type: application/json"
body: >-
  {
    "nodeId" : ["node2-pending"],
    "status" : "refuse"
  }
response:
  code: 200
  content: >-
    {
      "action" : "changePendingNodeStatus",
      "result" : "success",
      "data" : {
        "nodes" : [
          {
            "id" : "node2-pending",
            "status" : "pending",
            "hostname" : "node2-pending.localhost",
            "osName" : "Debian"
          }
        ]
      }
    }
---
description: List no pending nodes after acceptation and refusal
method: GET
url: /api/latest/nodes/pending
response:
  code: 200
  content: >-
    {
      "action" : "listPendingNodes",
      "result" : "success",
      "data" : {
        "nodes" : []
      }
    }
---
description: Accept or refuse pending nodes fail without node
method: POST
url: /api/latest/nodes/pending
headers:
  - "Content-Type: application/json"
body: >-
  {
    "status" : "accepted"
  }
response:
  code: 500
  content: >-
    {
      "action" : "changePendingNodeStatus",
      "result" : "error",
      "errorDetails" : "Error when changing Node status; cause was: Node ID or status not correctly sent; cause was: Unexpected: .nodeId(missing)"
    }
---
description: Accept or refuse pending nodes fail without status
method: POST
url: /api/latest/nodes/pending
headers:
  - "Content-Type: application/json"
body: >-
  {
    "nodeId" : ["node1-pending"]
  }
response:
  code: 500
  content: >-
    {
      "action" : "changePendingNodeStatus",
      "result" : "error",
      "errorDetails" : "Error when changing Node status; cause was: Node ID or status not correctly sent; cause was: Unexpected: .status(missing)"
    }
---
description: Accept or refuse pending nodes fail without body
method: POST
url: /api/latest/nodes/pending
headers:
  - "Content-Type: application/json"
response:
  code: 500
  content: >-
    {
      "action" : "changePendingNodeStatus",
      "result" : "error",
      "errorDetails" : "Error when changing Node status; cause was: Node ID or status not correctly sent; cause was: Unexpected: Unexpected end of input"
    }
---
description: Accept or refuse given pending node
method: POST
url: /api/latest/nodes/pending/node1-pending
headers:
  - "Content-Type: application/json"
body: >-
  {
    "status" : "accepted"
  }
response:
  code: 200
  content: >-
    {
      "action" : "changePendingNodeStatus",
      "result" : "success",
      "data" : {
        "nodes" : [
          {
            "id" : "node1-pending",
            "status" : "accepted",
            "hostname" : "node1-pending.localhost",
            "osName" : "Debian",
            "osVersion" : "10.6",
            "machineType" : "Virtual"
          }
        ]
      }
    }
---
description: Accept or refuse given pending node without status
method: POST
url: /api/latest/nodes/pending/node1-pending
headers:
  - "Content-Type: application/json"
response:
  code: 500
  content: >-
    {
      "action" : "changePendingNodeStatus",
      "result" : "error",
      "errorDetails" : "Error when changing Node status; cause was: Node status not correctly sent; cause was: Unexpected: Unexpected end of input"
    }
---
description: Get the status (pending, accepted, unknown) of the comma separated list of nodes given by `ids` parameter
method: GET
url: /api/latest/nodes/status?ids=node1,378740d3-c4a9-4474-8485-478e7e52db53
response:
  code: 200
  content: >-
    {
      "action":"getNodesStatus",
      "result":"success",
      "data":{
        "nodes":[
          {
            "id":"node1",
            "status":"accepted"
          },
          {
            "id":"378740d3-c4a9-4474-8485-478e7e52db53",
            "status":"accepted"
          }
        ]
      }
    }
---
description: Get the status (pending, accepted, unknown) of the comma separated list of nodes given by empty `ids` parameter
method: GET
url: /api/latest/nodes/status
response:
  code: 200
  content: >-
    {
      "action":"getNodesStatus",
      "result":"success",
      "data":{
        "nodes":[]
      }
    }
---
description: Ask given node to start a run with the given policy for Dsc agent
method: POST
url: /api/latest/nodes/node-dsc/applyPolicy
response:
  code: 500
  content: >-
    {
      "action":"applyPolicy",
      "result":"error",
      "errorDetails":"Node with id 'node-dsc' has an agent type (Rudder Windows) which doesn't support remote run"
    }
---
description: Ask given node to start a run with the given policy for unknown node
method: POST
url: /api/latest/nodes/unknown-node/applyPolicy
response:
  code: 500
  content: >-
    {
      "action":"applyPolicy",
      "result":"error",
      "errorDetails":"Node with id 'unknown-node' was not found"
    }
---
description: Getting a software version for a set of Nodes
url: /secure/api/nodes/details/software/s05
method: POST
headers:
  - "Content-Type: application/json"
body: >-
  {
    "software": ["s05"]
  }
response:
  code: 200
  content: >-
    {
      "node-dsc" : "1.0",
      "node2" : "1.0",
      "node1" : "1.0",
      "root" : "1.0"
    }
---
description: Getting data to build a Node table
url: /secure/api/nodes/details
method: POST
headers:
  - "Content-Type: application/json"
body: >-
  {
    "nodeIds" : ["node-dsc", "node2", "node1", "root"]
  }
response:
  code: 200
  content: >-
    [
      {
        "id" : "node-dsc",
        "name" : "node-dsc.localhost",
        "ram" : "1.39 MB",
        "policyServerId" : "root",
        "policyMode" : "audit",
        "globalModeOverride" : "default",
        "kernel" : "win-kernel-2012",
        "agentVersion" : "7.0.0",
        "machineType" : "vbox",
        "os" : "Windows 2012 youpla boom",
        "state" : "enabled",
        "systemError" : false,
        "ipAddresses" : [
          "192.168.0.5"
        ],
        "lastRun" : "Never",
        "lastInventory" : "2021-01-30 01:20:00+0100",
        "software" : {},
        "properties" : {},
        "inheritedProperties" : {},
        "score" : {
          "score" : "X",
          "details" : {}
        }
      },
      {
        "id" : "node2",
        "name" : "node2.localhost",
        "ram" : "1.39 MB",
        "policyServerId" : "root",
        "policyMode" : "enforce",
        "globalModeOverride" : "override",
        "kernel" : "4.19",
        "agentVersion" : "7.0.0",
        "machineType" : "vbox",
        "os" : "Buster",
        "state" : "enabled",
        "systemError" : false,
        "ipAddresses" : [
          "192.168.0.10"
        ],
        "lastRun" : "Never",
        "lastInventory" : "2021-01-30 01:20:00+0100",
        "software" : {},
        "properties" : {},
        "inheritedProperties" : {},
        "score" : {
          "score" : "X",
          "details" : {}
        }
      },
      {
        "id" : "node1",
        "name" : "node1.localhost",
        "ram" : "1.39 MB",
        "policyServerId" : "root",
        "policyMode" : "enforce",
        "globalModeOverride" : "override",
        "kernel" : "4.19",
        "agentVersion" : "7.0.0",
        "machineType" : "vbox",
        "os" : "Buster",
        "state" : "enabled",
        "systemError" : false,
        "ipAddresses" : [
          "192.168.0.10"
        ],
        "lastRun" : "Never",
        "lastInventory" : "2021-01-30 01:20:00+0100",
        "software" : {},
        "properties" : {},
        "inheritedProperties" : {},
        "score" : {
          "score" : "X",
          "details" : {}
        }
      },
      {
        "id" : "root",
        "name" : "server.rudder.local",
        "policyServerId" : "root",
        "policyMode" : "enforce",
        "globalModeOverride" : "override",
        "kernel" : "4.5",
        "agentVersion" : "7.0.0",
        "machineType" : "vbox",
        "os" : "Stretch",
        "state" : "enabled",
        "systemError" : false,
        "ipAddresses" : [
          "192.168.0.100"
        ],
        "lastRun" : "Never",
        "lastInventory" : "2021-01-30 01:20:00+0100",
        "software" : {},
        "properties" : {},
        "inheritedProperties" : {},
        "score" : {
          "score" : "X",
          "details" : {}
        }
      }
    ]
---
description: Getting data to build a Node table with software and properties
url: /secure/api/nodes/details
method: POST
headers:
  - "Content-Type: application/json"
body: >-
  {
    "nodeIds" : [ "node1" ],
    "software" : [ "s05" ],
    "properties" : [ {"inherited":true,"value":"stringParam"} ]
  }
response:
  code: 200
  content: >-
    [
      {
        "id" : "node1",
        "name" : "node1.localhost",
        "ram" : "1.39 MB",
        "policyServerId" : "root",
        "policyMode" : "enforce",
        "globalModeOverride" : "override",
        "kernel" : "4.19",
        "agentVersion" : "7.0.0",
        "machineType" : "vbox",
        "os" : "Buster",
        "state" : "enabled",
        "systemError" : false,
        "ipAddresses" : [
          "192.168.0.10"
        ],
        "lastRun" : "Never",
        "lastInventory" : "2021-01-30 01:20:00+0100",
        "software" : {
          "s05" : "1.0"
        },
        "properties" : {},
        "inheritedProperties" : {
          "stringParam" : {
            "name" : "stringParam",
            "value" : "stringsome string",
            "inheritMode" : "map",
            "provider" : "inherited",
            "hierarchy" : "<p>from <b>Global Parameter</b>:<pre>&quot;some string&quot;</pre></p><p>from <b>Real nodes (0000f5d3-8c61-4d20-88a7-bb947705ba8a)</b>:<pre>&quot;string&quot;</pre></p>",
            "origval" : "string"
          }
        },
        "score" : {
          "score" : "X",
          "details" : {}
        }
      }
    ]
---
description: Get all properties for that node, included inherited ones
method: GET
url: /api/latest/nodes/node1/inheritedProperties
response:
  code: 200
  content: >-
    {
      "action" : "nodeInheritedProperties",
      "result" : "success",
      "data" : [
        {
          "nodeId" : "node1",
          "properties" : [
            {
              "name" : "jsonParam",
              "value" : {
                "array" : [
                  5,
                  6
                ],
                "group" : "string",
                "json" : {
                  "g1" : "g1",
                  "var1" : "val1",
                  "var2" : "val2"
                },
                "string" : "a string"
              },
              "provider" : "inherited",
              "hierarchy" : [
                {
                  "kind" : "global",
                  "value" : {
                    "array" : [
                      1,
                      3,
                      2
                    ],
                    "json" : {
                      "var1" : "val1",
                      "var2" : "val2"
                    },
                    "string" : "a string"
                  }
                },
                {
                  "kind" : "group",
                  "name" : "Real nodes",
                  "id" : "0000f5d3-8c61-4d20-88a7-bb947705ba8a",
                  "value" : {
                    "array" : [
                      5,
                      6
                    ],
                    "group" : "string",
                    "json" : {
                      "g1" : "g1"
                    }
                  }
                }
              ],
              "hierarchyStatus" : {
                "hasChildTypeConflicts" : false,
                "fullHierarchy" : [
                  {
                    "kind" : "global",
                    "valueType" : "Object"
                  },
                  {
                    "kind" : "group",
                    "name" : "Real nodes",
                    "id" : "0000f5d3-8c61-4d20-88a7-bb947705ba8a",
                    "valueType" : "Object"
                  }
                ]
              },
              "origval" : {
                "array" : [
                  5,
                  6
                ],
                "group" : "string",
                "json" : {
                  "g1" : "g1"
                }
              }
            },
            {
              "name" : "modeParam",
              "value" : "some string",
              "inheritMode" : "opa",
              "provider" : "inherited",
              "hierarchy" : [
                {
                  "kind" : "global",
                  "value" : "some string"
                }
              ],
              "hierarchyStatus" : {
                "hasChildTypeConflicts" : false,
                "fullHierarchy" : [
                  {
                    "kind" : "global",
                    "valueType" : "String"
                  }
                ]
              },
              "origval" : "some string"
            },
            {
              "name" : "rudder",
              "value" : {
                "rudder" : {
                  "compliance_expiration_policy" : {
                    "mode" : "ExpireImmediately"
                  }
                }
              },
              "provider" : "inherited",
              "hierarchy" : [
                {
                  "kind" : "global",
                  "value" : {
                    "rudder" : {
                      "compliance_expiration_policy" : {
                        "mode" : "ExpireImmediately"
                      }
                    }
                  }
                }
              ],
              "hierarchyStatus" : {
                "hasChildTypeConflicts" : false,
                "fullHierarchy" : [
                  {
                    "kind" : "global",
                    "valueType" : "Object"
                  }
                ]
              },
              "origval" : {
                "rudder" : {
                  "compliance_expiration_policy" : {
                    "mode" : "ExpireImmediately"
                  }
                }
              }
            },            
            {
              "name" : "someJson2",
              "value" : "string",
              "inheritMode" : "opa",
              "provider" : "inherited",
              "hierarchy" : [
                {
                  "kind" : "global",
                  "value" : "string"
                }
              ],
              "hierarchyStatus" : {
                "hasChildTypeConflicts" : false,
                "fullHierarchy" : [
                  {
                    "kind" : "global",
                    "valueType" : "String"
                  }
                ]
              },
              "origval" : "string"
            },
            {
              "name" : "stringParam",
              "value" : "stringsome string",
              "inheritMode" : "map",
              "provider" : "inherited",
              "hierarchy" : [
                {
                  "kind" : "global",
                  "value" : "some string"
                },
                {
                  "kind" : "group",
                  "name" : "Real nodes",
                  "id" : "0000f5d3-8c61-4d20-88a7-bb947705ba8a",
                  "value" : "string"
                }
              ],
              "hierarchyStatus" : {
                "hasChildTypeConflicts" : false,
                "fullHierarchy" : [
                  {
                    "kind" : "global",
                    "valueType" : "String"
                  },
                  {
                    "kind" : "group",
                    "name" : "Real nodes",
                    "id" : "0000f5d3-8c61-4d20-88a7-bb947705ba8a",
                    "valueType" : "String"
                  }
                ]
              },
              "origval" : "string"
            },
            {
              "name" : "systemParam",
              "value" : "some string",
              "provider" : "inherited",
              "hierarchy" : [
                {
                  "kind" : "global",
                  "value" : "some string"
                }
              ],
              "hierarchyStatus" : {
                "hasChildTypeConflicts" : false,
                "fullHierarchy" : [
                  {
                    "kind" : "global",
                    "valueType" : "String"
                  }
                ]
              },
              "origval" : "some string"
            }
          ]
        }
      ]
    }
---
description: Getting a property value for a set of Nodes (all nodes)
method: POST
url: /secure/api/nodes/details/property/stringParam
headers:
  - "Content-Type: application/json"
body: >-
  {
    "inherited": true
  }
response:
  code: 200
  content: >-
    {
      "node1-pending" : {
        "name" : "stringParam",
        "value" : "some string",
        "provider" : "inherited",
        "hierarchy" : "<p>from <b>Global Parameter</b>:<pre>&quot;some string&quot;</pre></p>",
        "origval" : "some string"
      },
      "node-dsc" : {
        "name" : "stringParam",
        "value" : "some string",
        "provider" : "inherited",
        "hierarchy" : "<p>from <b>Global Parameter</b>:<pre>&quot;some string&quot;</pre></p>",
        "origval" : "some string"
      },
      "node2" : {
        "name" : "stringParam",
        "value" : "stringsome string",
        "inheritMode" : "map",
        "provider" : "inherited",
        "hierarchy" : "<p>from <b>Global Parameter</b>:<pre>&quot;some string&quot;</pre></p><p>from <b>Real nodes (0000f5d3-8c61-4d20-88a7-bb947705ba8a)</b>:<pre>&quot;string&quot;</pre></p>",
        "origval" : "string"
      },
      "node1" : {
        "name" : "stringParam",
        "value" : "stringsome string",
        "inheritMode" : "map",
        "provider" : "inherited",
        "hierarchy" : "<p>from <b>Global Parameter</b>:<pre>&quot;some string&quot;</pre></p><p>from <b>Real nodes (0000f5d3-8c61-4d20-88a7-bb947705ba8a)</b>:<pre>&quot;string&quot;</pre></p>",
        "origval" : "string"
      },
      "root" : {
        "name" : "stringParam",
        "value" : "stringsome string",
        "inheritMode" : "map",
        "provider" : "inherited",
        "hierarchy" : "<p>from <b>Global Parameter</b>:<pre>&quot;some string&quot;</pre></p><p>from <b>Real nodes (0000f5d3-8c61-4d20-88a7-bb947705ba8a)</b>:<pre>&quot;string&quot;</pre></p>",
        "origval" : "string"
      },
      "378740d3-c4a9-4474-8485-478e7e52db53" : {
        "name" : "stringParam",
        "value" : "some string",
        "provider" : "inherited",
        "hierarchy" : "<p>from <b>Global Parameter</b>:<pre>&quot;some string&quot;</pre></p>",
        "origval" : "some string"
      },
      "378740d3-c4a9-4474-8485-478e7e52db52" : {
        "name" : "stringParam",
        "value" : "some string",
        "provider" : "inherited",
        "hierarchy" : "<p>from <b>Global Parameter</b>:<pre>&quot;some string&quot;</pre></p>",
        "origval" : "some string"
      }
    }
---
description: Get node (minimal)
method: GET
url: /api/latest/nodes/node1?include=minimal,properties
response:
  code: 200
  content: >-
    {
      "action":"nodeDetails",
      "id":"node1",
      "result":"success",
      "data":{
        "nodes":[
          {
            "id":"node1",
            "hostname":"node1.localhost",
            "status":"accepted",
            "properties":[]
          }
        ]
      }
    }
---
description: Add Json property
method: POST
url: /api/latest/nodes/node1
headers:
  - "Content-Type: application/json"
body: >-
  {
    "properties": [
      { "name":"jsonArray"            , "value": [ "one", 2, true]   },
      { "name":"jsonProp"             , "value": {"jsonObject":"ok"} },
      { "name":"stringArray"          , "value": "[array]"           },
      { "name":"stringNonMatching"    , "value": "{paren]"           },
      { "name":"stringParen"          , "value": "{paren}"           },
      { "name":"stringParenEscaped2"  , "value": "\\{paren\\}"       },
      { "name":"stringParenIncomplete", "value": "{paren"            },
      { "name":"stringQuoted"         , "value": "\"quotedString\""  },
      { "name":"stringSimple"         , "value": "simple string"     }
    ]
  }
response:
  code: 200
  note: >-
    One backslash has not a very defined behavior in front of anything but " and \. The rule: if you want a \, you escape it.
  content: >-
    {
      "action":"updateNode",
      "id":"node1",
      "result":"success",
      "data":{
        "id":"node1",
        "properties":[
          { "name":"jsonArray"            , "value": [ "one", 2, true]   },
          { "name":"jsonProp"             , "value": {"jsonObject":"ok"} },
          { "name":"stringArray"          , "value": "[array]"           },
          { "name":"stringNonMatching"    , "value": "{paren]"           },
          { "name":"stringParen"          , "value": "{paren}"           },
          { "name":"stringParenEscaped2"  , "value": "\\{paren\\}"       },
          { "name":"stringParenIncomplete", "value": "{paren"            },
          { "name":"stringQuoted"         , "value": "\"quotedString\""  },
          { "name":"stringSimple"         , "value": "simple string"     }
        ],
        "policyMode":"enforce","state":"enabled"
      }
    }
---
description: Get node (minimal)
method: GET
url: /api/latest/nodes/node1?include=minimal,properties
response:
  code: 200
  content: >-
    {
      "action":"nodeDetails",
      "id":"node1",
      "result":"success",
      "data":{
        "nodes":[
          {
            "id":"node1",
            "hostname":"node1.localhost",
            "status":"accepted",
            "properties":[
              { "name":"jsonArray"            , "value": [ "one", 2, true]   },
              { "name":"jsonProp"             , "value": {"jsonObject":"ok"} },
              { "name":"stringArray"          , "value": "[array]"           },
              { "name":"stringNonMatching"    , "value": "{paren]"           },
              { "name":"stringParen"          , "value": "{paren}"           },
              { "name":"stringParenEscaped2"  , "value": "\\{paren\\}"       },
              { "name":"stringParenIncomplete", "value": "{paren"            },
              { "name":"stringQuoted"         , "value": "\"quotedString\""  },
              { "name":"stringSimple"         , "value": "simple string"     }
            ]
          }
        ]
      }
    }
---
description: Delete Json property
method: POST
url: /api/latest/nodes/node1
headers:
  - "Content-Type: application/json"
body: >-
  {
    "properties": [
          { "name":"jsonArray"            , "value": "" },
          { "name":"jsonProp"             , "value": "" },
          { "name":"stringArray"          , "value": "" },
          { "name":"stringNonMatching"    , "value": "" },
          { "name":"stringParen"          , "value": "" },
          { "name":"stringParenEscaped2"  , "value": "" },
          { "name":"stringParenIncomplete", "value": "" },
          { "name":"stringQuoted"         , "value": "" },
          { "name":"stringSimple"         , "value": "" }
    ]
  }
response:
  code: 200
  content: >-
    {
      "action":"updateNode",
      "id":"node1",
      "result":"success",
      "data":{
        "id":"node1",
        "properties":[],
        "policyMode":"enforce","state":"enabled"
      }
    }
