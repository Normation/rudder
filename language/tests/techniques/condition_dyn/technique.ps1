# generated by rudderc
# @name condition dyn
# @version 1.0

function Condition-Dyn {
  [CmdletBinding()]
  param (
    [Parameter(Mandatory=$True)]
    [String]$ReportId,
    [Parameter(Mandatory=$True)]
    [String]$TechniqueName,
    [Rudder.PolicyMode]$PolicyMode
  )

  $ReportIdBase = $reportId.Substring(0,$reportId.Length-1)
  $localContext = [Rudder.Context]::new()
  $resourcesDir = $PSScriptRoot + "\resources"
  # --------------Method Call--------------- #
  $ReportId = $ReportIdBase+""
  $common_params = @{
    ClassPrefix = "skip_item_${report_data.canonified_directive_id}"
    ComponentKey = "skip_item_${report_data.canonified_directive_id}"
    ComponentName = "condition_from_variable_existence"
    PolicyMode = $PolicyMode
    ReportId = $ReportId
    TechniqueName = $TechniqueName
  }
  $call_params = @{
    Condition = "skip_item_${report_data.canonified_directive_id}"
    PolicyMode = $PolicyMode
    VariableName = "node.properties[skip][${report_data.directive_id}]"
  }
  $call = Condition-From-Variable-Existence @call_params
  $compute_params = $common_params + @{
    MethodCall = $call
  }
  $context = Compute-Method-Call @compute_params
  $localContext.merge($context)
  # --------------Method Call--------------- #
  $ReportId = $ReportIdBase+"4faf9c44-88bb-492a-936a-aa9813af6b8d"
  $common_params = @{
    ClassPrefix = "pwd"
    ComponentKey = "pwd"
    ComponentName = "Command execution"
    PolicyMode = $PolicyMode
    ReportId = $ReportId
    TechniqueName = $TechniqueName
  }
  if ($localContext.evaluate("skip_item_false")) {
    $call_params = @{
      Command = "pwd"
      PolicyMode = $PolicyMode
    }
    $call = Command-Execution @call_params
    $compute_params = $common_params + @{
      MethodCall = $call
    }
    $context = Compute-Method-Call @compute_params
    $localContext.merge($context)
  }
  else {
    Rudder-Report-NA @common_params
  }
}
