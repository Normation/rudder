# generated by rudderc
# @name conditional method that includes aliases for condition
# @version 1.0

function Condition-Alias {
  [CmdletBinding()]
  param (
    [Parameter(Mandatory=$True)]
    [String]$ReportId,
    [Parameter(Mandatory=$True)]
    [String]$TechniqueName,
    [Rudder.PolicyMode]$PolicyMode
  )

  $ReportIdBase = $reportId.Substring(0,$reportId.Length-1)
  $localContext = [Rudder.Context]::new()
  $resourcesDir = $PSScriptRoot + "\resources"
  # --------------Method Call--------------- #
  $ReportId = $ReportIdBase+"8b575191-0ab0-4851-b05c-e7cde3726f05"
  $common_params = @{
    ClassPrefix = "pwd"
    ComponentKey = "pwd"
    ComponentName = "Command execution"
    PolicyMode = $PolicyMode
    ReportId = $ReportId
    TechniqueName = $TechniqueName
  }
  if ($localContext.evaluate("sles_12")) {
    $call_params = @{
      Command = "pwd"
      PolicyMode = $PolicyMode
    }
    $call = Command-Execution @call_params
    $compute_params = $common_params + @{
      MethodCall = $call
    }
    $context = Compute-Method-Call @compute_params
    $localContext.merge($context)
  }
  else {
    Rudder-Report-NA @common_params
  }
  # --------------Method Call--------------- #
  $ReportId = $ReportIdBase+"3a8f5707-a86a-4599-8c68-3dbbfd6f70a1"
  $common_params = @{
    ClassPrefix = "ls"
    ComponentKey = "ls"
    ComponentName = "Command execution"
    PolicyMode = $PolicyMode
    ReportId = $ReportId
    TechniqueName = $TechniqueName
  }
  if ($localContext.evaluate("ubuntu_10_04")) {
    $call_params = @{
      Command = "ls"
      PolicyMode = $PolicyMode
    }
    $call = Command-Execution @call_params
    $compute_params = $common_params + @{
      MethodCall = $call
    }
    $context = Compute-Method-Call @compute_params
    $localContext.merge($context)
  }
  else {
    Rudder-Report-NA @common_params
  }
}
