#####################################################################################
# Copyright 2011 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# In accordance with the terms of section 7 (7. Additional Terms.) of
# the GNU Affero GPL v3, the copyright holders add the following
# Additional permissions:
# Notwithstanding to the terms of section 5 (5. Conveying Modified Source
# Versions) and 6 (6. Conveying Non-Source Forms.) of the GNU Affero GPL v3
# licence, when you create a Related Module, this Related Module is
# not considered as a part of the work and may be distributed under the
# license agreement of your choice.
# A "Related Module" means a set of sources files including their
# documentation that, without modification of the Source Code, enables
# supplementary functions or services in addition to those offered by
# the Software.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/agpl.html>.
#
#####################################################################################

##
# Default configuration file for the application. 
# You can define the location of the file by
# setting "rudder.configFile" JVM property,
# for example:
# java .... -Drudder.configFile=/opt/rudder/etc/rudder-web.conf
##


###########################
# Application information ###########################################################
###########################

#
#define that property if you are behind a proxy
#or anything that make the URL served by the
#servlet container be different than the public one
#note: if defined, must not end with /
#let blank to use default value
#
## This property is no more use since Rudder 2.4
#base.url=

#
# Directory used to store locks about
# some Rudder actions or batch processing
#
rudder.dir.lock=/var/rudder/lock/

#
# URL where Inventory Reports are sent to be processed and stored.
# This is the local URL of the "inventory endpoint" web application,
#
rudder.endpoint.cmdb=http://localhost:8080/endpoint/upload/


#
# The port used by the rsyslog server on the Rudder root server. 
# Default port number is 514, but in some cases this may need to be changed.
# For example, on Ubuntu version >= 12.04 rsyslog runs as a non-root user,
# so using port 514 is not permitted, thus we must use a port higher than 1024.
# (see: https://bugs.launchpad.net/ubuntu/+source/rsyslog/+bug/789174)
#
rudder.syslog.port=514

###################
# LDAP properties ###################################################################
###################

#
# LDAP directory connection information
#
ldap.host=localhost
ldap.port=389
ldap.authdn=cn=manager,cn=rudder-configuration
ldap.authpw=secret


#
# LDAP DIT configuration
#
# You should not have to modify the following properties, used to 
# configure the inernal structure of the LDAP Directory. 
#
ldap.node.base=cn=rudder-configuration
ldap.rudder.base=ou=Rudder, cn=rudder-configuration
ldap.inventories.software.basedn=ou=Inventories, cn=rudder-configuration
ldap.inventories.accepted.basedn=ou=Accepted Inventories, ou=Inventories, cn=rudder-configuration
ldap.inventories.pending.basedn=ou=Pending Inventories, ou=Inventories, cn=rudder-configuration
ldap.inventories.removed.basedn=ou=Removed Inventories, ou=Inventories, cn=rudder-configuration


###########################
# SQL database properties ###########################################################
###########################

#
# For now, only PostGRES is supported, and so the expected
# JDBC driver is "org.postgresql.Driver"
#
rudder.jdbc.driver=org.postgresql.Driver
rudder.jdbc.url=jdbc:postgresql://localhost:5432/rudder
rudder.jdbc.username=rudder
rudder.jdbc.password=Normation
rudder.jdbc.maxPoolSize=25


###########################
# Automatic reports cleaning ###########################################################
###########################

#
# Automatic reports cleaning
# This allows you to schedule automatically clean reports (archive or delete)
#

#
# TTL are the maximum age (in days) of reports before archiving (archive.TTL)
# or deleting (delete.TTL)
#
# A value equal to 0 or lower means disable automatic archiving/deleting.
#
# If the archive TTL is greater than the delete TTL then archiving will be disabled
# as there will be no reports to archive (they would be deleted first).
#
# Defaults: archive after 3 days, delete after 90 days.
#

rudder.batch.reportscleaner.archive.TTL=3
rudder.batch.reportscleaner.delete.TTL=90

#
# Schedule option for automatic cleaning
# Automatic cleaning can be scheduled:
#  - every hour at the minute past the hour of your choice
#  - every day at the time of your choice
#  - every week on the day at the time of your choice
#
# Available options: hourly, daily, weekly
# Default frequency: daily
rudder.batch.reportscleaner.frequency=daily

# Defaults: minute=0, hour=0, day=Sunday


# Which minute the cleaner should be run on.
# Values  : [0-59]
# Default : 0
rudder.batch.databasecleaner.runtime.minute=0

# Which hour the cleaner should be run on.
# Values : [0-23]
# Default : 0
rudder.batch.databasecleaner.runtime.hour=0

# Which day the cleaner should be run on.
# Values : monday | tuesday | wednesday | thursday | friday | saturday | sunday
# Default : sunday
rudder.batch.databasecleaner.runtime.day=sunday


#####################
# Webdav properties #################################################################
#####################

#
# Authentication information for the webdav server used to
# receive Inventory Reports from nodes
#
rudder.webdav.user=rudder
rudder.webdav.password=rudder

####################################
# CFEngine and promises properties ##################################################
####################################

#
# Port used by the community edition of CFEngine agent to 
# contact the server (that's the server port).
#
rudder.community.port=5309

#
# Command line tools used to check the validity of generated promises
#
rudder.community.checkpromises.command=/var/rudder/cfengine-community/bin/cf-promises
rudder.nova.checkpromises.command=/bin/true

#
# Command to force the server to reload its promises
# This will be run every time promises are regenerated on the root server
#
rudder.cfengine.reload.server.command=/opt/rudder/bin/rudder-reload-cf-serverd

#
# Path to where CFEngine Enterprise (ex Nova) licenses are stored. 
#
rudder.dir.licensesFolder=/opt/rudder/etc/licenses

#
# Directories used to write nodes promises. 
# - promises generated for a node with id UUID go in ***/var/rudder/share/UUID***
#   For now, that property can not be modified, because there is no simple
#   way of doing that and letting node knowing where to go look for there promises. 
# - promises generated for CFEngine community server go into ***/var/rudder/cfengine-community/inputs***
# - promises generated for CFEngine Nova server go into ***/var/cfengine/inputs***
# - 'rudder.dir.backup' is the directory path where previous configuration of each node are stored
#
rudder.dir.backup=/var/rudder/backup/

#
# Shared folder
#
# Directory of the extra files the rudder root server will serve to the managed nodes
# If left empty, no extra files will be served
#
rudder.dir.shared.files.folder=/var/rudder/configuration-repository/shared-files

#
# Debug Node Configuration parameters
# 
# Node Configurations are all the parameters (global parameters, 
# applied rules/directives with their parameters, node information, etc)
# contextualized for the node. They are the resources used to actually
# generate promises for THAT node. 
#
# By default, these information are only used internally by Rudder and
# are not available to the user. But they may be needed in some cases, 
# for debugging. 
#
# This option allows to define the directory where the node configurations
# (in JSON format) will go. 
# 
# To enable the writing of node configurations, enable the logger 
# named "rudder.debug.nodeconfiguration" in logback.xml
#
rudder.debug.nodeconfiguration.path=/var/log/rudder/nodeConfigurations

############################################
# Technique library and its Git properties ##########################################
############################################

#
# The path of the root directory of the Technique library. 
# It MUST be the same directory of ${rudder.dir.gitRoot} 
# or one of its sub-directories
#
rudder.dir.techniques=/var/rudder/configuration-repository/techniques


#
# The directory containing tools used by Rudder or nodes. 
# You should configure the path of that directory to be
# the "tools" subdirectory of "rudder-technique" local
# clone of git repository 
# (see property rudder.git.rudder-technique)
#
rudder.dir.dependencies=/var/rudder/tools

#
# Interval of time (in minutes) between two checks
# for a Technique library update.
#
# If O is given, the periodic update of Technique
# library features will be disabled
#
rudder.batch.techniqueLibrary.updateInterval=5

#
# Configure the refs path to use for the git repository for
# the Technique Reference Library. 
# The default is to use "refs/heads/master" (the local master
# branch). 
# You have to use the full ref path. 
#
rudder.techniqueLibrary.git.refs.path=refs/heads/master


##########################################################
# Configuration repository, its update and Git properties ###########################
##########################################################

#
# Configuration repository is the place where all Group/Directive/Rules
# configured by the user are historized. 
#

#
# The full path to the directory containing the 
# .git,  directives, groups and rules directories.
#
rudder.dir.gitRoot=/var/rudder/configuration-repository

#
# If true, an archive of Rules, groups, 
# Directives and Active Techniques are recorded
# to the rudder.dir.gitRoot directory specified above
# and a git commit is performed when any of these items is modified.
# Boolean, defaults to true.
# 
rudder.autoArchiveItems=true

###############################
# Dynamic group configuration #######################################################
###############################

#
# Interval of time between two dynamic group update batch
# Expect an int (amount of minutes)
# If O is given, the dynamic group features will be disabled
#
rudder.batch.dyngroup.updateInterval=5


##########################
# REST API configuration ############################################################
##########################

#
# Boolean, defaults to true
# If true, REST API urls v1 won't require
# to be authenticated to be accessed. 
# The reason to have default=true for that is 
# that in that use case, the authorization and 
# authentication part for the REST API
# will be done by a third party software, like Apache
#
# If false, these API will need to be authenticated
# with a valid token managed in the 
# "Administration => API Accounts" screen of Rudder 
# web application.
# 
# API affected by that property:
# - /api/status
# - /api/techniqueLibrary/reload
# - /api/dyngroup/reload
# - /api/deploy/reload
# - /api/archives/*
#
#  DEPRECATED: use of authentication token will become
#              mandatory for all API URLs. 
#
rudder.rest.allowNonAuthenticatedUser=true

####################
# Inventory history ##################################################################
####################

#
# Inventory historization root directory
#
# The directory used as root directory to store LDIF dump
# of historized inventories. 
# It must be synchronise with the property of the same name in 
# the "inventory endpoint" web application (inventory-web.properties), 
# which is the application actually writing the files. 
#
# This historized inventories are used in the node acceptation
# screen, to keep information about the state of the node
# when it was accepted
#
history.inventories.rootdir=/var/rudder/inventories/historical

###############################
# Non compliant reports logger #################################################
###############################

# Rudder can log a line for each 5 minute period when configuration policy is 
# not correctly applied (in error or repaired).
# 
# Default path is /var/log/rudder/compliance/non-compliant-reports.log, and can
# be changed in /opt/rudder/etc/logback.xml.
#
# See online documentation for more details.
#
# This log is generated by a job that runs at a regular interval, by default
# every minute. You can specify this interval (in minutes) below.
# A negative or 0 value disables the job, and won't log any non-compliant reports.
#

rudder.batch.reports.logInterval=1

#########################
# Store Agent Run Times #############################################################
#########################

# Maximum Days of reports handled (default : 5)
#
# To avoid handling too much reports at one time, the "Store Agent Run Times" process
# will only take reports after X days from the last one processed.
# This is mainly used on the first Run, when the process has to catch on old reports,
# and build execution history.
# This value is expressed in days.

rudder.batch.storeAgentRunTimes.maxDays=5

# Delay before to launch of the reports executions actor (default : 5)
# 
# This value determine the frequency of the reports executions actor.
# This needs to be run very often so you should keep it as low as possible.
# Having a low delay will means that agent executions are almost synchronized with now.
# This value is expressed in seconds


rudder.batch.storeAgentRunTimes.updateInterval=5

#########################
# LDAP Authentication    #############################################################
#########################

#
# Be default, both authentication and authorization are handle in the rudder-users.xml
# file. But you may want to rely on your existing entreprise Active Directory or LDAP
# to take care of the authentication part. The following parameters allow to configure
# such an LDAP authentication scheme. 
# The chosen LDAP procedure is a typical bind/search/rebind, in which an application
# connection (bind) is used to search (search) for an user entry given some base and 
# filter parameters, and then, a bind (rebind) is tried on that entry with the 
# credential provided by the user. 
# That allows to seperate the user DN (especially RDN) from the search criteria. 
#
# Be careful, the authorization is still done in the rudder-user.xml, what means
# that each user should have access to Rudder MUST have a line in that file. 
# Without that line, the user can have a successful LDAP authentication, but
# won't be able to do or see anything in Rudder (safe logout). 
# 

#
# Use the LDAP authentication
# When set to true, passwords in rudder-users.xml are ignored and the 
# authentication is delegated to the LDAP server configured below. 
# By convention, when LDAP authentication is enable, "password" field in
# rudder-users.xml are set to "LDAP" 
#
# Boolean, default to false
#
rudder.auth.ldap.enable=false

#
# Connection URL to the LDAP server, in the form:
# ldap://hostname:port/base_dn
#
rudder.auth.ldap.connection.url=ldap://ldap.mycorp.com:389/dc=mycorp,dc=com

#
# Bind DN used by Rudder to do the search
# LDAP dn, no default value.
#
rudder.auth.ldap.connection.bind.dn=cn=admin,dc=mycorp,dc=com

#
# Bind password used by Rudder to do the search.
# String, no default value. 
#
rudder.auth.ldap.connection.bind.password=secret

#
# Search base and filter to use to find the user. 
# The search base can be left empty. 
# In the filter, {0} denotes the value provided as
# login by the user. 
#
rudder.auth.ldap.searchbase=ou=People
rudder.auth.ldap.filter=(&(uid={0})(objectclass=person))

#
# An AD example would be:
# 
#rudder.auth.ldap.searchbase=
#rudder.auth.ldap.filter=(&(sAMAccountName={0})(objectclass=user))


#
# Rudder roles definition
#
# Allow to define which hosts have the roles ldap, db and relay-top when
# using a split architecture of Rudder
# The file containing the roles will be generated in:
# /var/rudder/configuration-repository/inputs/rudder-server-roles.conf
#
# The allowed values, for each parameter are
# - autodetect (default): the roles are automatically detected based on inventories (based on the presence of files in /opt/rudder/etc/server-roles.d/)
# - anything else (hostname, ip, or list of hostname or ip, seperated by commas): the
#   content that will be used inside the role file

# The hosts with the LDAP server role
rudder.server-roles.ldap=autodetect

# The hosts with the inventory endpoint role
rudder.server-roles.inventory-endpoint=autodetect

# The hosts with the db role
rudder.server-roles.db=autodetect

# The hosts with the relay-top role
rudder.server-roles.relay-top=autodetect

# The hosts with the webapp role
rudder.server-roles.web=autodetect

#########################
# DEPRECATED properties #############################################################
#########################

#
# A list of properties actually used in Rudder, but for features disable in the UI. 
#

#
#  Upload directory
#  The directory where new uploaded files are stored
#  DEPRECATED: not used any more in Rudder UI. 
#
upload.root.directory=/var/rudder/files/

#
# The directory used to put uploaded files shared between
# several nodes. 
# A symlink from the file to the relevant node promise directory
# will be created on each node needing the file in place
# of copying it.
# DEPRECATED: not used anymore in Rudder UI
rudder.dir.uploaded.file.sharing=/var/rudder/files/

#
#  Emergency stop
#  path to the script/binary that allows emergency orchestrator stop
#  DEPRECATED: feature no more available in Rudder UI. 
#
bin.emergency.stop=/opt/rudder/bin/cfe-red-button.sh


