<!--
Copyright 2011 Normation SAS

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

In accordance with the terms of section 7 (7. Additional Terms.) of
the GNU Affero GPL v3, the copyright holders add the following
Additional permissions:
Notwithstanding to the terms of section 5 (5. Conveying Modified Source
Versions) and 6 (6. Conveying Non-Source Forms.) of the GNU Affero GPL v3
licence, when you create a Related Module, this Related Module is
not considered as a part of the work and may be distributed under the
license agreement of your choice.
A "Related Module" means a set of sources files including their
documentation that, without modification of the Source Code, enables
supplementary functions or services in addition to those offered by
the Software.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program. If not, see <http://www.gnu.org/licenses/agpl.html>.
-->

<configuration>
  <!-- 
    This is the default logging configuration file. It will be used if you
    didn't specify the "logback.configurationFile" JVM option. 
    For example, to use a loggin configuration file in "/etc/rudder":
    java ... -Dlogback.configurationFile=/etc/rudder/logback.xml
    
    Full information about the file format is available on the project
    web site: http://logback.qos.ch/manual/configuration.html#syntax
   -->

  <!-- 
    Appender configuration - where&how to write logs in SLF4J speaking.
    ===================================================================
    Our default configuration : log on stdout appender so that our logs
    are managed by the container log system (and so, if Tomcat/Jetty/etc
    logs are stored in files and rotated, so are our log information).
    
    Log format is:
    - date/time/thread of the log on 30 chars (fixed)
    - log level on 5 char (fixed)
    - name of the logger (and so the class) on 36 chars, with
      package name folding
    - log message follows
    - limit exception trace to 30 calls
    
    You should not have to modify that. 
  -->
  <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
    <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
      <Pattern>%d{[yyyy-MM-dd HH:mm:ss]} %-5level %logger - %msg%n%xEx{0}</Pattern>
    </encoder>
  </appender>
  
  <!-- 
    Those properties defines the directory into which log using OPSLOG and
    REPORTLOG appender will be writen.
    It can be overwritten when the application is launched with the
    Java system property syntax: java -DOPSLOG_DIR="/some/other/directory/"
  -->
  <property name="OPSLOG_DIR" value="/var/log/rudder/core" />

  <property name="REPORT_DIR" value="/var/log/rudder/compliance" />

  <!-- 
    A file log appender for exploitation logs about reports, outputing in a file
    The message format will be looking like syslog message:
    Jun 27 13:02:53 orchestrateur-3 rudder[report]: [warn] here come the message
    
    'report' is expected to be the ops logger name.
   -->
  <appender name="OPSLOG" class="ch.qos.logback.core.FileAppender">
    <file>${OPSLOG_DIR}/rudder-webapp.log</file>
    <append>true</append>
    <encoder>
      <pattern>%d{MMM dd HH:mm:ss} ${HOSTNAME} rudder[%logger]: [%level] %msg%n</pattern>
    </encoder>
  </appender>

  <!--
    A file log appender for exploitation logs about failure reports.
  -->
    <appender name="REPORTLOG" class="ch.qos.logback.core.FileAppender">
    <file>${REPORT_DIR}/non-compliant-reports.log</file>
    <append>true</append>
        <encoder>
      <pattern>%msg%n</pattern>
    </encoder>
  </appender>

  <!-- 
    Manage the global log level of the application.
    ===============================================
    
    That level will be used for all logs that are not
    more precisely defined below (i.e for whom there is
    no <logger name="...." level="..."/> defined)  
    
    Available log levels are: 
         trace < debug < info < warn < error < off 
    "off" completely shut down logging for the given logger
    
    Do not modify the appender part if you don't know what you
    are doing.
  -->
  
  <root level="debug">
    <appender-ref ref="STDOUT" />
  </root>
  
  <!--
    Debug LDAP write operations
    ===========================
    This logger allow to trace LDAP writes operation related 
    receiving inventories and to output them in LDIF file 
    (the output directory path
    is configured in the main configuration file)
    The trace is done only if level is set to "trace"
    WARNING: setting the level to trace may have major
    performance issue, as A LOT of LDIF files will have
    to be written.
    You should activate that log only for debugging purpose.
  -->
  <logger name="trace.ldif.in.file" level="off" />

  
  <!-- ==================================================== -->
  <!-- YOU SHOULD NOT HAVE TO CHANGE THINGS BELOW THAT LINE -->
  <!-- ==================================================== -->
  
  <!-- 
    Display AJAX information of the Web interface
    =============================================
    Whatever the root logger level is, you are likely
    to not wanting these information. 
    Set the level to debug if you are really interested
    in AJAX-related debug messages.
  -->
  <logger name="comet_trace" level="info" />
  
  <!-- 
    Spring Framework log level
    ==========================
    We really don't want to see SpringFramework debug info, 
    whatever the root logger level is - it's an internal
    component only.
  -->
  <logger name="org.springframework" level="warn" />
 
  <!-- 
    We don't need to have a timing information for each 
    HTTP request.
    If you want to have these information, set the log
    level for that logger to (at least) "info"
   -->
  <logger name="net.liftweb.util.TimeHelpers" level="warn" />
  
  <!-- Uncomment to have precise log about LDAP queries done by the node search engine -->
<!--   <logger name="com.normation.rudder.services.queries.InternalLDAPQueryProcessor" level="debug" /> -->
 
  <!-- Here come ops logger -->
   
   <logger name="report" level="info" additivity="false">
     <appender-ref ref="OPSLOG" />
     <!-- comment the following appender if you don't want to have logs about report in both stdout and opslog -->
     <appender-ref ref="STDOUT" />
   </logger>

   <logger name="application" level="info" additivity="false">
     <appender-ref ref="OPSLOG" />
     <!-- comment the following appender if you don't want to have logs about report in both stdout and opslog -->
     <appender-ref ref="STDOUT" />
   </logger>

   <logger name="migration" level="info" additivity="false">
     <appender-ref ref="OPSLOG" />
     <!-- comment the following appender if you don't want to have logs about report in both stdout and opslog -->
     <appender-ref ref="STDOUT" />
   </logger>

   <logger name="historization" level="info" additivity="false">
     <appender-ref ref="OPSLOG" />
     <!-- comment the following appender if you don't want to have logs about report in both stdout and opslog -->
     <appender-ref ref="STDOUT" />
   </logger>

   <!-- Here come non compliant reports logger -->

   <logger name="non-compliant-reports" level="info" additivity="false">
     <appender-ref ref="REPORTLOG" />
   </logger>

</configuration>
