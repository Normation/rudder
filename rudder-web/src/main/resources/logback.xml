<!--
Copyright 2011 Normation SAS

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

In accordance with the terms of section 7 (7. Additional Terms.) of
the GNU Affero GPL v3, the copyright holders add the following
Additional permissions:
Notwithstanding to the terms of section 5 (5. Conveying Modified Source
Versions) and 6 (6. Conveying Non-Source Forms.) of the GNU Affero GPL v3
licence, when you create a Related Module, this Related Module is
not considered as a part of the work and may be distributed under the
license agreement of your choice.
A "Related Module" means a set of sources files including their
documentation that, without modification of the Source Code, enables
supplementary functions or services in addition to those offered by
the Software.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program. If not, see <http://www.gnu.org/licenses/agpl.html>.
-->

<configuration>
  <!-- 
    This is the default logging configuration file. It will be used if you
    didn't specify the "logback.configurationFile" JVM option. 
    For example, to use a loggin configuration file in "/etc/rudder":
    java ... -Dlogback.configurationFile=/etc/rudder/logback.xml
    
    Full information about the file format is available on the project
    web site: http://logback.qos.ch/manual/configuration.html#syntax
   -->
   
   
   <!-- 
    NOTE FOR USER: most of the interesting information are at the 
    bottom of the file, but that crappy xml file does not allow to
    make important information first :(
   -->
   
   

  <!-- 
    Appender configuration - where&how to write logs in SLF4J speaking.
    ===================================================================
    Our default configuration : log on stdout appender so that our logs
    are managed by the container log system (and so, if Tomcat/Jetty/etc
    logs are stored in files and rotated, so are our log information).
    
    Log format is:
    - date/time/thread of the log on 30 chars (fixed)
    - log level on 5 char (fixed)
    - name of the logger (and so the class) on 36 chars, with
      package name folding
    - log message follows
    - limit exception trace to 30 calls
    
    You should not have to modify that. 
  -->
  <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
    <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
      <Pattern>%d{[yyyy-MM-dd HH:mm:ss]} %-5level %logger - %msg%n%xEx{0}</Pattern>
    </encoder>
  </appender>
  
  <!-- 
    Those properties defines the directory into which log using OPSLOG and
    REPORTLOG appender will be writen.
    It can be overwritten when the application is launched with the
    Java system property syntax: java -DOPSLOG_DIR="/some/other/directory/"
  -->
  <property name="OPSLOG_DIR" value="/var/log/rudder/core" />

  <property name="REPORT_DIR" value="/var/log/rudder/compliance" />

  <!-- 
    A file log appender for exploitation logs about reports, outputing in a file
    The message format will be looking like syslog message:
    Jun 27 13:02:53 orchestrateur-3 rudder[report]: [warn] here come the message
    
    'report' is expected to be the ops logger name.
   -->
  <appender name="OPSLOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>${OPSLOG_DIR}/rudder-webapp.log</file>
    <append>true</append>

    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <fileNamePattern>${OPSLOG_DIR}/rudder-webapp-%d{yyyy-MM-dd}.log.gz</fileNamePattern>
      <maxHistory>30</maxHistory>
    </rollingPolicy>
    
    <encoder>
      <pattern>%d{MMM dd HH:mm:ss} ${HOSTNAME} rudder[%logger]: [%level] %msg%n</pattern>
    </encoder>
  </appender>

  <!--
    A file log appender for exploitation logs about failure reports.
  -->
  <appender name="REPORTLOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>${REPORT_DIR}/non-compliant-reports.log</file>
    <append>true</append>

    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <fileNamePattern>${REPORT_DIR}/non-compliant-reports-%d{yyyy-MM-dd}.log.gz</fileNamePattern>
      <maxHistory>365</maxHistory>
    </rollingPolicy>

    <encoder>
      <pattern>%msg%n</pattern>
    </encoder>
  </appender>
  

  <!-- 
    Manage the global log level of the application.
    ===============================================
    
    That level will be used for all logs that are not
    more precisely defined below (i.e for whom there is
    no <logger name="...." level="..."/> defined)  
    
    Available log levels are: 
         trace < debug < info < warn < error < off 
    "off" completely shut down logging for the given logger
    
    Do not modify the appender part if you don't know what you
    are doing.
  -->
  
  <root level="info">
    <appender-ref ref="STDOUT" />
  </root>
  
  <!--
    Debug LDAP write operations
    ===========================
    This logger allow to trace LDAP writes operation related 
    receiving inventories and to output them in LDIF file 
    (the output directory path
    is configured in the main configuration file)
    The trace is done only if level is set to "trace"
    WARNING: setting the level to trace may have major
    performance issue, as A LOT of LDIF files will have
    to be written.
    You should activate that log only for debugging purpose.
  -->
  <logger name="trace.ldif.in.file" level="off" />


  <!-- 
    Dump Node Configurations
    ========================
    See information in the "rudder.debug.nodeconfiguration.path"
    application property.
    
    To enable that debug, set level to "debug". 
    To disable that debug, set level to "off".
   -->
  <logger name="rudder.debug.nodeconfiguration" level="off" />

  
  <!-- ==================================================== -->
  <!-- YOU SHOULD NOT HAVE TO CHANGE THINGS BELOW THAT LINE -->
  <!-- ==================================================== -->
  
  <!-- 
    Display AJAX information of the Web interface
    =============================================
    Whatever the root logger level is, you are likely
    to not wanting this information. 
    Set the level to debug if you are really interested
    in AJAX-related debug messages.
  -->
  <logger name="comet_trace" level="info" />
  
  <!-- 
    Spring Framework log level
    ==========================
    We really don't want to see SpringFramework debug info, 
    whatever the root logger level is - it's an internal
    component only.
  -->
  <logger name="org.springframework" level="warn" />
 
  <!-- 
    We don't need to have timing information for each 
    HTTP request.
    If you want to have this information, set the log
    level for that logger to (at least) "info"
    Nor information about CometActor or session lifecycle
   -->
  <logger name="net.liftweb.util.TimeHelpers" level="warn" />
  <logger name="net.liftweb.http.CometActor" level="warn" />
  <logger name="net.liftweb.http.SessionMaster" level="warn" />
  
  <!-- Uncomment to have precise log about LDAP queries done by the node search engine -->
<!--   <logger name="com.normation.rudder.services.queries.InternalLDAPQueryProcessor" level="debug" /> -->
 
  <!-- 
    Operation level logger
    =======================
    They allow to have information about some domain of the application. 
    By default, the level is to info but you can use "debug" or "trace"
    to get more detailed information. 
    
    For all of them, you will get the logs in both the webapp logs and file 
    config in OPSLOG (by default, /var/log/rudder/core/rudder-webapp.log
    
    You can comment out the line "<appender-ref ref="STDOUT" />" in each
    of them to have logs only in OPSLOG (respectivelly, 
    <appender-ref ref="OPSLOG" />)
  -->
   
  <!--
    This logger is in charge of general application logging (webapp status, etc) 
  -->
  <logger name="application" level="info" additivity="false">
    <appender-ref ref="OPSLOG" />
    <!-- comment the following appender if you don't want to have logs about report in both stdout and opslog -->
    <appender-ref ref="STDOUT" />
  </logger>

  <!-- 
    Log information about migration processus, for example in case of internal data format updates
  -->
  <logger name="migration" level="info" additivity="false">
    <appender-ref ref="OPSLOG" />
    <appender-ref ref="STDOUT" />
  </logger>

  <!-- 
    Log historization activity (name historization for configuration elements). 
  -->
  <logger name="historization" level="info" additivity="false">
    <appender-ref ref="OPSLOG" />
    <appender-ref ref="STDOUT" />
  </logger>

  <!-- 
      This logger allows to log information about reports, especially DB cleaning operation
  -->
  <logger name="report" level="info" additivity="false">
    <appender-ref ref="OPSLOG" />
    <appender-ref ref="STDOUT" />
  </logger>


  <!-- 
    Logs about change requests and validation workflows
  -->
  <logger name="changeRequest" level="info" additivity="false">
    <appender-ref ref="OPSLOG" />
    <appender-ref ref="STDOUT" />
  </logger>
   
  <!-- 
    Startup information, like timing each operation of the boot to understand 
    what is sooooo long - and should not. 
  -->
  <logger name="bootstrap" level="info" additivity="false">
    <appender-ref ref="OPSLOG" />
    <appender-ref ref="STDOUT" />
  </logger>
   
  <!-- 
    Debugging information about time spent on various operation known to be long. 
    This logs can be chatty and can be hard to understand without knowledge 
    of Rudder internals. 
  -->
  <logger name="debug_timing" level="info" additivity="false">
    <appender-ref ref="OPSLOG" />
    <appender-ref ref="STDOUT" />
  </logger>
  
  <!-- 
    Information (mostly debugging) about compliance. 
    Log level "debug" and "trace" are used and allow to trace how
    compliance computation are done (typically, for a node, what is the
    expected configuration id, what is the last reports received, is the
    date/time ok regarding run interval and compliance mode, etc. 
  -->
  <logger name="explain_compliance" level="info" additivity="false">
    <appender-ref ref="OPSLOG" />
    <appender-ref ref="STDOUT" />
  </logger> 
   
   
   
  <!-- 
   Non compliant report logs
   ==========================
   
    Log all non compliant reports in the REPORTLOG defined above
    (by default, /var/log/rudder/compliance/non-compliant-reports.log
  -->
  <logger name="non-compliant-reports" level="info" additivity="false">
    <appender-ref ref="REPORTLOG" />
  </logger>
   
</configuration>
