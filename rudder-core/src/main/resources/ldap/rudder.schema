#*************************************************************************
# Copyright 2011 Normation SAS
#*************************************************************************
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#*************************************************************************


# CMDB schema
#
# Depends upon core.schema, cosine.schema, nis.schema and cmdb.schema


# CMDB OID


#######################################################
####################### WARNING #######################
#######################################################
# This OID is necessary for OpenLDAP -> OpenDS schema tool, 
# but makes OpenLDAP crashes with a non-meaningfull error message
# if cmdb.schema (where it is already declared) is included

#objectIdentifier NormationOID 1.3.6.1.4.1.35061

#######################################################
####################### /WARNING ######################
#######################################################


objectIdentifier RudderOID NormationOID:2
objectIdentifier RudderAttributes RudderOID:1
objectIdentifier RudderObjectClasses RudderOID:2



#######################################################
################## Attributes #########################
#######################################################


### UUIDs ###

attributetype ( RudderAttributes:101
  NAME 'targetPolicyServerId'
  DESC 'The identifier of a Node policy server'
  SUP uuid )

attributetype ( RudderAttributes:102
  NAME 'directiveId'
  DESC 'Unique identifier for a directive'
  SUP uuid )
  
attributetype ( RudderAttributes:103
  NAME 'targetDirectiveId'
  DESC 'Unique identifier for a directive'
  SUP uuid )

attributetype ( RudderAttributes:104
  NAME 'groupCategoryId'
  DESC 'Unique identifier for a group category'
  SUP uuid )
    
attributetype ( RudderAttributes:105
  NAME 'techniqueCategoryId'
  DESC 'Unique identifier for a rudder category'
  SUP uuid )
  
attributetype ( RudderAttributes:106
  NAME 'techniqueId'
  DESC 'Unique identifier for a technique from Reference technique library'
  SUP uuid )

attributetype ( RudderAttributes:107
  NAME 'activeTechniqueId'
  DESC 'Unique identifier for a technique in Active technique library'
  SUP uuid )

attributetype ( RudderAttributes:108
  NAME 'nodeGroupId'
  DESC 'Unique identifier for a node group'
  SUP uuid )

attributetype ( RudderAttributes:109
  NAME 'ruleId'
  DESC 'Unique identifier for a rule'
  SUP uuid )
  
#######################################################################
  
attributetype ( RudderAttributes:201
  NAME 'techniqueLibraryVersion'
  DESC 'The version'
  EQUALITY caseIgnoreMatch
  SUBSTR caseIgnoreSubstringsMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15{256} )

attributetype ( RudderAttributes:202
  NAME 'techniqueVersion'
  DESC 'The version'
  EQUALITY caseIgnoreMatch
  SUBSTR caseIgnoreSubstringsMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15{256} )

attributetype ( RudderAttributes:203
  NAME 'initTimestamp'
  DESC 'Date and time of initialization of the object'
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.24
  EQUALITY generalizedTimeMatch
  ORDERING generalizedTimeOrderingMatch )
  
attributetype ( RudderAttributes:204
  NAME 'jsonNodeGroupQuery'
  DESC 'JSON structure that represent a query for a group of nodes'
  EQUALITY caseIgnoreMatch
  SUBSTR caseIgnoreSubstringsMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15{256} )

attributetype ( RudderAttributes:205
  NAME 'ruleTarget'
  DESC 'Target of the directive. It is something of the form targetType:targetUuid'
  EQUALITY caseIgnoreMatch
  SUBSTR caseIgnoreSubstringsMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15{256} )

attributetype ( RudderAttributes:206
  NAME 'creationDate'
  DESC 'Creation date of the item'
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.24
  EQUALITY generalizedTimeMatch
  ORDERING generalizedTimeOrderingMatch )

attributetype ( RudderAttributes:207
  NAME 'lastUpdateTimestamp'
  DESC 'Last date when the item was updated'
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.24
  EQUALITY generalizedTimeMatch
  ORDERING generalizedTimeOrderingMatch )

#
# A policy variable and its values.
# The expected format is:
# variableName[index]:variableValue
#
attributetype ( RudderAttributes:208
  NAME 'directiveVariable'
  DESC 'Pair of variable:value'
  EQUALITY caseIgnoreMatch
  SUBSTR caseIgnoreSubstringsMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15{256} )

attributetype ( RudderAttributes:209
  NAME 'writtenTimestamp'
  DESC 'Last date when the item was written'
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.24
  EQUALITY generalizedTimeMatch
  ORDERING generalizedTimeOrderingMatch )


attributetype ( RudderAttributes:210
  NAME 'acceptationTimestamp'
  DESC 'Creation date of a user policy'
  EQUALITY caseIgnoreMatch
  SUBSTR caseIgnoreSubstringsMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 )

attributetype ( RudderAttributes:211
  NAME 'isModified'
  DESC 'Define if the server is modified and should be processed as such or if it is up to date. Default to false if not specified'
  EQUALITY booleanMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.7  )
  
attributetype ( RudderAttributes:212
  NAME 'isEnabled'
  DESC 'Define if the object is currently activated or not (and so should be ignore)'
  EQUALITY booleanMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.7  )
  
attributetype ( RudderAttributes:213
  NAME 'isDynamic'
  DESC 'Define if the group is dynamic'
  EQUALITY booleanMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.7  )

attributetype ( RudderAttributes:214
  NAME 'isSystem'
  DESC 'Define if the CR/Group/PI/UPT/Node is created by the system'
  EQUALITY booleanMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.7  )

attributetype ( RudderAttributes:215
  NAME 'isBroken'
  DESC 'Define if the node is broken'
  EQUALITY booleanMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.7  )

attributetype ( RudderAttributes:216
  NAME 'isPolicyServer'
  DESC 'Define if this node configuration refers to a policy server'
  EQUALITY booleanMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.7  )

attributetype ( RudderAttributes:217
  NAME 'directivePriority'
  DESC 'The priority of the object compare to other. Higher has more priority'
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.27
  EQUALITY integerMatch
  ORDERING integerOrderingMatch )
  
attributetype ( RudderAttributes:218
  NAME 'longDescription'
  DESC 'A long field for text (HTLM expected)'
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
  EQUALITY caseIgnoreMatch
  SUBSTR caseIgnoreSubstringsMatch )

attributetype ( RudderAttributes:219
  NAME 'serial'
  DESC 'The serial of the Rule'
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.27
  EQUALITY integerMatch
  ORDERING integerOrderingMatch )

attributetype ( RudderAttributes:220
  NAME 'systemVariable'
  DESC 'The current system variables of a node'
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
  EQUALITY caseIgnoreMatch
  SUBSTR caseIgnoreSubstringsMatch ) 

attributetype ( RudderAttributes:221
  NAME 'targetSystemVariable'
  DESC 'The target system variables of a node'
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
  EQUALITY caseIgnoreMatch
  SUBSTR caseIgnoreSubstringsMatch )

attributetype ( RudderAttributes:222
  NAME 'targetName'
  DESC 'Host name of the server'
  EQUALITY caseIgnoreMatch
  SUBSTR caseIgnoreSubstringsMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15{256} )

attributetype ( RudderAttributes:223
  NAME 'targetNodeHostname'
  DESC 'Host name of the server'
  EQUALITY caseIgnoreMatch
  SUBSTR caseIgnoreSubstringsMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15{256} )

attributetype ( RudderAttributes:224
  NAME 'targetAgentName'
  DESC 'List of name of the agent (Nova, Community, ...)'
  EQUALITY caseIgnoreMatch
  SUBSTR caseIgnoreSubstringsMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15{256} )

attributetype ( RudderAttributes:225
  NAME 'targetLocalAdministratorAccountName'
  DESC 'The local administrator account name (login) on the node'
  EQUALITY caseIgnoreMatch
  SUBSTR caseIgnoreSubstringsMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15{256} ) 

attributetype ( RudderAttributes:226
  NAME 'parameter'
  DESC 'The current parameters applied to a node'
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
  EQUALITY caseExactMatch
  SUBSTR caseIgnoreSubstringsMatch ) 

attributetype ( RudderAttributes:227
  NAME 'targetParameter'
  DESC 'The target parameters applied to a node'
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15
  EQUALITY caseExactMatch
  SUBSTR caseIgnoreSubstringsMatch )

attributetype ( RudderAttributes:301
  NAME 'parameterName'
  DESC 'Name of parameter that matches [a-zA-Z0-9_]+'
  EQUALITY caseExactMatch
  SUBSTR caseIgnoreSubstringsMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 )

attributetype ( RudderAttributes:302
  NAME 'parameterValue'
  DESC 'Name of parameter that matches [a-zA-Z0-9_]+'
  EQUALITY caseExactMatch
  SUBSTR caseIgnoreSubstringsMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 )

attributetype ( RudderAttributes:303
  NAME 'overridable'
  DESC 'Define if the parameter may be overriden'
  EQUALITY booleanMatch
  SYNTAX 1.3.6.1.4.1.1466.115.121.1.7  )

#######################################################
################  Object Classes ######################
#######################################################


#
# Rudder mains objects:
# * nodes and policy server
# * node group categories 
# * node groups 
# * library of active technique categories
# * activeTechnique
# * directive
# * rules
# 


### nodes (simple and policy server) for Rudder ###

objectclass ( RudderObjectClasses:1
  NAME 'rudderNode' 
  DESC 'The Node itself'
  SUP top
  STRUCTURAL
  MUST ( nodeId $ cn $ isSystem $ isBroken)
  MAY ( description ) )
  
objectclass ( RudderObjectClasses:2
  NAME 'rudderPolicyServer' 
  DESC 'The Node representation of a policy server'
  SUP rudderNode
  STRUCTURAL )

### groups ###

objectclass ( RudderObjectClasses:10
  NAME 'groupCategory'
  DESC 'The group category'
  SUP top
  STRUCTURAL
  MUST ( groupCategoryId $ cn )
  MAY ( description $ isSystem ) )

objectclass ( RudderObjectClasses:11
  NAME 'nodeGroup'
  DESC 'A node group representation'
  SUP top
  STRUCTURAL
  MUST ( nodeGroupId $
   cn $ isDynamic )
  MAY ( nodeId $ description $ jsonNodeGroupQuery $ 
        isEnabled $ isSystem  ) )

objectclass ( RudderObjectClasses:12
  NAME 'specialRuleTarget'
  DESC 'A special target (other than a nodeGroup), for example: all servers'
  SUP top
  STRUCTURAL
  MUST ( ruleTarget $ cn )
  MAY (  description $ isEnabled $ isSystem ) )  

### active technique library ###

objectclass ( RudderObjectClasses:20
  NAME 'activeTechniqueLibraryVersion'
  DESC 'An object class to contain information about the user library (version, initialisation timestamp)'
  SUP top
  AUXILIARY
  MAY ( initTimestamp $ techniqueLibraryVersion ) )

objectclass ( RudderObjectClasses:21
  NAME 'techniqueCategory'
  DESC 'The Rudder category'
  SUP top
  STRUCTURAL
  MUST ( techniqueCategoryId $ cn )
  MAY ( description $ isSystem ) )
  
objectclass ( RudderObjectClasses:22
  NAME 'activeTechnique'
  DESC 'The Rudder category'
  SUP top
  STRUCTURAL
  MUST ( activeTechniqueId $ techniqueId $ acceptationTimestamp)
  MAY ( isEnabled $ isSystem ) )

objectclass ( RudderObjectClasses:23
  NAME 'directive'
  DESC 'Rudder Directive (real)'
  SUP top
  STRUCTURAL
  MUST ( directiveId $ techniqueVersion )
  MAY ( cn $ description $ longDescription $ isEnabled $ isSystem $
        directivePriority $ directiveVariable  ) )

### rules ###
  
objectclass ( RudderObjectClasses:30
  NAME 'rule'
  DESC 'A rule'
  SUP top
  STRUCTURAL
  MUST ( ruleId  $ serial )
  MAY ( cn $ description $ longDescription $ 
        isEnabled $ isSystem $ 
        ruleTarget $ 
        directiveId ) )


#
# Node configurations
# (current and expected state of
#  a node configuration)
#

objectclass ( RudderObjectClasses:101
  NAME 'nodeConfiguration' 
  DESC 'The mapping of the node configuration, a container for promises'
  SUP top
  STRUCTURAL
  MUST ( nodeId $ isPolicyServer )
  MAY ( cn $ description $ isModified $ 
        lastUpdateTimestamp $ writtenTimestamp $
        targetName $ 
        localAdministratorAccountName $ targetLocalAdministratorAccountName $
        nodeHostname $ targetNodeHostname $ 
        policyServerId $ targetPolicyServerId $ 
        agentName $ targetAgentName $
        systemVariable $ targetSystemVariable $
        parameter $ targetParameter  ) )

objectclass ( RudderObjectClasses:102
  NAME 'rootPolicyServerNodeConfiguration' 
  SUP  nodeConfiguration
  DESC 'The ROOT policy server of an Rudder Domain' )


#cn is the policy name for the directive
objectClass ( RudderObjectClasses:103
  NAME 'abstractDirectiveNodeConfiguration'
  DESC 'An abstract instance of a Directive'
  SUP top
  ABSTRACT
  MUST ( techniqueId )
  MAY ( lastUpdateTimestamp $ 
        description $ ruleTarget $ directiveVariable $
        isEnabled $ isSystem $ serial $ directivePriority $
        techniqueId $ techniqueVersion $
        ruleId ) )

objectclass ( RudderObjectClasses:104
  NAME 'directiveNodeConfiguration'
  DESC 'An instance of a policy'
  SUP abstractDirectiveNodeConfiguration
  STRUCTURAL
  MUST ( directiveId ) )

objectclass ( RudderObjectClasses:105
  NAME 'targetDirectiveNodeConfiguration'
  DESC 'An instance of a target state for a directive'
  SUP abstractDirectiveNodeConfiguration
  STRUCTURAL
  MUST ( targetdirectiveId ) )

objectclass ( RudderObjectClasses:120
  NAME 'parameter'
  DESC 'A parameter of the format key - value'
  SUP top
  STRUCTURAL
  MUST ( parameterName )
  MAY ( parameterValue $ description $ overridable ) )
