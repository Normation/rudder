#!/bin/sh

# Hooks parameter are passed by environment variable: 
#
# - RUDDER_NODE_ID: the nodeId
# - RUDDER_NODE_HOSTNAME: the node fully qualified hostname
# - RUDDER_NODE_POLICY_SERVER_ID: the node policy server id
# - RUDDER_AGENT_TYPE : agent type ("cfengine-nova" or "cfengine-community")
# - RUDDER_POLICIES_DIRECTORY_CURRENT: the full path of the base directory containing policies for that node
# - RUDDER_POLICIES_DIRECTORY_NEW: the full path of the base directory containing next policies for that node (during a generation)
# - RUDDER_POLICIES_DIRECTORY_ARCHIVE: the full path of the base directory containing previous policies for that node
# - RUDDER_NODE_ROLES: a comma separated list of node's server role name

 
# Errors code on hooks are interpreted as follow:
# - 0     : success, no log (appart if debug one)          , continue to next hook
# - 1-31  : error  , error   log in /var/log/rudder/webapp/, stop processing
# - 32-63 : warning, warning log in /var/log/rudder/webapp/, continue to next hook
# - 64-255: reserved for futur use case. Behavior may change without notice. 

# delete all generated policies for that node
NODE_DIR=$(dirname ${RUDDER_POLICIES_DIRECTORY_CURRENT})

if [ -d ${NODE_DIR} ]; then
  # just check that parent dir has node id for name, else perhaps it's not what we think
  if [ "$(basename ${NODE_DIR})" = "${RUDDER_NODE_ID}" ]; then
    # delete directory
    rm -rf "${NODE_DIR}"
  else 
    echo "Error when cleaning generated policies for deleted node ${RUDDER_NODE_ID}: directory '${NODE_DIR}' should have node id for name. Aborting"
    exit 32
  fi
fi
exit 0
