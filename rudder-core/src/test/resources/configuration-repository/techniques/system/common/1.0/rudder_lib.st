#####################################################################################
# Copyright 2011-2012 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################
#
# This is Rudder's library of common CFEngine functions.
#
# Only bodies and editbundles are to be appended here !!!
#
#####################################################################################

###################################################
# Knowledge from the original stdlib
###################################################
# Uses a specific prefix to avoid collision
# when the stdlib will be updated
###################################################

bundle common rudder_debian_knowledge
# @depends paths
# @brief common Rudder Debian knowledge bundle
#
# This common bundle has useful information about Debian.
{
  vars:

      "dpkg_compare_equal" string => "/usr/bin/dpkg --compare-versions '${v1}' eq '${v2}'";
      "dpkg_compare_less"  string => "/usr/bin/dpkg --compare-versions '${v1}' lt '${v2}'";

}


bundle common rudder_rpm_knowledge
# @depends paths
# @brief common Rudder RPM knowledge bundle
#
# This common bundle has useful information about platforms using RPM
{
  vars:

      "rpm_compare_equal" string => "${sys.workdir}/bin/rpmvercmp '${v1}' eq '${v2}'";
      "rpm_compare_less"  string => "${sys.workdir}/bin/rpmvercmp '${v1}' lt '${v2}'";

}

###################################################

body depth_search recurse_visible(d)
{
        depth        => "${d}";
        exclude_dirs => { "\..*" };
}

#perms validation
body perms u_p(p)
{
        mode  => "${p}";
}

#########################################################
#server may be a list
body copy_from cp(from,server)
{
        servers     => { "${server}" };
        source      => "${from}";
        compare     => "digest";
    community_edition::
        portnumber => "&COMMUNITYPORT&";

}

body copy_from scp(from, server,compare,trustkey,preserve,purge)
{
        servers  => { "${server}" };
        source   => "${from}";
        compare  => "${compare}";
        encrypt  => "true";
        verify   => "true";
        trustkey => "${trustkey}";
        preserve => "${preserve}"; #preserver permissions
        purge    => "${purge}";
        copy_backup => "timestamp";
    community_edition::
        portnumber => "&COMMUNITYPORT&";
}

#Â This is an evolved version of copy_from scp that uses local copies if we are
# running on a policy server instead of copying from a localhost remote blindly.
body copy_from rudder_copy_from(from, server,compare,trustkey,preserve,purge) {

    source   => "${from}";

    compare  => "${compare}";
    encrypt  => "true";
    verify   => "true";
    trustkey => "${trustkey}";
    preserve => "${preserve}"; # Preserve the permissions
    purge    => "${purge}";
    copy_backup => "timestamp";

  !root_server::
    servers  => { "${server}" };

  community_edition::
    portnumber => "&COMMUNITYPORT&";
}

body copy_from copy(from)
{
        source      => "${from}";
        copy_backup => "false";
        preserve    => "true";
}

body copy_from copy_digest(from)
{
        source      => "${from}";
        copy_backup => "timestamp";
        preserve    => "true";
        compare     => "digest";

}

#########################################################
# This body is deprecated, and should not be used anymore
#########################################################
body classes class_trigger(if,else,kept)
{
        promise_kept     => { "${kept}" };
        promise_repaired => { "${if}" };
        repair_failed    => { "${else}" };
        repair_denied    => { "${else}" };
        repair_timeout   => { "${else}" };
}

#########################################################
body location append
{
        before_after => "after";
}

#########################################################
body package_method yum_remi
{

        package_changes               => "bulk";
        package_list_command          => "/usr/bin/yum list installed";
        package_list_name_regex       => "([^.]+).*";
        package_list_version_regex    => "[^\s]\s+([^\s]+).*";
        package_list_arch_regex       => "[^.]+\.([^\s]+).*";
        package_installed_regex       => ".*installed.*";
        package_name_convention       => "${name}.${arch}";
        package_delete_convention     => "${name}";
        package_add_command           => "/usr/bin/yum --enablerepo=remi -y install";
        package_delete_command        => "/bin/rpm -e";
        package_verify_command        => "/bin/rpm -V";

}

#perms validation
body perms p(user,mode)
{
        owners => { "${user}" };
        mode   => "${mode}";
}

############################################

body file_select cf3_files
{
        leaf_name   => { "cf-.*" };
        file_result => "leaf_name";
}

body file_select by_fullname(names)
# @brief Select files that match `names`
# @param names A regular expression
{
        path_name  => { @(names)};
        file_result => "path_name";
}

#########################################################

body changes lay_trip_wire
{
        hash           => "best";
        report_changes => "content";
        update_hashes  => "yes";
}

########################################################

body action longjob
{
        ifelapsed => "240"; # run only every 4 hours
}

#######################################################
# For the library
#######################################################

body edit_defaults noempty_backup
{
  empty_file_before_editing => "false";
  edit_backup               => "timestamp";  # we want to keep a track of everything
  max_file_size             => "1024000";
}

body edit_defaults empty_backup
{
  empty_file_before_editing => "true";
  edit_backup               => "timestamp";
  max_file_size             => "1024000";
}


body edit_defaults def_no_backup
{
  empty_file_before_editing => "false";
  edit_backup               => "false";
  max_file_size             => "1024000";
}

body edit_defaults empty_size(size)
{
  empty_file_before_editing => "true";
  edit_backup => "false";
  max_file_size => "${size}";
}

body edit_defaults noempty_backup_size(size)
{
  empty_file_before_editing => "false";
  edit_backup               => "timestamp";  # we want to keep a track of everything
  max_file_size             => "${size}";
}

body edit_defaults empty_backup_size(size)
{
  empty_file_before_editing => "true";
  edit_backup               => "timestamp";
  max_file_size             => "${size}";
}


body edit_defaults def_no_backup_size(size)
{
  empty_file_before_editing => "false";
  edit_backup               => "false";
  max_file_size             => "${size}";
}
########################################################



########################################################

bundle edit_line DeleteLinesMatching(regex)
{
  delete_lines:

      "${regex}"
        action => WarnOnly;

}

########################################################

body action WarnOnly
{
        action_policy => "warn";
}

########################################
# Bodies
########################################

body replace_with With(x)

{
        replace_value => "${x}";
        occurrences   => "all";
}

########################################

################################
# For commands with a >
################################
body contain outputable
{
        useshell  => "true";
        no_output => "false";
}

################################
# For commands with a >, in a dir
################################
body contain outputable_dir(dir)
{
        useshell  => "true";
        no_output => "false";
        chdir     => "${dir}";
}

################################
# Process is launched ?
################################
body process_count islaunched(class)
{
        match_range         => irange("1", "500");
        in_range_define     => { "${class}"};
        out_of_range_define => {"no_${class}"};
}

###########################################################################################
# Cancel class
# Cancel every classes passed by argument
##########################################################################################

body classes cancel_all_classes(class_to_cancel) {
  cancel_kept     => { "${class_to_cancel}" };
  cancel_repaired => { "${class_to_cancel}" };
  cancel_notkept  => { "${class_to_cancel}" };
} 

###########################################################################################
# Persistent class
# If the promise is repaired, define repaired for length minutes and undefine failed
# If the promise is not kept, undefine repaired and define failed for length minutes
##########################################################################################
body classes persistant_class(repaired, failed, length)
{
        promise_repaired => { "${repaired}" };
        repair_failed    => { "${failed}" };
        repair_denied    => { "${failed}" };
        repair_timeout   => { "${failed}" };

        cancel_repaired  => {"${failed}"};
        cancel_notkept   => {"${repaired}"};

        persist_time     => "${length}";
}



###########################################################################################
# Persistent class
# If the promise is repaired/kept, define repaired for length minutes and undefine failed
# If the promise is not kept, undefine repaired and define failed for length minutes
##########################################################################################
body classes set_persist_classes(repaired, failed, length)
{
        promise_kept 	   => { "${repaired}" };
        promise_repaired => { "${repaired}" };
        repair_failed    => { "${failed}" };
        repair_denied    => { "${failed}" };
        repair_timeout   => { "${failed}" };

        cancel_kept      => {"${failed}"};
        cancel_repaired  => {"${failed}"};
        cancel_notkept   => {"${repaired}"};

        persist_time     => "${length}";
}

################################################
# kept_if_else
# set kept if the promise is kept
# yes if repaired
# no if cannot repair
################################################
body classes kept_if_else(kept, yes,no)

{
        promise_kept     => { "${kept}" };
        promise_repaired => { "${yes}" };
        repair_failed    => { "${no}" };
        repair_denied    => { "${no}" };
        repair_timeout   => { "${no}" };
}


#########################################
# Make a local copy with a digest check #
#########################################
body copy_from digest_cp(from)
{
        source            => "${from}";
        compare           => "digest";
        copylink_patterns => { ".*" };
        copy_backup       => "timestamp";
}

################################################
# kept_if_else with persistant classes 
# set kept if the promise is kept
# yes if repaired
# no if cannot repair
################################################

body classes kept_if_else_persist(kept, repaired, failed, persist) {

  promise_kept     => { "${kept}" };
  promise_repaired => { "${repaired}" };

  repair_failed    => { "${failed}" };
  repair_denied    => { "${failed}" };
  repair_timeout   => { "${failed}" };

  persist_time     => "${persist}";
} 

################################################
# Special kept_if_else
# set kept if the promise is kept
# yes if repaired
# no if cannot repair
# Trigger an additionnal promise if repaired
################################################
body classes kept_if_else_hook(kept,yes,no,hook)

{
        promise_kept     => { "${kept}" };
        promise_repaired => { "${yes}", "${hook}" };
        repair_failed    => { "${no}" };
        repair_denied    => { "${no}" };
        repair_timeout   => { "${no}" };
}

################################################
# Simple group adjustment body
################################################
body perms group(group)
{
        groups => { "${group}" };
}


################################################
# Same as recurse but without xdev
# and including the current dir
################################################
body depth_search recurse_with_current(d)

{
        depth           => "${d}";
        include_basedir => "true";
        xdev            => "false";
}

########################################################################
# Mount an NFS share, and allow the user to select if it is persistent #
########################################################################
body mount rudder_nfs(server,source,type,persistence)
{
        mount_type   => "${type}";
        mount_source => "${source}";
        mount_server => "${server}";
        edit_fstab   => "${persistence}";
}

########################################################################
# Same as std_defs, allowing user to specify the file erase policy     #
########################################################################
body edit_defaults rudder_empty_select(select)
{
        empty_file_before_editing => "${select}";
        max_file_size             => "1024000";
        edit_backup               => "timestamp";
}

########################################################################
# Handle a directory recursively, including the dir itself             #
########################################################################
body depth_search recurse_withroot(d)
{
        depth           => "${d}";
        # xdev            => "true";
        include_basedir => "true";
}

########################################################################
# Change group and mode of a file/directory                            #
########################################################################
body perms mg(mode,group)
{
        groups => { "${group}" };
        mode   => "${mode}";
}

########################################################################
# Select a file using a date AND a pattern                             #
########################################################################
body file_select date_pattern(age, pattern)
{
        mtime       => irange("0", ago(0,0,"${age}",0,0,0));
        leaf_name   => { "${pattern}" };

        file_result => "leaf_name.mtime";
}

########################################################################
# Install a package using rug                                          #
########################################################################
body package_method rudder_rug
{

        package_changes               => "individual";

        package_list_command          => "/bin/rpm -qa --queryformat \"i | repos | %{name} | %{version}-%{release} | %{arch}\n\"";
        package_list_update_ifelapsed => "240";
        package_installed_regex       => "i.*";
        package_list_name_regex       => "[^|]+\|[^|]+\|\s+([^\s]+).*";
        package_list_version_regex    => "[^|]+\|[^|]+\|[^|]+\|\s+([^\s]+).*";
        package_list_arch_regex       => "[^|]+\|[^|]+\|[^|]+\|[^|]+\|\s+([^\s]+).*";

        package_name_convention       => "${name}";
        package_add_command           => "/usr/bin/rug install -y";
        package_delete_command        => "/usr/bin/rug remove -y";
        package_update_command        => "/usr/bin/rug update -y";

        package_verify_command        => "/usr/bin/rug verify -y$"; # $ means no args

        # make correct version comparisons
        package_version_less_command  => "${rudder_rpm_knowledge.rpm_compare_less}";
        package_version_equal_command => "${rudder_rpm_knowledge.rpm_compare_equal}";

}

########################################################################
# Install a package using yum but with a check from rpm                #
########################################################################
body package_method rudder_yum
{

  package_changes               => "bulk";
  package_list_command          => "/bin/rpm -qa --qf '%{name} %{version}-%{release} %{arch}\n'";
  package_list_name_regex       => "^(\S+?)\s\S+?\s\S+$";
  package_list_version_regex    => "^\S+?\s(\S+?)\s\S+$";
  package_list_arch_regex       => "^\S+?\s\S+?\s(\S+)$";
  package_installed_regex       => ".*";
  package_name_convention       => "${name}";
  package_list_update_command   => "/usr/bin/yum --quiet check-update";
  package_list_update_ifelapsed => "240";
  package_patch_name_regex      => "([^.]+).*";
  package_patch_version_regex   => "[^\s]\s+([^\s]+).*";
  package_patch_arch_regex      => "[^.]+\.([^\s]+).*";
  package_add_command           => "/usr/bin/yum -y install";
  package_update_command        => "/usr/bin/yum -y update";
  package_patch_command         => "/usr/bin/yum -y update";
  package_delete_command        => "/bin/rpm -e --nodeps --allmatches";
  package_verify_command        => "/bin/rpm -V";

  # make correct version comparisons
  package_version_less_command  => "${rudder_rpm_knowledge.rpm_compare_less}";
  package_version_equal_command => "${rudder_rpm_knowledge.rpm_compare_equal}";

}


###################################################
# edit_line prepend
###################################################

bundle edit_line prepend(lines)
{
  insert_lines:

      "${lines}"
        comment  => "Prepending line: ${lines}",
        location => start;

}

###################################################
# edit_line rudder_line_insertion
###################################################

bundle edit_line rudder_line_insertion(lines, location)
{
insert_lines:

      "${lines}"
        comment => "Adding line: ${lines}",
        location => rudder_location_before_after("${location}");

}

#########################################################
body location rudder_location_before_after(location)
{
        before_after => "${location}";
}

###################################################
# edit_line replace_line
###################################################

bundle edit_line replace_line(regex,replacement)
{
  replace_patterns:

      "${regex}"
        replace_with => With("${replacement}"),
        comment      => "Replace every occurence of ${regex} with ${replacement}";

}

###################################################
# edit_line from_to
###################################################

bundle edit_line from_to(from,to)
{
  delete_lines:

      "${from}" comment => "Reset ${from}";

  insert_lines:

      "${to}"   comment => "Add ${to}";

}

###################################################
# contain in_shell_silent
###################################################

body contain in_shell_silent
{
        useshell  => "true";
        no_output => "true";
}

###################################################
# edit_line insert_rudder_disclaimer
###################################################

bundle edit_line insert_rudder_disclaimer
{
  insert_lines:

      "${rudder_parameters.rudder_file_edit_header}"
        location => start;

}

###################################################
# edit_line rudder_change_aix_password_entry
###################################################

bundle edit_line rudder_change_aix_password_entry(user, entry, content)
{

  field_edits:

    "\s*${entry}\s*=.*"
      select_region => rudder_aix_user_section("${user}"),
      edit_field    => col("=","2"," ${content}","set");

}

###################################################
# select_region rudder_aix_user_section
###################################################

body select_region rudder_aix_user_section(x)
{
select_start => "${x}:\s*";
select_end => "\S*:\s*";
}

#######################################################
# Match all variants of cron proccesses

body process_select cron_bin
{
  command => "(/usr/sbin/)?crond?( -n| -f)?";
  process_result => "command";
}
