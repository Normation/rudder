


def slackResponse = slackSend(channel: "ci-security", message: "7.2 - dependency check - <"+currentBuild.absoluteUrl+"|Link>", color: "#00A8E1")
def job = ""
def errors = []
def running = []

updateSlack(errors, running, slackResponse)

// Check vulns in dependencies on repo branches
def failedBuild = false

pipeline {
    agent none
    triggers { cron('@daily') }

    stages {
        stage('deps-webapp') {
            when { not { changeRequest() } }
            agent {
                dockerfile {
                    filename 'webapp/sources/Dockerfile'
                    additionalBuildArgs "--build-arg USER_ID=${JENKINS_UID}"
                    // and share maven cache
                    args '-v /srv/cache/maven:/home/jenkins/.m2'
                }
            }
            steps {
                script {
                    running.add("webapp")
                    updateSlack(errors, running, slackResponse)
                }
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    dir('webapp/sources') {
                        sh script: 'mvn --batch-mode -DfailBuildOnCVSS=7 -DcveValidForHours=48 -DsuppressionFiles=dependency-check-suppression.xml -DossindexAnalyzerEnabled=false org.owasp:dependency-check-maven:aggregate', label: "check webapp dependencies"
                        sh script: 'mvn --batch-mode license:aggregate-third-party-report', label: 'list webapp dependencies'
                    }
                }
            }
            post {


                failure {
                    script {
                        errors.add("webapp")
                        webapp = false
                        failedBuild = true
                        //notifier.notifyResult("scala-team")
                        slackSend(channel: slackResponse.threadId, message: "Dependency check error on webapp - <${currentBuild.absoluteUrl}console|Console>", color: "#CC3421")
                    }
                }

                cleanup {
                    script {
                        running.remove("webapp")
                        updateSlack(errors, running, slackResponse)
                    }
                }

                always {
            		archiveArtifacts artifacts: 'webapp/sources/target/dependency-check-report.html, webapp/sources/target/site/aggregate-third-party-report.html'
                }
            }
        }
        stage('deps-relayd') {
            when { not { changeRequest() } }
            agent {
                dockerfile {
                    filename 'relay/sources/relayd/Dockerfile'
                    additionalBuildArgs "--build-arg USER_ID=${JENKINS_UID}"
                    // mount cache
                    args '-v /srv/cache/cargo:/usr/local/cargo/registry'
                }
            }
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    dir('relay/sources/relayd') {
                        sh script: 'mkdir -p target', label: 'create target directory'
                        sh script: 'cargo deny check', label: 'check relayd dependencies'
                        sh script: 'cargo deny list > target/relayd-dependencies.txt', label: 'list relayd dependencies'
                    }
                }
            }
            post {

                failure {
                    script {
                        errors.add("relay")
                        failedBuild = true
                        slackSend(channel: slackResponse.threadId, message: "Dependency check error on relayd - <${currentBuild.absoluteUrl}console|Console>", color: "#CC3421")
                        //notifier.notifyResult("rust-team")
                    }
                }

                cleanup {
                    script {
                        running.remove("relay")
                        updateSlack(errors, running, slackResponse)
                    }
                }
                always {
                    archiveArtifacts artifacts: 'relay/sources/relayd/target/relayd-dependencies.txt'
                }
            }
        }
        stage('deps-policies') {
            when { not { changeRequest() } }
            agent {
                dockerfile {
                    filename 'policies/Dockerfile'
                    additionalBuildArgs "--build-arg USER_ID=${JENKINS_UID}"
                    // mount cache
                    args '-v /srv/cache/cargo:/usr/local/cargo/registry'
                }
            }
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    dir('policies') {
                        sh script: 'mkdir -p target', label: 'create target directory'
                        sh script: 'cargo deny check', label: 'check policies dependencies'
                        sh script: 'cargo deny list > target/policies-dependencies.txt', label: 'list policies dependencies'
                    }
                }
            }
            post {
                failure {
                    script {
                        errors.add("policies")
                        failedBuild = true
                        //notifier.notifyResult("rust-team")
                        slackSend(channel: slackResponse.threadId, message: "Dependency check error on policies - <${currentBuild.absoluteUrl}console|Console>", color: "#CC3421")
                    }
                }
                cleanup {
                    script {
                        running.remove("policies")
                        updateSlack(errors, running, slackResponse)
                    }
                }
                always {
                    archiveArtifacts artifacts: 'policies/target/policies-dependencies.txt'
                }
            }
        }
        stage('End') {
            steps {
                script {
                    if (failedBuild) {
                        error 'End of build'
                    } else {
                        echo 'End of build'
                    }
                }
            }
        }
    }
}


def updateSlack(errors, running , slackResponse) {


def msg ="*7.2 - dependency check* - <"+currentBuild.absoluteUrl+"|Link>\n"

def color = "#00A8E1"

if (! errors.isEmpty()) {
    msg += "*Errors* :nono: ("+errors.size()+")\n• " + errors.join("\n• ")
    color = "#CC3421"
}
if (! running.isEmpty()) {
    msg += "*Running* :felisk: ("+running.size()+")\n• " + running.join("\n• ")
}

if (errors.isEmpty() && running.isEmpty()) {
    msg +=  ":yesyes: All dependencies checked! :fiesta-parrot:"
	color = "good"
}
  slackSend(channel: slackResponse.channelId, message: msg, timestamp: slackResponse.ts, color: color)
}