


def slackResponse = slackSend(channel: "ci-security", text: "7.2 - dependency check - <"+currentBuild.absoluteUrl+"|Link>", color: "#00A8E1")
def job = ""
def webapp = null
def relay = null
def policies = null



// Check vulns in dependencies on repo branches
def failedBuild = false

pipeline {
    agent none
    triggers { cron('@daily') }

    stages {
        stage('deps-webapp') {
            when { not { changeRequest() } }
            agent {
                dockerfile {
                    filename 'webapp/sources/Dockerfile'
                    additionalBuildArgs "--build-arg USER_ID=${JENKINS_UID}"
                    // and share maven cache
                    args '-v /srv/cache/maven:/home/jenkins/.m2'
                }
            }
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    dir('webapp/sources') {
                        sh script: 'mvn --batch-mode -DfailBuildOnCVSS=7 -DcveValidForHours=48 -DsuppressionFiles=dependency-check-suppression.xml -DossindexAnalyzerEnabled=false org.owasp:dependency-check-maven:aggregate', label: "check webapp dependencies"
                        sh script: 'mvn --batch-mode license:aggregate-third-party-report', label: 'list webapp dependencies'
                    }
                }
            }
            post {

                success {
                    script {
                        webapp = true
                    }
                }

                failure {
                    script {
                        webapp = false
                        failedBuild = true
                        //notifier.notifyResult("scala-team")
                        slackSend(channel: slackResponse.threadId, message: "Dependency check error on webapp - <${currentBuild.absoluteUrl}console|Console>", color: "#CC3421")
                    }
                }

                always {
                    updateSlack(webapp, relay, policies, slackResponse)
            		archiveArtifacts artifacts: 'webapp/sources/target/dependency-check-report.html, webapp/sources/target/site/aggregate-third-party-report.html'
                }
            }
        }
        stage('deps-relayd') {
            when { not { changeRequest() } }
            agent {
                dockerfile {
                    filename 'relay/sources/relayd/Dockerfile'
                    additionalBuildArgs "--build-arg USER_ID=${JENKINS_UID}"
                    // mount cache
                    args '-v /srv/cache/cargo:/usr/local/cargo/registry'
                }
            }
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    dir('relay/sources/relayd') {
                        sh script: 'mkdir -p target', label: 'create target directory'
                        sh script: 'cargo deny check', label: 'check relayd dependencies'
                        sh script: 'cargo deny list > target/relayd-dependencies.txt', label: 'list relayd dependencies'
                    }
                }
            }
            post {

                success {
                    script {
                        relay = true
                    }
                }
                failure {
                    script {
                        relay = false
                        failedBuild = true
                        slackSend(channel: slackResponse.threadId, message: "Dependency check error on relayd - <${currentBuild.absoluteUrl}console|Console>", color: "#CC3421")
                        //notifier.notifyResult("rust-team")
                    }
                }
                always {
                    updateSlack(webapp, relay, policies, slackResponse)
                    archiveArtifacts artifacts: 'relay/sources/relayd/target/relayd-dependencies.txt'
                }
            }
        }
        stage('deps-policies') {
            when { not { changeRequest() } }
            agent {
                dockerfile {
                    filename 'policies/Dockerfile'
                    additionalBuildArgs "--build-arg USER_ID=${JENKINS_UID}"
                    // mount cache
                    args '-v /srv/cache/cargo:/usr/local/cargo/registry'
                }
            }
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    dir('policies') {
                        sh script: 'mkdir -p target', label: 'create target directory'
                        sh script: 'cargo deny check', label: 'check policies dependencies'
                        sh script: 'cargo deny list > target/policies-dependencies.txt', label: 'list policies dependencies'
                    }
                }
            }
            post {
                success {
                    script {
                        policies = true
                        //notifier.notifyResult("rust-team")
                    }
                }
                failure {
                    script {
                        policies = false
                        failedBuild = true
                        //notifier.notifyResult("rust-team")
                        slackSend(channel: slackResponse.threadId, message: "Dependency check error on policies - <${currentBuild.absoluteUrl}console|Console>", color: "#CC3421")

                    }
                }
                always {
                    archiveArtifacts artifacts: 'policies/target/policies-dependencies.txt'
                }
            }
        }
        stage('End') {
            steps {
                script {
                    if (failedBuild) {
                        error 'End of build'
                    } else {
                        echo 'End of build'
                    }
                }
            }
        }
    }
}


def updateSlack(webapp, relay, policies, slackResponse) {


def text = "7.2 - dependency check - <"+currentBuild.absoluteUrl+"|Link> \n"

if (webapp == null) {
    text += "• :felisk: "
} else {
    if (webapp) {
      text += "• :yesyes: "
    } else {
      text += "• :nono: "

    }
}
text += "webapp\n"


if (relay == null) {
    text += "• :felisk: "
} else {
    if (relay) {
      text += "• :yesyes: "
    } else {
      text += "• :nono: "

    }
}
text += "relay\n"


if (policies == null) {
    text += "• :felisk: "
} else {
    if (policies) {
      text += "• :yesyes: "
    } else {
      text += "• :nono: "

    }
}
text += "policies\n"

def color = "#00A8E1"

if (webapp && policies && relay) {
    def block =
	[
		"type": "section",
		"text": [
			"type": "mrkdwn",
			"text": "All nightly builds completed !"
		]
	]
    color = "good"
    blocks.add(block)
}
if (!webapp || !policies || !relay) { color = "#CC3421"}
if

  slackSend(channel: slackResponse.channelId, text: text, timestamp: slackResponse.ts, color: color)
}