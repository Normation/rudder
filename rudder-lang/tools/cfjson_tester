#!/usr/bin/python3

"""
Cf and Json / rudder-lang compatibility tester
Usage: 
    cfjson_tester ncf-to-json [--config-file=<local_config_path.conf>] <file.cf> <new.json>
    cfjson_tester compare-json [--config-file=<local_config_path.conf>] <first.json> <new.json>
    cfjson_tester compare-cf [--config-file=<local_config_path.conf>] <first.cf> <new.cf>
"""

import sys
import os
import configparser
import codecs
import json
from pprint import pprint
import re
from subprocess import check_output

# prints the output at json format. If no issue : nothing is printed. Else, print either json diff or python error
def print_json(filename, json_to_format, is_python_error=False):
  if is_python_error:
    formatted_json = { "file": filename, "diff": json_to_format }
  else:
    formatted_json = { "file": filename,  "error": json_to_format }
  print(json.dumps(formatted_json, indent=2) + ',')

def ncf_to_json(cf_file, json_translation):
  methods_data = ncf.get_all_generic_methods_metadata(ncf_path)
  methods = methods_data["data"]["generic_methods"]

  file=cf_file

  try:
    with codecs.open(file, encoding="utf-8") as fd:
      content = fd.read()
  except IOError as e:
    print_json(file, str(e), True)
    exit(1)

  try:
    result = ncf.parse_technique_metadata(content)
    technique = result["result"]
    technique['method_calls'] = ncf.parse_technique_methods(file, methods)
  except ncf.NcfError as e:
    print_json(file, str(e), True)
    exit(1)

  with open(json_translation, "w") as fd:
    fd.write(json.dumps(technique, indent=4))

def compare_json(first, second):
  try:
    with open(first, "r") as f1:
      try:
        with open(second, "r") as f2:
          j1 = json.load(f1)
          j2 = json.load(f2)
      except IOError as e:
        print_json(second, str(e), True)
        exit(1)
  except IOError as e:
    print_json(first, str(e), True)
    exit(1)
  diff = jsondiff.diff(j1, j2, syntax="symmetric", marshal=True)
  ## diff hacks
  if 'bundle_name' in diff:
    if diff['bundle_name'][0] + "_technique" == diff['bundle_name'][1]:
      del diff['bundle_name']
  ## print if diff
  if len(diff) != 0:
    print_json(second, diff)
    exit(1)

def load_cf(file_name):
  # Check file exists
  if not os.path.exists(file_name):
    print_json(file_name, 'No such file', True)
    exit(1)

  env = os.environ.copy()
  env['RES_OPTIONS'] = 'attempts:0'
  out = check_output([ncf.CFENGINE_PATH, "-pjson", "-f", file_name], env=env)
  try:
    promises = json.loads(out)
  except Exception as e:
    print_json(file_name, 'An error occured while parsing technique: {}'.format(str(e)), True)
    exit(1)
  return promises

def compare_cf(first, second):
  j1 = load_cf(first)
  j2 = load_cf(second)
  diff = jsondiff.diff(j1, j2, syntax="symmetric", marshal=True)
  remove_wilful_entries(diff)
  empty_dict_cleaner(diff)
  if diff and len(diff) != 0:
    print_json(second, diff)


## deletes from diff list every i/o difference done on purpose (ie that are not a bug)
def remove_wilful_entries(diff):
  ## del name since `_technique` is always added
  name = deep_get(diff, ['bundles'], 'name')
  if name[0] + '_technique' == name[1]:
    deep_del(diff, ['bundles'], 'name', 'name')
  ## del sourcePath since it is not relevant
  deep_del(diff, ['bundles'], 'sourcePath', 'sourcePath')
  ## del superfluous if true equivalent condition
  deep_del(diff, ['bundles', 'promiseTypes', 'contexts', 'promises', 'attributes', 'rval', 'arguments'], {'type': 'string', 'value': 'any'}, '$delete')


def empty_dict_cleaner(diff_dict):
  if type(diff_dict) is dict:
    for element in diff_dict:
      empty_dict_cleaner(diff_dict[element])
      if len(diff_dict[element]) == 0:
        diff_dict.pop(element)
        return


def deep_get(haystack, deep_list, needle, index=0):
  if type(haystack) is list:
    for elem in haystack:
      deep_get(elem, deep_list, needle, index)
  elif type(haystack) is tuple:
    for elem in haystack:
      deep_get(elem, deep_list, needle, index)
  elif type(haystack) is dict and index < len(deep_list) and deep_list[index] in haystack:
    for key, value in haystack[deep_list[index]].copy().items():
      deep_get(value, deep_list, needle, index + 1)
      if type(needle) is str and needle in value:
        return value[needle]
  return None


## Warning1: only delete keys from dict!
## Warning2: compare (needle) either from key or with dict content 
def deep_del(haystack, deep_list, needle, delfrom, index=0):
  ## consider list to be iterated on like any other dict content
  istodel = False
  if type(haystack) is list:
    for elem in haystack:
      istodel |= deep_del(elem, deep_list, needle, delfrom, index)
  elif type(haystack) is tuple:
    for elem in haystack:
      istodel |= deep_del(elem, deep_list, needle, delfrom, index)
  elif type(haystack) is dict and index < len(deep_list) and deep_list[index] in haystack:
    for key, value in haystack[deep_list[index]].copy().items():
      istodel |= deep_del(value, deep_list, needle, delfrom, index + 1)
      ## remove seeked child content if needle is a string
      if istodel and type(needle) is str and needle in value:
        value.pop(needle)
      ## remove content if needle has matched another dict
      if istodel and delfrom == key:
        haystack[deep_list[index]].pop(key)

  if type(needle) is str and needle in haystack:
    ## Will need to remove the child element (needle in haystack) from the parent as we recursively go back only from there (never deeper)
    return True
  if haystack == needle or (type(needle) is str and needle in haystack):
    return True
  return istodel


def load_config():
  cfg = configparser.ConfigParser()
  cfgpath='/opt/rudder/etc/rudderc.conf'
  if os.path.exists(cfgpath):
    cfg.read(cfgpath)
    python_modules_dir = cfg['default_paths']['py_modules'].strip('\"')
    sys.path.append(python_modules_dir)
  return cfg

if __name__ == "__main__":
  try:
    cfg = load_config()
    import docopt
    import jsondiff
    arguments = docopt.docopt(__doc__)
    if arguments['--config-file']:
      cfg.read(arguments['--config-file'])
    ncf_dir = cfg['default_paths']['ncf'].strip('\"')
    cfengine_path = cfg['default_paths']['cfengine'].strip('\"')
  except Exception as e:
    print_json('(Not yet defined)', 'An error occured while setting config: {}'.format(str(e)), True)
    exit(1)

  try:
    sys.path.append(ncf_dir+'/tools')
    import ncf
    ncf.CFENGINE_PATH=cfengine_path
    ncf_path=ncf_dir+'/tree/30_generic_methods'
  except Exception as e:
    print_json('(Not yet defined)', 'An error occured while importing ncf: {}'.format(str(e)), True)
    exit(1)
  
  if arguments['ncf-to-json']:
    ncf_to_json(arguments['<file.cf>'], arguments['<new.json>'])
  elif arguments['compare-json']:
    compare_json(arguments['<first.json>'], arguments['<new.json>'])
  elif arguments['compare-cf']:
    compare_cf(arguments['<first.cf>'], arguments['<new.cf>'])
