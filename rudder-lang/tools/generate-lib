#!/usr/bin/perl

use warnings;
use strict;

my %resource = ();
my @state = ();
my @config_lines= ();

my $cfgpath = "./tools/rudderc.conf";
if (@ARGV) {
  ($cfgpath) = @ARGV;
}
# ultralight homemade parser
my $ncfpath = get_ncfpath_from_conf_file($cfgpath);
my $ncf_methods = $ncfpath . "/tree/30_generic_methods/*";
my $is_empty=1;
foreach my $file (glob $ncf_methods) {
  $is_empty=0;
  # file exclusion
  next if $file=~ /\/_/;
  next if $file=~ /README/;
  next if $file=~ /permissions.cf/;

  open(my $fd, "<$file") or die "cannot read $file";

  my $resource_blocks=1;
  my $resource_identfiers=1;
  if ($file =~ /\/variable_/) { $resource_identfiers=2; }
  # only one paramater, TODO hack for translate
  if ($file =~ /\/variable_string_escaped/) { next; }

  # init data
  my $i=0;
  my ($resource, $state, $prefix, $class_parameter) = ("", "", "", -1);
  my $gm = "";
  my @resource_params=();
  my @state_params=();
  my %param_id=();

  # loop over GM
  while(my $line=<$fd>)
  {
    if ($line =~ /^#.*\@parameter\s+(\w+)\s.*$/) {
      $param_id{$1}=$i;
      if ($i < $resource_identfiers) {
        push @resource_params, "p$i";
      } else {
        push @state_params, "p$i";
      }
      $i++;
    }
    elsif($line =~ /^#.*\@class_prefix\s+(\w+)/) {
      $prefix = $1;
    }
    elsif($line =~ /^#.*\@class_parameter\s+(\w+)/) {
      $class_parameter = $param_id{$1};
    }
    elsif($line =~ /^bundle agent (\w+)\(/) {
      $gm = $1;
      # expection for kernel that should be named kernel_module
      my $res_type = "[a-zA-Z0-9]+";
      if ($1 =~ /kernel_module/) {
        $res_type = "kernel_module";
      }
      $gm =~ /^((?:$res_type\_){$resource_blocks})(\w+)$/;
      ($resource, $state) = ($1, $2);
      chop $resource;
    }
  }

  # keep output
  $resource{"resource $resource(".join(",",@resource_params).")"}=1;
  push @state, "$resource state $state(".join(",",@state_params)."){}";
  push @config_lines, "$gm = { class_prefix=\"$prefix\", class_parameter_id = $class_parameter }";
}

if ($is_empty) {
  print "no ncf method found for $ncf_methods";
}

open(my $stdlib,">./libs/stdlib.rl") or die "Cannot write stdlib";
print $stdlib "\@format=0";
print $stdlib "\n\n";
print $stdlib join("\n",keys %resource);
print $stdlib "\n\n";
print $stdlib join("\n", @state);
print $stdlib "\n\n";
close($stdlib);

my $config_header = "[resources]
variable = { parameter_count=2 }

[classes]
command_execution = \"(command_execution)_(.*)\"

[variables]

[conditions]

[methods]
";
open(my $conf,">./tools/translate_config.toml") or die "Cannot write methods config";
print $conf join("\n",$config_header);
print $conf join("\n",@config_lines);
close($conf);


sub get_ncfpath_from_conf_file {
  my ($file) = @_;

  my $is_default = 0;
  my $ncf = "";
  open (FILE, $file);
  while (<FILE>) {
    chomp;
    if ($is_default = 1 && /\s*ncf\s*=\s*"(?<path>[\/\w]+)"\s*/ ) {
      $ncf = $+{path};
    }
    if ( /\s*\[\s*(?<group>\w+)\s*\]\s*/ ) {
      if ($+{group} eq "default_paths") {
        $is_default = 1;
      } else {
        $is_default = 0;
      }
    }
  }
  close (FILE);
  return $ncf;
}
