# generated by rudderc
# @name supported_formats
# @version 1.0
# @description a gm supported only by cfengine, another one supported only by dsc, and one that is supported by both

bundle agent supported_formats_technique {

  vars:
    "resources_dir"        string => "${this.promise_dirname}/resources";
    "args"                  slist => {};
    "report_param"         string => join("_", args);
    "full_class_prefix"    string => canonify("supported_formats_technique_${report_param}");
    "class_prefix"         string => string_head("${full_class_prefix}", "1000");

  methods:
    # Condition once:
    # 
    #   condition("""cfengine_only""").once() as condition_once_cfengine_only
    # 
    "Condition once_${report_data.directive_id}_0" usebundle => _method_reporting_context("Condition once", "cfengine_only");
    "Condition once_${report_data.directive_id}_0" usebundle => condition_once("cfengine_only");

    # Directory present:
    # 
    #   directory("""shared_cf_dsc""").present() as directory_present_shared_cf_dsc
    # 
    "Directory present_${report_data.directive_id}_1" usebundle => _method_reporting_context("Directory present", "shared_cf_dsc");
    "Directory present_${report_data.directive_id}_1" usebundle => directory_present("shared_cf_dsc");

    # Directory present:
    # 
    #   directory("""shared_cf_dsc_condition""").present() as directory_present_shared_cf_dsc_condition
    # 
    "Directory present_${report_data.directive_id}_2" usebundle => _method_reporting_context("Directory present", "shared_cf_dsc_condition"),
                                             if => concat("windows");
    "Directory present_${report_data.directive_id}_2" usebundle => directory_present("shared_cf_dsc_condition"),
                                             if => concat("windows");
    "Directory present_${report_data.directive_id}_2" usebundle => _classes_noop(canonify("${class_prefix}_directory_present_shared_cf_dsc_condition")),
                                         unless => concat("windows");
    "Directory present_${report_data.directive_id}_2" usebundle => log_rudder("Skipping method 'Directory present' with key parameter 'shared_cf_dsc_condition' since condition 'windows' is not reached", "shared_cf_dsc_condition", canonify("${class_prefix}_directory_present_shared_cf_dsc_condition"), canonify("${class_prefix}_directory_present_shared_cf_dsc_condition"), @{args}),
                                         unless => concat("windows");

    # Registry key present:
    # 
    #   registry_key("""DSC_ONLY""").present() as registry_key_present_DSC_ONLY
    # 
    "Registry key present_${report_data.directive_id}_3" usebundle => _method_reporting_context("Registry key present", "DSC_ONLY");
    "Registry key present_${report_data.directive_id}_3" usebundle => log_na_rudder("'Registry key present' method is not available on classic Rudder agent, skip", "DSC_ONLY", "${class_prefix}_registry_key_present_DSC_ONLY", @{args});

    # Registry key present:
    # 
    #   registry_key("""IF_DSC_ONLY""").present() as registry_key_present_IF_DSC_ONLY
    # 
    "Registry key present_${report_data.directive_id}_4" usebundle => _method_reporting_context("Registry key present", "IF_DSC_ONLY");
    "Registry key present_${report_data.directive_id}_4" usebundle => log_na_rudder("'Registry key present' method is not available on classic Rudder agent, skip", "IF_DSC_ONLY", "${class_prefix}_registry_key_present_IF_DSC_ONLY", @{args});

}