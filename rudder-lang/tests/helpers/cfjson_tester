#!/usr/bin/python3

"""
Ncf / rudder-lang compatibility tester

Usage: 
    ncf ncf-to-json <file.cf> <new.json>
    ncf compare-json <first.json> <new.json>
    ncf compare-cf <first.cf> <new.cf>

"""

import configparser
import os
import toml
cfg = toml.load(os.getcwd()+'/libs/cfg.toml')
ncf_dir = cfg['default_paths']['ncf']
cfengine_path = cfg['default_paths']['cfengine']

import sys
sys.path.append(ncf_dir+'/tools')
import ncf
import codecs
import json
from pprint import pprint
import docopt
import re
import jsondiff
from subprocess import check_output

ncf.CFENGINE_PATH=cfengine_path
ncf_path=ncf_dir+'/tree/30_generic_methods'

def ncf_to_json(cf_file, json_translation):
  methods_data = ncf.get_all_generic_methods_metadata(ncf_path)
  methods = methods_data["data"]["generic_methods"]

  file=cf_file

  with codecs.open(file, encoding="utf-8") as fd:
    content = fd.read()
  try:
    result = ncf.parse_technique_metadata(content)
    technique = result["result"]

    technique['method_calls'] = ncf.parse_technique_methods(file, methods)

  except ncf.NcfError as e:
    bundle_name = os.path.splitext(os.path.basename(file))[0]
    print("Could not parse Technique '"+ bundle_name + "' cause:" + str(e))
    exit(1)

  with open(json_translation, "w") as fd:
    fd.write(json.dumps(technique, indent=4))

  print("Json written to " + json_translation)

def compare_json(first, second):
  with open(first, "r") as f1:  
    with open(second, "r") as f2:
      j1 = json.load(f1)
      j2 = json.load(f2)
  diff = jsondiff.diff(j1, j2, syntax="symmetric", marshal=True)
  ## diff hacks
  if 'bundle_name' in diff:
    if diff['bundle_name'][0] + "_technique" == diff['bundle_name'][1]:
      del diff['bundle_name']
  ## TEST
  if len(diff) == 0:
    print("Generated JSON OK")
  else:
    print("Generated JSON error")
    pprint(diff)
    exit(1)

def load_cf(file_name):
  # Check file exists
  if not os.path.exists(file_name):
    print("No such file: " + file_name)
    exit(1)

  env = os.environ.copy()
  env['RES_OPTIONS'] = 'attempts:0'
  out = check_output([ncf.CFENGINE_PATH, "-pjson", "-f", file_name], env=env)
  try:
    promises = json.loads(out)
  except Exception as e:
    print("An error occured while parsing technique '"+file_name+"'", cause = e)
    exit(1)
  return promises

def compare_cf(first, second):
  j1 = load_cf(first)
  j2 = load_cf(second)
  diff = jsondiff.diff(j1, j2, syntax="symmetric", marshal=True)
  pprint(diff)

if __name__ == "__main__":
  arguments = docopt.docopt(__doc__)
  if arguments['ncf-to-json']:
    ncf_to_json(arguments['<file.cf>'], arguments['<new.json>'])
  elif arguments['compare-json']:
    compare_json(arguments['<first.json>'], arguments['<new.json>'])
  elif arguments['compare-cf']:
    compare_cf(arguments['<first.cf>'], arguments['<new.cf>'])
