#!/usr/bin/python3

"""
Rudder package manager

Usage:
    rudder package [--debug] install-file <package.rpkg>...
    rudder package [--debug] install <package> [--version=<version>] [--nightly] [--quiet]
    rudder package [--debug] upgrade-all [--nightly] [--quiet] [--version=<version>]
    rudder package [--debug] show <package> [--version=<version>] [--nightly]
    rudder package [--debug] remove <package>...
    rudder package [--debug] search <package>...
    rudder package [--debug] list [--all]
    rudder package [--debug] update [--quiet]
    rudder package [--debug] licenses [--quiet]
    rudder package [--debug] check-connection
    rudder package [--debug] rudder-postupgrade
    rudder package [--debug] check-compatibility [--version=<version>]
    rudder package [--debug] plugin save-status
    rudder package [--debug] plugin restore-status [--version=<version>]
    rudder package [--debug] plugin enable <plugin>...
    rudder package [--debug] plugin enable-all
    rudder package [--debug] plugin disable <plugin>...
    rudder package [--debug] plugin disable-all

Options:
    --debug    Set logging level to debug
    --version <version>  Provide specific version
    --nightly  Force the command to execute on the nightlies instead of the released plugins
    --all      List all plugin name available
    --quiet    Deprecated, force the log level to info

Commands:
    install-file
        install a single package file into Rudder

    install
        download and install the latest released version of the plugin

    upgrade-all
        download and upgrade the installed plugins to their latest available version

    show
        show detailed informations on a given plugin

    remove
        remove the given package from Rudder

    search
        list available package versions

    list
        list installed packages

    update
        update the repository index

    licenses
        download all the licenses found on the given repo

    check-connection
       check whether the url to download plugins is reachable or not

    rudder-postupgrade
        execute plugins post install scripts (needed after a Rudder upgrade)

    check-compatibility
        disable plugins that are not compatible with current Rudder version

    plugin
        commands on plugin status
"""

# nice to have
#   rudder-pkg install package   # from std dir / from repo
#   rudder-pkg upgrade package   # from std dir / from repo

import sys, logging
sys.path.insert(0,"/opt/rudder/share/python")
sys.path.insert(0,"/opt/rudder/share/python/rudder-pkg")

import docopt
import rudderPkg
import rudderPkgLogger
import rudderPkgUtils as utils

fezfezf
fezfezfz
truc(Ã )

## MAIN
if __name__ == "__main__":
    # hackish way to make docopt compatible with the rudder command syntax
    # docopt parse the complete list given in argv BUT, if nothing is passed,
    # it will parse sys.argv[1:]
    args = docopt.docopt(__doc__, argv=["package"]  + sys.argv[1:])
    if args['--debug']:
        rudderPkgLogger.startLogger('DEBUG')
    else:
        rudderPkgLogger.startLogger('INFO')
    logger = logging.getLogger("rudder-pkg")
    utils.db_load()
    utils.readConf()

    if args['install-file']:
        rudderPkg.install_file(args['<package.rpkg>'], None)
    if args['show']:
        version = ""
        mode = "release"
        if args['--nightly']:
            mode = "nightly"
        if args['--version']:
            version = args['--version']
        rudderPkg.package_show(args['<package>'], version, mode)
    elif args['list']:
        if args['--all']:
            rudderPkg.package_list_name()
        else:
            rudderPkg.package_list_installed()
    elif args['update']:
        utils.check_url()
        rudderPkg.update()
    elif args['upgrade-all']:
        utils.check_url()
        version = None
        if args['--version']:
            version = args['--version']
        if args['--nightly']:
            rudderPkg.upgrade_all("nightly", version)
        else:
            rudderPkg.upgrade_all("release", version)

    elif args['licenses']:
        utils.check_url()
        rudderPkg.update_licenses()
    elif args['check-connection']:
        utils.check_url()
    elif args['search']:
        utils.check_url()
        rudderPkg.package_search(args['<package>'])
    elif args['install']:
        utils.check_url()
        if args['--version']:
            if args['--nightly']:
                rudderPkg.package_install_specific_version(args['<package>'], args['--version'], "nightly")
            else:
                rudderPkg.package_install_specific_version(args['<package>'], args['--version'], "release")
        else:
            if args['--nightly']:
                rudderPkg.package_install_latest(args['<package>'], "nightly", None)
            else:
                rudderPkg.package_install_latest(args['<package>'], "release", None)
    elif args['remove']:
        rudderPkg.remove(args['<package>'])
    elif args['rudder-postupgrade']:
        rudderPkg.rudder_postupgrade()
    elif args['check-compatibility']:
        version = None
        if args['--version']:
            version = args['--version']
        rudderPkg.check_compatibility(version)
    elif args['plugin']:
        if args['save-status']:
            rudderPkg.plugin_save_status()
        elif args['restore-status']:
            version = None
            if args['--version']:
                version = args['--version']
            rudderPkg.plugin_restore_status(version)
        elif args['enable']:
            rudderPkg.plugin_status(args['<plugin>'], True)
        elif args['enable-all']:
            rudderPkg.plugin_enable_all()
        elif args['disable']:
            rudderPkg.plugin_status(args['<plugin>'], False)
        elif args['disable-all']:
            rudderPkg.plugin_disable_all()

    if utils.jetty_needs_restart:
        utils.shell("service rudder-jetty restart", "Restarting jetty")
        logger.info("done")
